// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Insure.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Insure.pbobjc.h"
 #import "CommonData.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - InsureRoot

@implementation InsureRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPBDebugCheckRuntimeVersion();
    registry = [[GPBExtensionRegistry alloc] init];
    [registry addExtensions:[CommonDataRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - InsureRoot_FileDescriptor

static GPBFileDescriptor *InsureRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - TendDetailType

@implementation TendDetailType

@dynamic id_p;
@dynamic typeName;
@dynamic remark;
@dynamic status;
@dynamic createStaffId;
@dynamic createStaffName;
@dynamic createTime;
@dynamic companyId;

typedef struct TendDetailType__storage_ {
  uint32_t _has_storage_[1];
  int32_t status;
  NSString *typeName;
  NSString *remark;
  NSString *createStaffName;
  uint64_t id_p;
  uint64_t createStaffId;
  uint64_t createTime;
  uint64_t companyId;
} TendDetailType__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = TendDetailType_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TendDetailType__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "typeName",
        .dataTypeSpecific.className = NULL,
        .number = TendDetailType_FieldNumber_TypeName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TendDetailType__storage_, typeName),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "remark",
        .dataTypeSpecific.className = NULL,
        .number = TendDetailType_FieldNumber_Remark,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(TendDetailType__storage_, remark),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = TendDetailType_FieldNumber_Status,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(TendDetailType__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "createStaffId",
        .dataTypeSpecific.className = NULL,
        .number = TendDetailType_FieldNumber_CreateStaffId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(TendDetailType__storage_, createStaffId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "createStaffName",
        .dataTypeSpecific.className = NULL,
        .number = TendDetailType_FieldNumber_CreateStaffName,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(TendDetailType__storage_, createStaffName),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "createTime",
        .dataTypeSpecific.className = NULL,
        .number = TendDetailType_FieldNumber_CreateTime,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(TendDetailType__storage_, createTime),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "companyId",
        .dataTypeSpecific.className = NULL,
        .number = TendDetailType_FieldNumber_CompanyId,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(TendDetailType__storage_, companyId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TendDetailType class]
                                     rootClass:[InsureRoot class]
                                          file:InsureRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TendDetailType__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\002\010\000\005\r\000\006\017\000\007\n\000\010\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Illness

@implementation Illness

@dynamic id_p;
@dynamic illnessName;
@dynamic remark;
@dynamic status;
@dynamic createStaffId;
@dynamic createStaffName;
@dynamic createTime;
@dynamic companyId;

typedef struct Illness__storage_ {
  uint32_t _has_storage_[1];
  int32_t status;
  NSString *illnessName;
  NSString *remark;
  NSString *createStaffName;
  uint64_t id_p;
  uint64_t createStaffId;
  uint64_t createTime;
  uint64_t companyId;
} Illness__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = Illness_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Illness__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "illnessName",
        .dataTypeSpecific.className = NULL,
        .number = Illness_FieldNumber_IllnessName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Illness__storage_, illnessName),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "remark",
        .dataTypeSpecific.className = NULL,
        .number = Illness_FieldNumber_Remark,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Illness__storage_, remark),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = Illness_FieldNumber_Status,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Illness__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "createStaffId",
        .dataTypeSpecific.className = NULL,
        .number = Illness_FieldNumber_CreateStaffId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Illness__storage_, createStaffId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "createStaffName",
        .dataTypeSpecific.className = NULL,
        .number = Illness_FieldNumber_CreateStaffName,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(Illness__storage_, createStaffName),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "createTime",
        .dataTypeSpecific.className = NULL,
        .number = Illness_FieldNumber_CreateTime,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(Illness__storage_, createTime),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "companyId",
        .dataTypeSpecific.className = NULL,
        .number = Illness_FieldNumber_CompanyId,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(Illness__storage_, companyId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Illness class]
                                     rootClass:[InsureRoot class]
                                          file:InsureRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Illness__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\002\013\000\005\r\000\006\017\000\007\n\000\010\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TendDetail

@implementation TendDetail

@dynamic id_p;
@dynamic tendDetail;
@dynamic detailTypeId;
@dynamic detailTypeName;
@dynamic illnessId;
@dynamic illnessName;
@dynamic status;
@dynamic createStaffId;
@dynamic createStaffName;
@dynamic createTime;
@dynamic companyId;

typedef struct TendDetail__storage_ {
  uint32_t _has_storage_[1];
  int32_t status;
  NSString *tendDetail;
  NSString *detailTypeName;
  NSString *illnessName;
  NSString *createStaffName;
  uint64_t id_p;
  uint64_t detailTypeId;
  uint64_t illnessId;
  uint64_t createStaffId;
  uint64_t createTime;
  uint64_t companyId;
} TendDetail__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = TendDetail_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TendDetail__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "tendDetail",
        .dataTypeSpecific.className = NULL,
        .number = TendDetail_FieldNumber_TendDetail,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TendDetail__storage_, tendDetail),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "detailTypeId",
        .dataTypeSpecific.className = NULL,
        .number = TendDetail_FieldNumber_DetailTypeId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(TendDetail__storage_, detailTypeId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "detailTypeName",
        .dataTypeSpecific.className = NULL,
        .number = TendDetail_FieldNumber_DetailTypeName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(TendDetail__storage_, detailTypeName),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "illnessId",
        .dataTypeSpecific.className = NULL,
        .number = TendDetail_FieldNumber_IllnessId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(TendDetail__storage_, illnessId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "illnessName",
        .dataTypeSpecific.className = NULL,
        .number = TendDetail_FieldNumber_IllnessName,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(TendDetail__storage_, illnessName),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = TendDetail_FieldNumber_Status,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(TendDetail__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "createStaffId",
        .dataTypeSpecific.className = NULL,
        .number = TendDetail_FieldNumber_CreateStaffId,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(TendDetail__storage_, createStaffId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "createStaffName",
        .dataTypeSpecific.className = NULL,
        .number = TendDetail_FieldNumber_CreateStaffName,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(TendDetail__storage_, createStaffName),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "createTime",
        .dataTypeSpecific.className = NULL,
        .number = TendDetail_FieldNumber_CreateTime,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(TendDetail__storage_, createTime),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "companyId",
        .dataTypeSpecific.className = NULL,
        .number = TendDetail_FieldNumber_CompanyId,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(TendDetail__storage_, companyId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TendDetail class]
                                     rootClass:[InsureRoot class]
                                          file:InsureRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TendDetail__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\t\002\n\000\003\014\000\004\016\000\005\t\000\006\013\000\010\r\000\t\017\000\n\n\000\013\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - InsureListVO

@implementation InsureListVO

@dynamic insureNo;
@dynamic kinsName;
@dynamic idcard;
@dynamic contactName;
@dynamic contactPhone;
@dynamic addrDetail;
@dynamic statusStr;
@dynamic status;
@dynamic orderStatusStr;
@dynamic orderStatus;

typedef struct InsureListVO__storage_ {
  uint32_t _has_storage_[1];
  int32_t status;
  uint32_t orderStatus;
  NSString *insureNo;
  NSString *kinsName;
  NSString *idcard;
  NSString *contactName;
  NSString *contactPhone;
  NSString *addrDetail;
  NSString *statusStr;
  NSString *orderStatusStr;
} InsureListVO__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "insureNo",
        .dataTypeSpecific.className = NULL,
        .number = InsureListVO_FieldNumber_InsureNo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(InsureListVO__storage_, insureNo),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "kinsName",
        .dataTypeSpecific.className = NULL,
        .number = InsureListVO_FieldNumber_KinsName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(InsureListVO__storage_, kinsName),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "idcard",
        .dataTypeSpecific.className = NULL,
        .number = InsureListVO_FieldNumber_Idcard,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(InsureListVO__storage_, idcard),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "contactName",
        .dataTypeSpecific.className = NULL,
        .number = InsureListVO_FieldNumber_ContactName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(InsureListVO__storage_, contactName),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "contactPhone",
        .dataTypeSpecific.className = NULL,
        .number = InsureListVO_FieldNumber_ContactPhone,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(InsureListVO__storage_, contactPhone),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "addrDetail",
        .dataTypeSpecific.className = NULL,
        .number = InsureListVO_FieldNumber_AddrDetail,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(InsureListVO__storage_, addrDetail),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "statusStr",
        .dataTypeSpecific.className = NULL,
        .number = InsureListVO_FieldNumber_StatusStr,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(InsureListVO__storage_, statusStr),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = InsureListVO_FieldNumber_Status,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(InsureListVO__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "orderStatusStr",
        .dataTypeSpecific.className = NULL,
        .number = InsureListVO_FieldNumber_OrderStatusStr,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(InsureListVO__storage_, orderStatusStr),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "orderStatus",
        .dataTypeSpecific.className = NULL,
        .number = InsureListVO_FieldNumber_OrderStatus,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(InsureListVO__storage_, orderStatus),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[InsureListVO class]
                                     rootClass:[InsureRoot class]
                                          file:InsureRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(InsureListVO__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\010\001\007A\000\002\010\000\004\013\000\005\014\000\006\n\000\007\t\000\t\016\000\n\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SubsidyVO

@implementation SubsidyVO

@dynamic monthDesc;
@dynamic amountStr;
@dynamic subsidyDesc;
@dynamic amount;
@dynamic ym;
@dynamic days;
@dynamic unit;

typedef struct SubsidyVO__storage_ {
  uint32_t _has_storage_[1];
  uint32_t days;
  uint32_t unit;
  NSString *monthDesc;
  NSString *amountStr;
  NSString *subsidyDesc;
  NSString *ym;
  uint64_t amount;
} SubsidyVO__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "monthDesc",
        .dataTypeSpecific.className = NULL,
        .number = SubsidyVO_FieldNumber_MonthDesc,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SubsidyVO__storage_, monthDesc),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "amountStr",
        .dataTypeSpecific.className = NULL,
        .number = SubsidyVO_FieldNumber_AmountStr,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SubsidyVO__storage_, amountStr),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "subsidyDesc",
        .dataTypeSpecific.className = NULL,
        .number = SubsidyVO_FieldNumber_SubsidyDesc,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SubsidyVO__storage_, subsidyDesc),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "amount",
        .dataTypeSpecific.className = NULL,
        .number = SubsidyVO_FieldNumber_Amount,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SubsidyVO__storage_, amount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "ym",
        .dataTypeSpecific.className = NULL,
        .number = SubsidyVO_FieldNumber_Ym,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SubsidyVO__storage_, ym),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "days",
        .dataTypeSpecific.className = NULL,
        .number = SubsidyVO_FieldNumber_Days,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SubsidyVO__storage_, days),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "unit",
        .dataTypeSpecific.className = NULL,
        .number = SubsidyVO_FieldNumber_Unit,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(SubsidyVO__storage_, unit),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SubsidyVO class]
                                     rootClass:[InsureRoot class]
                                          file:InsureRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SubsidyVO__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\t\000\002\t\000\003\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TeachRecordVO

@implementation TeachRecordVO

@dynamic orderId;
@dynamic recordId;
@dynamic createDate;
@dynamic hgPraise;

typedef struct TeachRecordVO__storage_ {
  uint32_t _has_storage_[1];
  NSString *orderId;
  NSString *createDate;
  NSString *hgPraise;
  uint64_t recordId;
} TeachRecordVO__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = TeachRecordVO_FieldNumber_OrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TeachRecordVO__storage_, orderId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "recordId",
        .dataTypeSpecific.className = NULL,
        .number = TeachRecordVO_FieldNumber_RecordId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TeachRecordVO__storage_, recordId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "createDate",
        .dataTypeSpecific.className = NULL,
        .number = TeachRecordVO_FieldNumber_CreateDate,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(TeachRecordVO__storage_, createDate),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "hgPraise",
        .dataTypeSpecific.className = NULL,
        .number = TeachRecordVO_FieldNumber_HgPraise,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(TeachRecordVO__storage_, hgPraise),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TeachRecordVO class]
                                     rootClass:[InsureRoot class]
                                          file:InsureRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TeachRecordVO__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001\007\000\002\010\000\003\n\000\004\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
