// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Stat.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Stat.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - StatRoot

@implementation StatRoot

@end

#pragma mark - StatRoot_FileDescriptor

static GPBFileDescriptor *StatRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum STAT_TYPE

GPBEnumDescriptor *STAT_TYPE_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "StDefault\000StUserAction\000StInterFace\000";
    static const int32_t values[] = {
        STAT_TYPE_StDefault,
        STAT_TYPE_StUserAction,
        STAT_TYPE_StInterFace,
    };
    static const char *extraTextFormatInfo = "\002\001b\212\000\002b\211\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(STAT_TYPE)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:STAT_TYPE_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL STAT_TYPE_IsValidValue(int32_t value__) {
  switch (value__) {
    case STAT_TYPE_StDefault:
    case STAT_TYPE_StUserAction:
    case STAT_TYPE_StInterFace:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum ACTION

GPBEnumDescriptor *ACTION_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "ActDefault\000ActView\000ActClick\000ActShare\000Act"
        "Report\000";
    static const int32_t values[] = {
        ACTION_ActDefault,
        ACTION_ActView,
        ACTION_ActClick,
        ACTION_ActShare,
        ACTION_ActReport,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ACTION)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ACTION_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ACTION_IsValidValue(int32_t value__) {
  switch (value__) {
    case ACTION_ActDefault:
    case ACTION_ActView:
    case ACTION_ActClick:
    case ACTION_ActShare:
    case ACTION_ActReport:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum SCENCE_PAGE

GPBEnumDescriptor *SCENCE_PAGE_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "SpDefault\000SpSplash\000SpLogin\000SpLoginPhone\000"
        "SpCompleteProfile\000SpEditFace\000SpAddPet\000Sp"
        "RecommandUser\000SpNear\000SpUserProfile\000SpWal"
        "kdog\000SpFeeds\000SpFeedsDetail\000SpFeedsAdd\000";
    static const int32_t values[] = {
        SCENCE_PAGE_SpDefault,
        SCENCE_PAGE_SpSplash,
        SCENCE_PAGE_SpLogin,
        SCENCE_PAGE_SpLoginPhone,
        SCENCE_PAGE_SpCompleteProfile,
        SCENCE_PAGE_SpEditFace,
        SCENCE_PAGE_SpAddPet,
        SCENCE_PAGE_SpRecommandUser,
        SCENCE_PAGE_SpNear,
        SCENCE_PAGE_SpUserProfile,
        SCENCE_PAGE_SpWalkdog,
        SCENCE_PAGE_SpFeeds,
        SCENCE_PAGE_SpFeedsDetail,
        SCENCE_PAGE_SpFeedsAdd,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(SCENCE_PAGE)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:SCENCE_PAGE_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL SCENCE_PAGE_IsValidValue(int32_t value__) {
  switch (value__) {
    case SCENCE_PAGE_SpDefault:
    case SCENCE_PAGE_SpSplash:
    case SCENCE_PAGE_SpLogin:
    case SCENCE_PAGE_SpLoginPhone:
    case SCENCE_PAGE_SpCompleteProfile:
    case SCENCE_PAGE_SpEditFace:
    case SCENCE_PAGE_SpAddPet:
    case SCENCE_PAGE_SpRecommandUser:
    case SCENCE_PAGE_SpNear:
    case SCENCE_PAGE_SpUserProfile:
    case SCENCE_PAGE_SpWalkdog:
    case SCENCE_PAGE_SpFeeds:
    case SCENCE_PAGE_SpFeedsDetail:
    case SCENCE_PAGE_SpFeedsAdd:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - StatUserAction

@implementation StatUserAction

@dynamic sourceScene;
@dynamic scene;
@dynamic slot;
@dynamic action;
@dynamic userId;
@dynamic sceneKey;
@dynamic extraData;
@dynamic time;
@dynamic pushId;
@dynamic result;

typedef struct StatUserAction__storage_ {
  uint32_t _has_storage_[1];
  uint32_t sourceScene;
  uint32_t scene;
  uint32_t action;
  uint32_t result;
  NSString *slot;
  NSString *sceneKey;
  NSString *extraData;
  uint64_t userId;
  uint64_t time;
  uint64_t pushId;
} StatUserAction__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sourceScene",
        .dataTypeSpecific.className = NULL,
        .number = StatUserAction_FieldNumber_SourceScene,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(StatUserAction__storage_, sourceScene),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "scene",
        .dataTypeSpecific.className = NULL,
        .number = StatUserAction_FieldNumber_Scene,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(StatUserAction__storage_, scene),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "slot",
        .dataTypeSpecific.className = NULL,
        .number = StatUserAction_FieldNumber_Slot,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(StatUserAction__storage_, slot),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "action",
        .dataTypeSpecific.className = NULL,
        .number = StatUserAction_FieldNumber_Action,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(StatUserAction__storage_, action),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = StatUserAction_FieldNumber_UserId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(StatUserAction__storage_, userId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "sceneKey",
        .dataTypeSpecific.className = NULL,
        .number = StatUserAction_FieldNumber_SceneKey,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(StatUserAction__storage_, sceneKey),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "extraData",
        .dataTypeSpecific.className = NULL,
        .number = StatUserAction_FieldNumber_ExtraData,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(StatUserAction__storage_, extraData),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "time",
        .dataTypeSpecific.className = NULL,
        .number = StatUserAction_FieldNumber_Time,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(StatUserAction__storage_, time),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "pushId",
        .dataTypeSpecific.className = NULL,
        .number = StatUserAction_FieldNumber_PushId,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(StatUserAction__storage_, pushId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "result",
        .dataTypeSpecific.className = NULL,
        .number = StatUserAction_FieldNumber_Result,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(StatUserAction__storage_, result),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[StatUserAction class]
                                     rootClass:[StatRoot class]
                                          file:StatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(StatUserAction__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001\013\000\005\006\000\006\010\000\007\t\000\t\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - StatInterFace

@implementation StatInterFace

@dynamic userId;
@dynamic method;
@dynamic methodKey;
@dynamic result;
@dynamic costTime;
@dynamic extraData;

typedef struct StatInterFace__storage_ {
  uint32_t _has_storage_[1];
  uint32_t result;
  uint32_t costTime;
  NSString *method;
  NSString *methodKey;
  NSString *extraData;
  uint64_t userId;
} StatInterFace__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = StatInterFace_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(StatInterFace__storage_, userId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "method",
        .dataTypeSpecific.className = NULL,
        .number = StatInterFace_FieldNumber_Method,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(StatInterFace__storage_, method),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "methodKey",
        .dataTypeSpecific.className = NULL,
        .number = StatInterFace_FieldNumber_MethodKey,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(StatInterFace__storage_, methodKey),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "result",
        .dataTypeSpecific.className = NULL,
        .number = StatInterFace_FieldNumber_Result,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(StatInterFace__storage_, result),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "costTime",
        .dataTypeSpecific.className = NULL,
        .number = StatInterFace_FieldNumber_CostTime,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(StatInterFace__storage_, costTime),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "extraData",
        .dataTypeSpecific.className = NULL,
        .number = StatInterFace_FieldNumber_ExtraData,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(StatInterFace__storage_, extraData),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[StatInterFace class]
                                     rootClass:[StatRoot class]
                                          file:StatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(StatInterFace__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001\006\000\003\t\000\005\010\000\006\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
