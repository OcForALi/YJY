// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Comm.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Comm.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - CommRoot

@implementation CommRoot

@end

#pragma mark - CommRoot_FileDescriptor

static GPBFileDescriptor *CommRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum NET_TYPE

GPBEnumDescriptor *NET_TYPE_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "UnDetect\000Wifi\000Cmwap\000Cmnet\000Uniwap\000Uninet\000"
        "Wap3G\000Net3G\000Ctwap\000Ctnet\000Unknown\000UnknowWa"
        "p\000NoNetwork\000NetworkTypeLte\000";
    static const int32_t values[] = {
        NET_TYPE_UnDetect,
        NET_TYPE_Wifi,
        NET_TYPE_Cmwap,
        NET_TYPE_Cmnet,
        NET_TYPE_Uniwap,
        NET_TYPE_Uninet,
        NET_TYPE_Wap3G,
        NET_TYPE_Net3G,
        NET_TYPE_Ctwap,
        NET_TYPE_Ctnet,
        NET_TYPE_Unknown,
        NET_TYPE_UnknowWap,
        NET_TYPE_NoNetwork,
        NET_TYPE_NetworkTypeLte,
    };
    static const char *extraTextFormatInfo = "\002\006c\002\000\007c\002\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(NET_TYPE)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:NET_TYPE_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL NET_TYPE_IsValidValue(int32_t value__) {
  switch (value__) {
    case NET_TYPE_UnDetect:
    case NET_TYPE_Wifi:
    case NET_TYPE_Cmwap:
    case NET_TYPE_Cmnet:
    case NET_TYPE_Uniwap:
    case NET_TYPE_Uninet:
    case NET_TYPE_Wap3G:
    case NET_TYPE_Net3G:
    case NET_TYPE_Ctwap:
    case NET_TYPE_Ctnet:
    case NET_TYPE_Unknown:
    case NET_TYPE_UnknowWap:
    case NET_TYPE_NoNetwork:
    case NET_TYPE_NetworkTypeLte:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Terminal

@implementation Terminal

@dynamic imei;
@dynamic imei2;
@dynamic mac;
@dynamic imsi;
@dynamic imsi2;
@dynamic androidid;
@dynamic adid;
@dynamic channelid;

typedef struct Terminal__storage_ {
  uint32_t _has_storage_[1];
  NSString *imei;
  NSString *imei2;
  NSString *mac;
  NSString *imsi;
  NSString *imsi2;
  NSString *androidid;
  NSString *adid;
  NSString *channelid;
} Terminal__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "imei",
        .dataTypeSpecific.className = NULL,
        .number = Terminal_FieldNumber_Imei,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Terminal__storage_, imei),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "imei2",
        .dataTypeSpecific.className = NULL,
        .number = Terminal_FieldNumber_Imei2,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Terminal__storage_, imei2),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "mac",
        .dataTypeSpecific.className = NULL,
        .number = Terminal_FieldNumber_Mac,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Terminal__storage_, mac),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "imsi",
        .dataTypeSpecific.className = NULL,
        .number = Terminal_FieldNumber_Imsi,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Terminal__storage_, imsi),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "imsi2",
        .dataTypeSpecific.className = NULL,
        .number = Terminal_FieldNumber_Imsi2,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Terminal__storage_, imsi2),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "androidid",
        .dataTypeSpecific.className = NULL,
        .number = Terminal_FieldNumber_Androidid,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(Terminal__storage_, androidid),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "adid",
        .dataTypeSpecific.className = NULL,
        .number = Terminal_FieldNumber_Adid,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(Terminal__storage_, adid),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "channelid",
        .dataTypeSpecific.className = NULL,
        .number = Terminal_FieldNumber_Channelid,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(Terminal__storage_, channelid),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Terminal class]
                                     rootClass:[CommRoot class]
                                          file:CommRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Terminal__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\010\001d\000\002d\001\000\003c\000\004d\000\005d\001\000\006i\000\007d\000\010i\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - YUA

@implementation YUA

@dynamic softName;
@dynamic version;
@dynamic buildNo;
@dynamic versionName;
@dynamic platform;
@dynamic osversion;
@dynamic width;
@dynamic height;
@dynamic size;
@dynamic deviceName;
@dynamic channel;

typedef struct YUA__storage_ {
  uint32_t _has_storage_[1];
  uint32_t width;
  uint32_t height;
  NSString *softName;
  NSString *version;
  NSString *buildNo;
  NSString *versionName;
  NSString *platform;
  NSString *osversion;
  NSString *deviceName;
  NSString *channel;
  double size;
} YUA__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "softName",
        .dataTypeSpecific.className = NULL,
        .number = YUA_FieldNumber_SoftName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(YUA__storage_, softName),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "version",
        .dataTypeSpecific.className = NULL,
        .number = YUA_FieldNumber_Version,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(YUA__storage_, version),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "buildNo",
        .dataTypeSpecific.className = NULL,
        .number = YUA_FieldNumber_BuildNo,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(YUA__storage_, buildNo),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "versionName",
        .dataTypeSpecific.className = NULL,
        .number = YUA_FieldNumber_VersionName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(YUA__storage_, versionName),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "platform",
        .dataTypeSpecific.className = NULL,
        .number = YUA_FieldNumber_Platform,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(YUA__storage_, platform),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "osversion",
        .dataTypeSpecific.className = NULL,
        .number = YUA_FieldNumber_Osversion,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(YUA__storage_, osversion),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "width",
        .dataTypeSpecific.className = NULL,
        .number = YUA_FieldNumber_Width,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(YUA__storage_, width),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "height",
        .dataTypeSpecific.className = NULL,
        .number = YUA_FieldNumber_Height,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(YUA__storage_, height),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "size",
        .dataTypeSpecific.className = NULL,
        .number = YUA_FieldNumber_Size,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(YUA__storage_, size),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "deviceName",
        .dataTypeSpecific.className = NULL,
        .number = YUA_FieldNumber_DeviceName,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(YUA__storage_, deviceName),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "channel",
        .dataTypeSpecific.className = NULL,
        .number = YUA_FieldNumber_Channel,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(YUA__storage_, channel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[YUA class]
                                     rootClass:[CommRoot class]
                                          file:CommRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(YUA__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001\010\000\003\007\000\004\013\000\006b\007\000\nJ\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PkgInfo

@implementation PkgInfo

@dynamic pkgName;
@dynamic signInfo;

typedef struct PkgInfo__storage_ {
  uint32_t _has_storage_[1];
  NSString *pkgName;
  NSString *signInfo;
} PkgInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "pkgName",
        .dataTypeSpecific.className = NULL,
        .number = PkgInfo_FieldNumber_PkgName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PkgInfo__storage_, pkgName),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "signInfo",
        .dataTypeSpecific.className = NULL,
        .number = PkgInfo_FieldNumber_SignInfo,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PkgInfo__storage_, signInfo),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PkgInfo class]
                                     rootClass:[CommRoot class]
                                          file:CommRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PkgInfo__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\007\000\002\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
