// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Err.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Err.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ErrRoot

@implementation ErrRoot

@end

#pragma mark - Enum APP_ERROR_CODE

GPBEnumDescriptor *APP_ERROR_CODE_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "AecSuccess\000AecFault\000AecUnlogin\000AecDecryp"
        "tionFault\000AecPackageFault\000AecCommandNotE"
        "xist\000AecDecodeFault\000AecCommandTimeOut\000Ae"
        "cSystemFault\000AecParamErr\000AecImGetTokenEr"
        "r\000AecPhoneBlank\000AecSmsSendErr\000AecSmsSend"
        "Frequent\000AecUserNotExist\000AecLoginVerifyF"
        "ail\000AecPhoneErr\000AecProfileNotComplete\000Ae"
        "cCodeErr\000AecCodeExpire\000AecThirdUserAddFa"
        "il\000AecUserAddFail\000AecThirdVerifyFail\000Aec"
        "UserFrozen\000AecQrcExpire\000AecConfirm\000AecPd"
        "fNothing\000";
    static const int32_t values[] = {
        APP_ERROR_CODE_AecSuccess,
        APP_ERROR_CODE_AecFault,
        APP_ERROR_CODE_AecUnlogin,
        APP_ERROR_CODE_AecDecryptionFault,
        APP_ERROR_CODE_AecPackageFault,
        APP_ERROR_CODE_AecCommandNotExist,
        APP_ERROR_CODE_AecDecodeFault,
        APP_ERROR_CODE_AecCommandTimeOut,
        APP_ERROR_CODE_AecSystemFault,
        APP_ERROR_CODE_AecParamErr,
        APP_ERROR_CODE_AecImGetTokenErr,
        APP_ERROR_CODE_AecPhoneBlank,
        APP_ERROR_CODE_AecSmsSendErr,
        APP_ERROR_CODE_AecSmsSendFrequent,
        APP_ERROR_CODE_AecUserNotExist,
        APP_ERROR_CODE_AecLoginVerifyFail,
        APP_ERROR_CODE_AecPhoneErr,
        APP_ERROR_CODE_AecProfileNotComplete,
        APP_ERROR_CODE_AecCodeErr,
        APP_ERROR_CODE_AecCodeExpire,
        APP_ERROR_CODE_AecThirdUserAddFail,
        APP_ERROR_CODE_AecUserAddFail,
        APP_ERROR_CODE_AecThirdVerifyFail,
        APP_ERROR_CODE_AecUserFrozen,
        APP_ERROR_CODE_AecQrcExpire,
        APP_ERROR_CODE_AecConfirm,
        APP_ERROR_CODE_AecPdfNothing,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(APP_ERROR_CODE)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:APP_ERROR_CODE_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL APP_ERROR_CODE_IsValidValue(int32_t value__) {
  switch (value__) {
    case APP_ERROR_CODE_AecSuccess:
    case APP_ERROR_CODE_AecFault:
    case APP_ERROR_CODE_AecUnlogin:
    case APP_ERROR_CODE_AecDecryptionFault:
    case APP_ERROR_CODE_AecPackageFault:
    case APP_ERROR_CODE_AecCommandNotExist:
    case APP_ERROR_CODE_AecDecodeFault:
    case APP_ERROR_CODE_AecCommandTimeOut:
    case APP_ERROR_CODE_AecSystemFault:
    case APP_ERROR_CODE_AecParamErr:
    case APP_ERROR_CODE_AecImGetTokenErr:
    case APP_ERROR_CODE_AecPhoneBlank:
    case APP_ERROR_CODE_AecSmsSendErr:
    case APP_ERROR_CODE_AecSmsSendFrequent:
    case APP_ERROR_CODE_AecUserNotExist:
    case APP_ERROR_CODE_AecLoginVerifyFail:
    case APP_ERROR_CODE_AecPhoneErr:
    case APP_ERROR_CODE_AecProfileNotComplete:
    case APP_ERROR_CODE_AecCodeErr:
    case APP_ERROR_CODE_AecCodeExpire:
    case APP_ERROR_CODE_AecThirdUserAddFail:
    case APP_ERROR_CODE_AecUserAddFail:
    case APP_ERROR_CODE_AecThirdVerifyFail:
    case APP_ERROR_CODE_AecUserFrozen:
    case APP_ERROR_CODE_AecQrcExpire:
    case APP_ERROR_CODE_AecConfirm:
    case APP_ERROR_CODE_AecPdfNothing:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
