// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Area.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Area.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - AreaRoot

@implementation AreaRoot

@end

#pragma mark - AreaRoot_FileDescriptor

static GPBFileDescriptor *AreaRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - AreaInfo

@implementation AreaInfo

@dynamic provinceListArray, provinceListArray_Count;

typedef struct AreaInfo__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *provinceListArray;
} AreaInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "provinceListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ProvinceInfo),
        .number = AreaInfo_FieldNumber_ProvinceListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(AreaInfo__storage_, provinceListArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AreaInfo class]
                                     rootClass:[AreaRoot class]
                                          file:AreaRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AreaInfo__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\000provinceList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ProvinceInfo

@implementation ProvinceInfo

@dynamic provinceId;
@dynamic provinceName;
@dynamic cityListArray, cityListArray_Count;

typedef struct ProvinceInfo__storage_ {
  uint32_t _has_storage_[1];
  uint32_t provinceId;
  NSString *provinceName;
  NSMutableArray *cityListArray;
} ProvinceInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "provinceId",
        .dataTypeSpecific.className = NULL,
        .number = ProvinceInfo_FieldNumber_ProvinceId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ProvinceInfo__storage_, provinceId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "provinceName",
        .dataTypeSpecific.className = NULL,
        .number = ProvinceInfo_FieldNumber_ProvinceName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ProvinceInfo__storage_, provinceName),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cityListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(CityInfo),
        .number = ProvinceInfo_FieldNumber_CityListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ProvinceInfo__storage_, cityListArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ProvinceInfo class]
                                     rootClass:[AreaRoot class]
                                          file:AreaRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ProvinceInfo__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\n\000\002\014\000\003\000cityList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CityInfo

@implementation CityInfo

@dynamic cityId;
@dynamic cityName;
@dynamic countyListArray, countyListArray_Count;
@dynamic isHotCity;

typedef struct CityInfo__storage_ {
  uint32_t _has_storage_[1];
  uint32_t cityId;
  uint32_t isHotCity;
  NSString *cityName;
  NSMutableArray *countyListArray;
} CityInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "cityId",
        .dataTypeSpecific.className = NULL,
        .number = CityInfo_FieldNumber_CityId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CityInfo__storage_, cityId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "cityName",
        .dataTypeSpecific.className = NULL,
        .number = CityInfo_FieldNumber_CityName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CityInfo__storage_, cityName),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "countyListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(CountyInfo),
        .number = CityInfo_FieldNumber_CountyListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(CityInfo__storage_, countyListArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "isHotCity",
        .dataTypeSpecific.className = NULL,
        .number = CityInfo_FieldNumber_IsHotCity,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CityInfo__storage_, isHotCity),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CityInfo class]
                                     rootClass:[AreaRoot class]
                                          file:AreaRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CityInfo__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001\006\000\002\010\000\003\000countyList\000\004\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CountyInfo

@implementation CountyInfo

@dynamic countyId;
@dynamic countyName;
@dynamic townListArray, townListArray_Count;

typedef struct CountyInfo__storage_ {
  uint32_t _has_storage_[1];
  uint32_t countyId;
  NSString *countyName;
  NSMutableArray *townListArray;
} CountyInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "countyId",
        .dataTypeSpecific.className = NULL,
        .number = CountyInfo_FieldNumber_CountyId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CountyInfo__storage_, countyId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "countyName",
        .dataTypeSpecific.className = NULL,
        .number = CountyInfo_FieldNumber_CountyName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CountyInfo__storage_, countyName),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "townListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(TownInfo),
        .number = CountyInfo_FieldNumber_TownListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(CountyInfo__storage_, townListArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CountyInfo class]
                                     rootClass:[AreaRoot class]
                                          file:AreaRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CountyInfo__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\010\000\002\n\000\003\000townList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TownInfo

@implementation TownInfo

@dynamic townId;
@dynamic townName;

typedef struct TownInfo__storage_ {
  uint32_t _has_storage_[1];
  uint32_t townId;
  NSString *townName;
} TownInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "townId",
        .dataTypeSpecific.className = NULL,
        .number = TownInfo_FieldNumber_TownId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TownInfo__storage_, townId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "townName",
        .dataTypeSpecific.className = NULL,
        .number = TownInfo_FieldNumber_TownName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TownInfo__storage_, townName),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TownInfo class]
                                     rootClass:[AreaRoot class]
                                          file:AreaRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TownInfo__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\006\000\002\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ProvinceDetailInfo

@implementation ProvinceDetailInfo

@dynamic provinceId;
@dynamic provinceName;

typedef struct ProvinceDetailInfo__storage_ {
  uint32_t _has_storage_[1];
  uint32_t provinceId;
  NSString *provinceName;
} ProvinceDetailInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "provinceId",
        .dataTypeSpecific.className = NULL,
        .number = ProvinceDetailInfo_FieldNumber_ProvinceId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ProvinceDetailInfo__storage_, provinceId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "provinceName",
        .dataTypeSpecific.className = NULL,
        .number = ProvinceDetailInfo_FieldNumber_ProvinceName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ProvinceDetailInfo__storage_, provinceName),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ProvinceDetailInfo class]
                                     rootClass:[AreaRoot class]
                                          file:AreaRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ProvinceDetailInfo__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\n\000\002\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CityDetailInfo

@implementation CityDetailInfo

@dynamic provinceId;
@dynamic provinceName;
@dynamic cityId;
@dynamic cityName;

typedef struct CityDetailInfo__storage_ {
  uint32_t _has_storage_[1];
  uint32_t provinceId;
  uint32_t cityId;
  NSString *provinceName;
  NSString *cityName;
} CityDetailInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "provinceId",
        .dataTypeSpecific.className = NULL,
        .number = CityDetailInfo_FieldNumber_ProvinceId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CityDetailInfo__storage_, provinceId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "provinceName",
        .dataTypeSpecific.className = NULL,
        .number = CityDetailInfo_FieldNumber_ProvinceName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CityDetailInfo__storage_, provinceName),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cityId",
        .dataTypeSpecific.className = NULL,
        .number = CityDetailInfo_FieldNumber_CityId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CityDetailInfo__storage_, cityId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "cityName",
        .dataTypeSpecific.className = NULL,
        .number = CityDetailInfo_FieldNumber_CityName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(CityDetailInfo__storage_, cityName),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CityDetailInfo class]
                                     rootClass:[AreaRoot class]
                                          file:AreaRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CityDetailInfo__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001\n\000\002\014\000\003\006\000\004\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CountyDetailInfo

@implementation CountyDetailInfo

@dynamic provinceId;
@dynamic provinceName;
@dynamic cityId;
@dynamic cityName;
@dynamic countyId;
@dynamic countyName;
@dynamic cityCode;

typedef struct CountyDetailInfo__storage_ {
  uint32_t _has_storage_[1];
  uint32_t provinceId;
  uint32_t cityId;
  uint32_t countyId;
  uint32_t cityCode;
  NSString *provinceName;
  NSString *cityName;
  NSString *countyName;
} CountyDetailInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "provinceId",
        .dataTypeSpecific.className = NULL,
        .number = CountyDetailInfo_FieldNumber_ProvinceId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CountyDetailInfo__storage_, provinceId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "provinceName",
        .dataTypeSpecific.className = NULL,
        .number = CountyDetailInfo_FieldNumber_ProvinceName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CountyDetailInfo__storage_, provinceName),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cityId",
        .dataTypeSpecific.className = NULL,
        .number = CountyDetailInfo_FieldNumber_CityId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CountyDetailInfo__storage_, cityId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "cityName",
        .dataTypeSpecific.className = NULL,
        .number = CountyDetailInfo_FieldNumber_CityName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(CountyDetailInfo__storage_, cityName),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "countyId",
        .dataTypeSpecific.className = NULL,
        .number = CountyDetailInfo_FieldNumber_CountyId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(CountyDetailInfo__storage_, countyId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "countyName",
        .dataTypeSpecific.className = NULL,
        .number = CountyDetailInfo_FieldNumber_CountyName,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(CountyDetailInfo__storage_, countyName),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cityCode",
        .dataTypeSpecific.className = NULL,
        .number = CountyDetailInfo_FieldNumber_CityCode,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(CountyDetailInfo__storage_, cityCode),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CountyDetailInfo class]
                                     rootClass:[AreaRoot class]
                                          file:AreaRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CountyDetailInfo__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\007\001\n\000\002\014\000\003\006\000\004\010\000\005\010\000\006\n\000\007\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TownDetailInfo

@implementation TownDetailInfo

@dynamic provinceId;
@dynamic provinceName;
@dynamic cityId;
@dynamic cityName;
@dynamic countyId;
@dynamic countyName;
@dynamic townId;
@dynamic townName;

typedef struct TownDetailInfo__storage_ {
  uint32_t _has_storage_[1];
  uint32_t provinceId;
  uint32_t cityId;
  uint32_t countyId;
  uint32_t townId;
  NSString *provinceName;
  NSString *cityName;
  NSString *countyName;
  NSString *townName;
} TownDetailInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "provinceId",
        .dataTypeSpecific.className = NULL,
        .number = TownDetailInfo_FieldNumber_ProvinceId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TownDetailInfo__storage_, provinceId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "provinceName",
        .dataTypeSpecific.className = NULL,
        .number = TownDetailInfo_FieldNumber_ProvinceName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TownDetailInfo__storage_, provinceName),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cityId",
        .dataTypeSpecific.className = NULL,
        .number = TownDetailInfo_FieldNumber_CityId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(TownDetailInfo__storage_, cityId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "cityName",
        .dataTypeSpecific.className = NULL,
        .number = TownDetailInfo_FieldNumber_CityName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(TownDetailInfo__storage_, cityName),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "countyId",
        .dataTypeSpecific.className = NULL,
        .number = TownDetailInfo_FieldNumber_CountyId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(TownDetailInfo__storage_, countyId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "countyName",
        .dataTypeSpecific.className = NULL,
        .number = TownDetailInfo_FieldNumber_CountyName,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(TownDetailInfo__storage_, countyName),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "townId",
        .dataTypeSpecific.className = NULL,
        .number = TownDetailInfo_FieldNumber_TownId,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(TownDetailInfo__storage_, townId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "townName",
        .dataTypeSpecific.className = NULL,
        .number = TownDetailInfo_FieldNumber_TownName,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(TownDetailInfo__storage_, townName),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TownDetailInfo class]
                                     rootClass:[AreaRoot class]
                                          file:AreaRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TownDetailInfo__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\010\001\n\000\002\014\000\003\006\000\004\010\000\005\010\000\006\n\000\007\006\000\010\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
