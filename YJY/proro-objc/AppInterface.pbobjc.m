// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AppInterface.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "AppInterface.pbobjc.h"
 #import "Model.pbobjc.h"
 #import "SaasModel.pbobjc.h"
 #import "OrderModel.pbobjc.h"
 #import "Insure.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - AppInterfaceRoot

@implementation AppInterfaceRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPBDebugCheckRuntimeVersion();
    registry = [[GPBExtensionRegistry alloc] init];
    [registry addExtensions:[ModelRoot extensionRegistry]];
    [registry addExtensions:[SaasModelRoot extensionRegistry]];
    [registry addExtensions:[OrderModelRoot extensionRegistry]];
    [registry addExtensions:[InsureRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - AppInterfaceRoot_FileDescriptor

static GPBFileDescriptor *AppInterfaceRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum Source

GPBEnumDescriptor *Source_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "User\000Company\000Assess\000";
    static const int32_t values[] = {
        Source_User,
        Source_Company,
        Source_Assess,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Source)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:Source_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL Source_IsValidValue(int32_t value__) {
  switch (value__) {
    case Source_User:
    case Source_Company:
    case Source_Assess:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - GetVerifyCodeReq

@implementation GetVerifyCodeReq

@dynamic phone;
@dynamic purpose;
@dynamic source;

typedef struct GetVerifyCodeReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t source;
  NSString *phone;
  NSString *purpose;
} GetVerifyCodeReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "phone",
        .dataTypeSpecific.className = NULL,
        .number = GetVerifyCodeReq_FieldNumber_Phone,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetVerifyCodeReq__storage_, phone),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "purpose",
        .dataTypeSpecific.className = NULL,
        .number = GetVerifyCodeReq_FieldNumber_Purpose,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetVerifyCodeReq__storage_, purpose),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "source",
        .dataTypeSpecific.className = NULL,
        .number = GetVerifyCodeReq_FieldNumber_Source,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetVerifyCodeReq__storage_, source),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetVerifyCodeReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetVerifyCodeReq__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - LoginReq

@implementation LoginReq

@dynamic phone;
@dynamic code;
@dynamic source;
@dynamic jpushId;

typedef struct LoginReq__storage_ {
  uint32_t _has_storage_[1];
  Source source;
  NSString *phone;
  NSString *code;
  NSString *jpushId;
} LoginReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "phone",
        .dataTypeSpecific.className = NULL,
        .number = LoginReq_FieldNumber_Phone,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LoginReq__storage_, phone),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "code",
        .dataTypeSpecific.className = NULL,
        .number = LoginReq_FieldNumber_Code,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(LoginReq__storage_, code),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "source",
        .dataTypeSpecific.enumDescFunc = Source_EnumDescriptor,
        .number = LoginReq_FieldNumber_Source,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(LoginReq__storage_, source),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "jpushId",
        .dataTypeSpecific.className = NULL,
        .number = LoginReq_FieldNumber_JpushId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(LoginReq__storage_, jpushId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LoginReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LoginReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\004\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t LoginReq_Source_RawValue(LoginReq *message) {
  GPBDescriptor *descriptor = [LoginReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:LoginReq_FieldNumber_Source];
  return GPBGetMessageInt32Field(message, field);
}

void SetLoginReq_Source_RawValue(LoginReq *message, int32_t value) {
  GPBDescriptor *descriptor = [LoginReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:LoginReq_FieldNumber_Source];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - LoginRsp

@implementation LoginRsp

@dynamic isComplete;
@dynamic roleId;
@dynamic hgType;

typedef struct LoginRsp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t hgType;
  uint64_t roleId;
} LoginRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "isComplete",
        .dataTypeSpecific.className = NULL,
        .number = LoginRsp_FieldNumber_IsComplete,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "roleId",
        .dataTypeSpecific.className = NULL,
        .number = LoginRsp_FieldNumber_RoleId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(LoginRsp__storage_, roleId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "hgType",
        .dataTypeSpecific.className = NULL,
        .number = LoginRsp_FieldNumber_HgType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(LoginRsp__storage_, hgType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LoginRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LoginRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\n\000\002\006\000\003\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UserExistReq

@implementation UserExistReq

@dynamic phone;

typedef struct UserExistReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *phone;
} UserExistReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "phone",
        .dataTypeSpecific.className = NULL,
        .number = UserExistReq_FieldNumber_Phone,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UserExistReq__storage_, phone),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UserExistReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UserExistReq__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UserExistRsp

@implementation UserExistRsp

@dynamic userId;

typedef struct UserExistRsp__storage_ {
  uint32_t _has_storage_[1];
  uint64_t userId;
} UserExistRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = UserExistRsp_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UserExistRsp__storage_, userId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UserExistRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UserExistRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AppVersionCheckReq

@implementation AppVersionCheckReq

@dynamic version;
@dynamic appType;
@dynamic platform;

typedef struct AppVersionCheckReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t version;
  uint32_t appType;
  uint32_t platform;
} AppVersionCheckReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "version",
        .dataTypeSpecific.className = NULL,
        .number = AppVersionCheckReq_FieldNumber_Version,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AppVersionCheckReq__storage_, version),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "appType",
        .dataTypeSpecific.className = NULL,
        .number = AppVersionCheckReq_FieldNumber_AppType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AppVersionCheckReq__storage_, appType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "platform",
        .dataTypeSpecific.className = NULL,
        .number = AppVersionCheckReq_FieldNumber_Platform,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(AppVersionCheckReq__storage_, platform),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AppVersionCheckReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AppVersionCheckReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AppVersionCheckRsp

@implementation AppVersionCheckRsp

@dynamic version;
@dynamic name;
@dynamic remindLevel;
@dynamic sourceLink;
@dynamic publishTime;
@dynamic isNewVersion;

typedef struct AppVersionCheckRsp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t version;
  uint32_t remindLevel;
  uint32_t isNewVersion;
  NSString *name;
  NSString *sourceLink;
  uint64_t publishTime;
} AppVersionCheckRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "version",
        .dataTypeSpecific.className = NULL,
        .number = AppVersionCheckRsp_FieldNumber_Version,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AppVersionCheckRsp__storage_, version),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = AppVersionCheckRsp_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AppVersionCheckRsp__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "remindLevel",
        .dataTypeSpecific.className = NULL,
        .number = AppVersionCheckRsp_FieldNumber_RemindLevel,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(AppVersionCheckRsp__storage_, remindLevel),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "sourceLink",
        .dataTypeSpecific.className = NULL,
        .number = AppVersionCheckRsp_FieldNumber_SourceLink,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(AppVersionCheckRsp__storage_, sourceLink),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "publishTime",
        .dataTypeSpecific.className = NULL,
        .number = AppVersionCheckRsp_FieldNumber_PublishTime,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(AppVersionCheckRsp__storage_, publishTime),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "isNewVersion",
        .dataTypeSpecific.className = NULL,
        .number = AppVersionCheckRsp_FieldNumber_IsNewVersion,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(AppVersionCheckRsp__storage_, isNewVersion),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AppVersionCheckRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AppVersionCheckRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\003\013\000\004\n\000\005\013\000\006\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RongTokenRsp

@implementation RongTokenRsp

@dynamic rongToken;

typedef struct RongTokenRsp__storage_ {
  uint32_t _has_storage_[1];
  NSString *rongToken;
} RongTokenRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "rongToken",
        .dataTypeSpecific.className = NULL,
        .number = RongTokenRsp_FieldNumber_RongToken,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RongTokenRsp__storage_, rongToken),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RongTokenRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RongTokenRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetSplashScreenRsp

@implementation GetSplashScreenRsp

@dynamic hasSplashScreenModel, splashScreenModel;

typedef struct GetSplashScreenRsp__storage_ {
  uint32_t _has_storage_[1];
  SplashScreenModel *splashScreenModel;
} GetSplashScreenRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "splashScreenModel",
        .dataTypeSpecific.className = GPBStringifySymbol(SplashScreenModel),
        .number = GetSplashScreenRsp_FieldNumber_SplashScreenModel,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetSplashScreenRsp__storage_, splashScreenModel),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetSplashScreenRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetSplashScreenRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\021\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetUserInfoRsp

@implementation GetUserInfoRsp

@dynamic hasUserVo, userVo;

typedef struct GetUserInfoRsp__storage_ {
  uint32_t _has_storage_[1];
  UserVO *userVo;
} GetUserInfoRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userVo",
        .dataTypeSpecific.className = GPBStringifySymbol(UserVO),
        .number = GetUserInfoRsp_FieldNumber_UserVo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetUserInfoRsp__storage_, userVo),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetUserInfoRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetUserInfoRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\005A\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UserAddressReq

@implementation UserAddressReq

@dynamic addrId;
@dynamic addrDetail;
@dynamic adCode;
@dynamic street;
@dynamic building;
@dynamic gpsType;
@dynamic lng;
@dynamic lat;
@dynamic defaultUse;
@dynamic phone;
@dynamic contacts;
@dynamic userId;

typedef struct UserAddressReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t gpsType;
  uint32_t defaultUse;
  NSString *addrDetail;
  NSString *adCode;
  NSString *street;
  NSString *building;
  NSString *phone;
  NSString *contacts;
  uint64_t addrId;
  double lng;
  double lat;
  uint64_t userId;
} UserAddressReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "addrId",
        .dataTypeSpecific.className = NULL,
        .number = UserAddressReq_FieldNumber_AddrId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UserAddressReq__storage_, addrId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "addrDetail",
        .dataTypeSpecific.className = NULL,
        .number = UserAddressReq_FieldNumber_AddrDetail,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UserAddressReq__storage_, addrDetail),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "adCode",
        .dataTypeSpecific.className = NULL,
        .number = UserAddressReq_FieldNumber_AdCode,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(UserAddressReq__storage_, adCode),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "street",
        .dataTypeSpecific.className = NULL,
        .number = UserAddressReq_FieldNumber_Street,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(UserAddressReq__storage_, street),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "building",
        .dataTypeSpecific.className = NULL,
        .number = UserAddressReq_FieldNumber_Building,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(UserAddressReq__storage_, building),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "gpsType",
        .dataTypeSpecific.className = NULL,
        .number = UserAddressReq_FieldNumber_GpsType,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(UserAddressReq__storage_, gpsType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "lng",
        .dataTypeSpecific.className = NULL,
        .number = UserAddressReq_FieldNumber_Lng,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(UserAddressReq__storage_, lng),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "lat",
        .dataTypeSpecific.className = NULL,
        .number = UserAddressReq_FieldNumber_Lat,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(UserAddressReq__storage_, lat),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "defaultUse",
        .dataTypeSpecific.className = NULL,
        .number = UserAddressReq_FieldNumber_DefaultUse,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(UserAddressReq__storage_, defaultUse),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "phone",
        .dataTypeSpecific.className = NULL,
        .number = UserAddressReq_FieldNumber_Phone,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(UserAddressReq__storage_, phone),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "contacts",
        .dataTypeSpecific.className = NULL,
        .number = UserAddressReq_FieldNumber_Contacts,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(UserAddressReq__storage_, contacts),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = UserAddressReq_FieldNumber_UserId,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(UserAddressReq__storage_, userId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UserAddressReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UserAddressReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\006\001\006\000\002\n\000\003\006\000\006\007\000\t\n\000\014\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SetDefaultUserAddressReq

@implementation SetDefaultUserAddressReq

@dynamic addrId;

typedef struct SetDefaultUserAddressReq__storage_ {
  uint32_t _has_storage_[1];
  uint64_t addrId;
} SetDefaultUserAddressReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "addrId",
        .dataTypeSpecific.className = NULL,
        .number = SetDefaultUserAddressReq_FieldNumber_AddrId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SetDefaultUserAddressReq__storage_, addrId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SetDefaultUserAddressReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SetDefaultUserAddressReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ListUserAddressRsp

@implementation ListUserAddressRsp

@dynamic userAddressVoArray, userAddressVoArray_Count;

typedef struct ListUserAddressRsp__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *userAddressVoArray;
} ListUserAddressRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userAddressVoArray",
        .dataTypeSpecific.className = GPBStringifySymbol(UserAddressVO),
        .number = ListUserAddressRsp_FieldNumber_UserAddressVoArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ListUserAddressRsp__storage_, userAddressVoArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ListUserAddressRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ListUserAddressRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\000userAddressVO\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DelUserAddressReq

@implementation DelUserAddressReq

@dynamic addrId;
@dynamic userId;

typedef struct DelUserAddressReq__storage_ {
  uint32_t _has_storage_[1];
  uint64_t addrId;
  uint64_t userId;
} DelUserAddressReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "addrId",
        .dataTypeSpecific.className = NULL,
        .number = DelUserAddressReq_FieldNumber_AddrId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DelUserAddressReq__storage_, addrId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = DelUserAddressReq_FieldNumber_UserId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DelUserAddressReq__storage_, userId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DelUserAddressReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DelUserAddressReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\006\000\002\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UpdateUserInfoReq

@implementation UpdateUserInfoReq

@dynamic name;
@dynamic headImg;
@dynamic sex;
@dynamic birthday;
@dynamic idcard;
@dynamic realName;

typedef struct UpdateUserInfoReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t sex;
  NSString *name;
  NSString *headImg;
  NSString *birthday;
  NSString *idcard;
  NSString *realName;
} UpdateUserInfoReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = UpdateUserInfoReq_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpdateUserInfoReq__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "headImg",
        .dataTypeSpecific.className = NULL,
        .number = UpdateUserInfoReq_FieldNumber_HeadImg,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UpdateUserInfoReq__storage_, headImg),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sex",
        .dataTypeSpecific.className = NULL,
        .number = UpdateUserInfoReq_FieldNumber_Sex,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(UpdateUserInfoReq__storage_, sex),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "birthday",
        .dataTypeSpecific.className = NULL,
        .number = UpdateUserInfoReq_FieldNumber_Birthday,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(UpdateUserInfoReq__storage_, birthday),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "idcard",
        .dataTypeSpecific.className = NULL,
        .number = UpdateUserInfoReq_FieldNumber_Idcard,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(UpdateUserInfoReq__storage_, idcard),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "realName",
        .dataTypeSpecific.className = NULL,
        .number = UpdateUserInfoReq_FieldNumber_RealName,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(UpdateUserInfoReq__storage_, realName),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateUserInfoReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateUserInfoReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\002\007\000\006\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetSystemMsgReq

@implementation GetSystemMsgReq

@dynamic pageNo;
@dynamic pageSize;

typedef struct GetSystemMsgReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t pageNo;
  uint32_t pageSize;
} GetSystemMsgReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "pageNo",
        .dataTypeSpecific.className = NULL,
        .number = GetSystemMsgReq_FieldNumber_PageNo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetSystemMsgReq__storage_, pageNo),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = GetSystemMsgReq_FieldNumber_PageSize,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetSystemMsgReq__storage_, pageSize),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetSystemMsgReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetSystemMsgReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\006\000\002\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetSystemMsgRsp

@implementation GetSystemMsgRsp

@dynamic msgListArray, msgListArray_Count;
@dynamic count;

typedef struct GetSystemMsgRsp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t count;
  NSMutableArray *msgListArray;
} GetSystemMsgRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "msgListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(SystemMessage),
        .number = GetSystemMsgRsp_FieldNumber_MsgListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetSystemMsgRsp__storage_, msgListArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = GetSystemMsgRsp_FieldNumber_Count,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetSystemMsgRsp__storage_, count),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetSystemMsgRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetSystemMsgRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\000msgList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SystemMsgMarkAsReadReq

@implementation SystemMsgMarkAsReadReq

@dynamic id_p;

typedef struct SystemMsgMarkAsReadReq__storage_ {
  uint32_t _has_storage_[1];
  uint64_t id_p;
} SystemMsgMarkAsReadReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = SystemMsgMarkAsReadReq_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SystemMsgMarkAsReadReq__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SystemMsgMarkAsReadReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SystemMsgMarkAsReadReq__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DeleteSystemMessage

@implementation DeleteSystemMessage

@dynamic id_p;

typedef struct DeleteSystemMessage__storage_ {
  uint32_t _has_storage_[1];
  uint64_t id_p;
} DeleteSystemMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = DeleteSystemMessage_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DeleteSystemMessage__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DeleteSystemMessage class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DeleteSystemMessage__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetSettingReq

@implementation GetSettingReq

@dynamic adcode;
@dynamic cityId;
@dynamic lng;
@dynamic lat;

typedef struct GetSettingReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t adcode;
  uint32_t cityId;
  double lng;
  double lat;
} GetSettingReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "adcode",
        .dataTypeSpecific.className = NULL,
        .number = GetSettingReq_FieldNumber_Adcode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetSettingReq__storage_, adcode),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "cityId",
        .dataTypeSpecific.className = NULL,
        .number = GetSettingReq_FieldNumber_CityId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetSettingReq__storage_, cityId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "lng",
        .dataTypeSpecific.className = NULL,
        .number = GetSettingReq_FieldNumber_Lng,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetSettingReq__storage_, lng),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "lat",
        .dataTypeSpecific.className = NULL,
        .number = GetSettingReq_FieldNumber_Lat,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetSettingReq__storage_, lat),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetSettingReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetSettingReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetSettingRsp

@implementation GetSettingRsp

@dynamic itemsArray, itemsArray_Count;
@dynamic citysArray, citysArray_Count;
@dynamic bannerListArray, bannerListArray_Count;
@dynamic isValidCity;
@dynamic languageListArray, languageListArray_Count;
@dynamic inforListArray, inforListArray_Count;
@dynamic hasOrgVo, orgVo;
@dynamic medicareListArray, medicareListArray_Count;
@dynamic insureDescURL;
@dynamic needOrder;
@dynamic updateFlag;
@dynamic needOnduty;
@dynamic URLTypeStr;

typedef struct GetSettingRsp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t updateFlag;
  NSMutableArray *itemsArray;
  NSMutableArray *citysArray;
  NSMutableArray *bannerListArray;
  NSMutableArray *languageListArray;
  NSMutableArray *inforListArray;
  OrgVO *orgVo;
  NSMutableArray *medicareListArray;
  NSString *insureDescURL;
  NSString *URLTypeStr;
} GetSettingRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "itemsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(IndexServiceItem),
        .number = GetSettingRsp_FieldNumber_ItemsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetSettingRsp__storage_, itemsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "citysArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ServiceCityModel),
        .number = GetSettingRsp_FieldNumber_CitysArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetSettingRsp__storage_, citysArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "bannerListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(BannerModel),
        .number = GetSettingRsp_FieldNumber_BannerListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetSettingRsp__storage_, bannerListArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "isValidCity",
        .dataTypeSpecific.className = NULL,
        .number = GetSettingRsp_FieldNumber_IsValidCity,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "languageListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Language),
        .number = GetSettingRsp_FieldNumber_LanguageListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetSettingRsp__storage_, languageListArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "inforListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Information),
        .number = GetSettingRsp_FieldNumber_InforListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetSettingRsp__storage_, inforListArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "orgVo",
        .dataTypeSpecific.className = GPBStringifySymbol(OrgVO),
        .number = GetSettingRsp_FieldNumber_OrgVo,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetSettingRsp__storage_, orgVo),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "medicareListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(MedicareType),
        .number = GetSettingRsp_FieldNumber_MedicareListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetSettingRsp__storage_, medicareListArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "insureDescURL",
        .dataTypeSpecific.className = NULL,
        .number = GetSettingRsp_FieldNumber_InsureDescURL,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetSettingRsp__storage_, insureDescURL),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "needOrder",
        .dataTypeSpecific.className = NULL,
        .number = GetSettingRsp_FieldNumber_NeedOrder,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "updateFlag",
        .dataTypeSpecific.className = NULL,
        .number = GetSettingRsp_FieldNumber_UpdateFlag,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(GetSettingRsp__storage_, updateFlag),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "needOnduty",
        .dataTypeSpecific.className = NULL,
        .number = GetSettingRsp_FieldNumber_NeedOnduty,
        .hasIndex = 7,
        .offset = 8,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "URLTypeStr",
        .dataTypeSpecific.className = NULL,
        .number = GetSettingRsp_FieldNumber_URLTypeStr,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(GetSettingRsp__storage_, URLTypeStr),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetSettingRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetSettingRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\013\003\000bannerList\000\004\013\000\005\000languageList\000\006\000inforL"
        "ist\000\007\004A\000\010\000medicareList\000\t\013!!\000\n\t\000\013\n\000\014\n\000\r!!"
        "(\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - KinsfolkReq

@implementation KinsfolkReq

@dynamic kinsId;
@dynamic name;
@dynamic age;
@dynamic sex;
@dynamic relation;
@dynamic idCardNo;
@dynamic height;
@dynamic weight;
@dynamic physicalState;
@dynamic idPic;
@dynamic extraInfo;
@dynamic medicalNo;
@dynamic languageArray, languageArray_Count;
@dynamic actAbility;
@dynamic firstAdd;
@dynamic medicareType;
@dynamic healthCareNo;
@dynamic userId;
@dynamic idPic2;
@dynamic healthCareImg;
@dynamic kinsfolkImg;
@dynamic kinsType;
@dynamic staffType;

typedef struct KinsfolkReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t age;
  uint32_t sex;
  uint32_t actAbility;
  uint32_t medicareType;
  uint32_t kinsType;
  uint32_t staffType;
  NSString *name;
  NSString *relation;
  NSString *idCardNo;
  NSString *height;
  NSString *weight;
  NSString *physicalState;
  NSString *idPic;
  NSString *extraInfo;
  NSString *medicalNo;
  GPBUInt32Array *languageArray;
  NSString *healthCareNo;
  NSString *idPic2;
  NSString *healthCareImg;
  NSString *kinsfolkImg;
  uint64_t kinsId;
  uint64_t userId;
} KinsfolkReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "kinsId",
        .dataTypeSpecific.className = NULL,
        .number = KinsfolkReq_FieldNumber_KinsId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(KinsfolkReq__storage_, kinsId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = KinsfolkReq_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(KinsfolkReq__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "age",
        .dataTypeSpecific.className = NULL,
        .number = KinsfolkReq_FieldNumber_Age,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(KinsfolkReq__storage_, age),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "sex",
        .dataTypeSpecific.className = NULL,
        .number = KinsfolkReq_FieldNumber_Sex,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(KinsfolkReq__storage_, sex),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "relation",
        .dataTypeSpecific.className = NULL,
        .number = KinsfolkReq_FieldNumber_Relation,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(KinsfolkReq__storage_, relation),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "idCardNo",
        .dataTypeSpecific.className = NULL,
        .number = KinsfolkReq_FieldNumber_IdCardNo,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(KinsfolkReq__storage_, idCardNo),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "height",
        .dataTypeSpecific.className = NULL,
        .number = KinsfolkReq_FieldNumber_Height,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(KinsfolkReq__storage_, height),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "weight",
        .dataTypeSpecific.className = NULL,
        .number = KinsfolkReq_FieldNumber_Weight,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(KinsfolkReq__storage_, weight),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "physicalState",
        .dataTypeSpecific.className = NULL,
        .number = KinsfolkReq_FieldNumber_PhysicalState,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(KinsfolkReq__storage_, physicalState),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "idPic",
        .dataTypeSpecific.className = NULL,
        .number = KinsfolkReq_FieldNumber_IdPic,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(KinsfolkReq__storage_, idPic),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "extraInfo",
        .dataTypeSpecific.className = NULL,
        .number = KinsfolkReq_FieldNumber_ExtraInfo,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(KinsfolkReq__storage_, extraInfo),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "medicalNo",
        .dataTypeSpecific.className = NULL,
        .number = KinsfolkReq_FieldNumber_MedicalNo,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(KinsfolkReq__storage_, medicalNo),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "languageArray",
        .dataTypeSpecific.className = NULL,
        .number = KinsfolkReq_FieldNumber_LanguageArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(KinsfolkReq__storage_, languageArray),
        .flags = GPBFieldRepeated | GPBFieldPacked,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "actAbility",
        .dataTypeSpecific.className = NULL,
        .number = KinsfolkReq_FieldNumber_ActAbility,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(KinsfolkReq__storage_, actAbility),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "firstAdd",
        .dataTypeSpecific.className = NULL,
        .number = KinsfolkReq_FieldNumber_FirstAdd,
        .hasIndex = 13,
        .offset = 14,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "medicareType",
        .dataTypeSpecific.className = NULL,
        .number = KinsfolkReq_FieldNumber_MedicareType,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(KinsfolkReq__storage_, medicareType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "healthCareNo",
        .dataTypeSpecific.className = NULL,
        .number = KinsfolkReq_FieldNumber_HealthCareNo,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(KinsfolkReq__storage_, healthCareNo),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = KinsfolkReq_FieldNumber_UserId,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(KinsfolkReq__storage_, userId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "idPic2",
        .dataTypeSpecific.className = NULL,
        .number = KinsfolkReq_FieldNumber_IdPic2,
        .hasIndex = 18,
        .offset = (uint32_t)offsetof(KinsfolkReq__storage_, idPic2),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "healthCareImg",
        .dataTypeSpecific.className = NULL,
        .number = KinsfolkReq_FieldNumber_HealthCareImg,
        .hasIndex = 19,
        .offset = (uint32_t)offsetof(KinsfolkReq__storage_, healthCareImg),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "kinsfolkImg",
        .dataTypeSpecific.className = NULL,
        .number = KinsfolkReq_FieldNumber_KinsfolkImg,
        .hasIndex = 20,
        .offset = (uint32_t)offsetof(KinsfolkReq__storage_, kinsfolkImg),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "kinsType",
        .dataTypeSpecific.className = NULL,
        .number = KinsfolkReq_FieldNumber_KinsType,
        .hasIndex = 21,
        .offset = (uint32_t)offsetof(KinsfolkReq__storage_, kinsType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "staffType",
        .dataTypeSpecific.className = NULL,
        .number = KinsfolkReq_FieldNumber_StaffType,
        .hasIndex = 22,
        .offset = (uint32_t)offsetof(KinsfolkReq__storage_, staffType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[KinsfolkReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(KinsfolkReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\020\001\006\000\006\010\000\t\r\000\n\005\000\013\t\000\014\010A\000\016\n\000\017\010\000\020\014\000\021\013A\000\022\006\000\023\006\000\024"
        "\r\000\025\013\000\026\010\000\027\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetOrgListReq

@implementation GetOrgListReq

@dynamic keyword;
@dynamic adcode;
@dynamic lat;
@dynamic lng;
@dynamic pageNo;
@dynamic pageSize;
@dynamic orgId;

typedef struct GetOrgListReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t adcode;
  uint32_t pageNo;
  uint32_t pageSize;
  NSString *keyword;
  double lat;
  double lng;
  uint64_t orgId;
} GetOrgListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "keyword",
        .dataTypeSpecific.className = NULL,
        .number = GetOrgListReq_FieldNumber_Keyword,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetOrgListReq__storage_, keyword),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "adcode",
        .dataTypeSpecific.className = NULL,
        .number = GetOrgListReq_FieldNumber_Adcode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetOrgListReq__storage_, adcode),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "lat",
        .dataTypeSpecific.className = NULL,
        .number = GetOrgListReq_FieldNumber_Lat,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetOrgListReq__storage_, lat),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "lng",
        .dataTypeSpecific.className = NULL,
        .number = GetOrgListReq_FieldNumber_Lng,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetOrgListReq__storage_, lng),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "pageNo",
        .dataTypeSpecific.className = NULL,
        .number = GetOrgListReq_FieldNumber_PageNo,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GetOrgListReq__storage_, pageNo),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = GetOrgListReq_FieldNumber_PageSize,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(GetOrgListReq__storage_, pageSize),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "orgId",
        .dataTypeSpecific.className = NULL,
        .number = GetOrgListReq_FieldNumber_OrgId,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(GetOrgListReq__storage_, orgId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetOrgListReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetOrgListReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\005\006\000\006\010\000\007\005\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetOrgListRsp

@implementation GetOrgListRsp

@dynamic orgListArray, orgListArray_Count;
@dynamic isLocationValid;

typedef struct GetOrgListRsp__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *orgListArray;
} GetOrgListRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orgListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(OrgDistanceModel),
        .number = GetOrgListRsp_FieldNumber_OrgListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetOrgListRsp__storage_, orgListArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "isLocationValid",
        .dataTypeSpecific.className = NULL,
        .number = GetOrgListRsp_FieldNumber_IsLocationValid,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetOrgListRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetOrgListRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\000orgList\000\002\017\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetOrgAndBranchListReq

@implementation GetOrgAndBranchListReq

@dynamic adcode;
@dynamic lat;
@dynamic lng;
@dynamic orgId;
@dynamic cityId;

typedef struct GetOrgAndBranchListReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t adcode;
  uint32_t cityId;
  double lat;
  double lng;
  uint64_t orgId;
} GetOrgAndBranchListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "adcode",
        .dataTypeSpecific.className = NULL,
        .number = GetOrgAndBranchListReq_FieldNumber_Adcode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetOrgAndBranchListReq__storage_, adcode),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "lat",
        .dataTypeSpecific.className = NULL,
        .number = GetOrgAndBranchListReq_FieldNumber_Lat,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetOrgAndBranchListReq__storage_, lat),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "lng",
        .dataTypeSpecific.className = NULL,
        .number = GetOrgAndBranchListReq_FieldNumber_Lng,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetOrgAndBranchListReq__storage_, lng),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "orgId",
        .dataTypeSpecific.className = NULL,
        .number = GetOrgAndBranchListReq_FieldNumber_OrgId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetOrgAndBranchListReq__storage_, orgId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "cityId",
        .dataTypeSpecific.className = NULL,
        .number = GetOrgAndBranchListReq_FieldNumber_CityId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GetOrgAndBranchListReq__storage_, cityId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetOrgAndBranchListReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetOrgAndBranchListReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\004\005\000\005\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetOrgAndBranchListRsp

@implementation GetOrgAndBranchListRsp

@dynamic orgListArray, orgListArray_Count;
@dynamic map, map_Count;

typedef struct GetOrgAndBranchListRsp__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *orgListArray;
  GPBUInt64ObjectDictionary *map;
} GetOrgAndBranchListRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orgListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(OrgDistanceModel),
        .number = GetOrgAndBranchListRsp_FieldNumber_OrgListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetOrgAndBranchListRsp__storage_, orgListArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "map",
        .dataTypeSpecific.className = GPBStringifySymbol(BranchModelList),
        .number = GetOrgAndBranchListRsp_FieldNumber_Map,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetOrgAndBranchListRsp__storage_, map),
        .flags = GPBFieldMapKeyUInt64,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetOrgAndBranchListRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetOrgAndBranchListRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\000orgList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetRoomListReq

@implementation GetRoomListReq

@dynamic branchId;

typedef struct GetRoomListReq__storage_ {
  uint32_t _has_storage_[1];
  uint64_t branchId;
} GetRoomListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "branchId",
        .dataTypeSpecific.className = NULL,
        .number = GetRoomListReq_FieldNumber_BranchId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetRoomListReq__storage_, branchId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetRoomListReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetRoomListReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetRoomListRsp

@implementation GetRoomListRsp

@dynamic roomListArray, roomListArray_Count;
@dynamic map, map_Count;

typedef struct GetRoomListRsp__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *roomListArray;
  GPBUInt64ObjectDictionary *map;
} GetRoomListRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(RoomModel),
        .number = GetRoomListRsp_FieldNumber_RoomListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetRoomListRsp__storage_, roomListArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "map",
        .dataTypeSpecific.className = GPBStringifySymbol(BedModelList),
        .number = GetRoomListRsp_FieldNumber_Map,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetRoomListRsp__storage_, map),
        .flags = GPBFieldMapKeyUInt64,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetRoomListRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetRoomListRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\000roomList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetPriceReq

@implementation GetPriceReq

@dynamic branchId;
@dynamic adcode;
@dynamic st;
@dynamic islti;

typedef struct GetPriceReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t adcode;
  uint32_t st;
  uint64_t branchId;
} GetPriceReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "branchId",
        .dataTypeSpecific.className = NULL,
        .number = GetPriceReq_FieldNumber_BranchId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetPriceReq__storage_, branchId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "adcode",
        .dataTypeSpecific.className = NULL,
        .number = GetPriceReq_FieldNumber_Adcode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetPriceReq__storage_, adcode),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "st",
        .dataTypeSpecific.className = NULL,
        .number = GetPriceReq_FieldNumber_St,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetPriceReq__storage_, st),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "islti",
        .dataTypeSpecific.className = NULL,
        .number = GetPriceReq_FieldNumber_Islti,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetPriceReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetPriceReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetPriceRsp

@implementation GetPriceRsp

@dynamic pList12NArray, pList12NArray_Count;
@dynamic pList121Array, pList121Array_Count;
@dynamic phone;
@dynamic prepayAmount;
@dynamic entranceCardPrice;
@dynamic familyPriceVolistArray, familyPriceVolistArray_Count;
@dynamic entranceCardPriceStr;
@dynamic totalPrice;

typedef struct GetPriceRsp__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *pList12NArray;
  NSMutableArray *pList121Array;
  NSString *phone;
  NSString *prepayAmount;
  NSMutableArray *familyPriceVolistArray;
  NSString *entranceCardPriceStr;
  NSString *totalPrice;
  uint64_t entranceCardPrice;
} GetPriceRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "pList12NArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Price),
        .number = GetPriceRsp_FieldNumber_PList12NArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetPriceRsp__storage_, pList12NArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "pList121Array",
        .dataTypeSpecific.className = GPBStringifySymbol(Price),
        .number = GetPriceRsp_FieldNumber_PList121Array,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetPriceRsp__storage_, pList121Array),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "phone",
        .dataTypeSpecific.className = NULL,
        .number = GetPriceRsp_FieldNumber_Phone,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetPriceRsp__storage_, phone),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "prepayAmount",
        .dataTypeSpecific.className = NULL,
        .number = GetPriceRsp_FieldNumber_PrepayAmount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetPriceRsp__storage_, prepayAmount),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "entranceCardPrice",
        .dataTypeSpecific.className = NULL,
        .number = GetPriceRsp_FieldNumber_EntranceCardPrice,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetPriceRsp__storage_, entranceCardPrice),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "familyPriceVolistArray",
        .dataTypeSpecific.className = GPBStringifySymbol(CompanyPriceVO),
        .number = GetPriceRsp_FieldNumber_FamilyPriceVolistArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetPriceRsp__storage_, familyPriceVolistArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "entranceCardPriceStr",
        .dataTypeSpecific.className = NULL,
        .number = GetPriceRsp_FieldNumber_EntranceCardPriceStr,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetPriceRsp__storage_, entranceCardPriceStr),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "totalPrice",
        .dataTypeSpecific.className = NULL,
        .number = GetPriceRsp_FieldNumber_TotalPrice,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GetPriceRsp__storage_, totalPrice),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetPriceRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetPriceRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\007\001\000pList12N\000\002\000pList121\000\004\014\000\005\021\000\006\000familyPri"
        "ceVOList\000\007\024\000\010\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ListKinsfolkRsp

@implementation ListKinsfolkRsp

@dynamic kinsfolkListArray, kinsfolkListArray_Count;

typedef struct ListKinsfolkRsp__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *kinsfolkListArray;
} ListKinsfolkRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "kinsfolkListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(KinsfolkVO),
        .number = ListKinsfolkRsp_FieldNumber_KinsfolkListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ListKinsfolkRsp__storage_, kinsfolkListArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ListKinsfolkRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ListKinsfolkRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\000kinsfolkList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DelKinsfolkReq

@implementation DelKinsfolkReq

@dynamic kinsId;
@dynamic userId;

typedef struct DelKinsfolkReq__storage_ {
  uint32_t _has_storage_[1];
  uint64_t kinsId;
  uint64_t userId;
} DelKinsfolkReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "kinsId",
        .dataTypeSpecific.className = NULL,
        .number = DelKinsfolkReq_FieldNumber_KinsId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DelKinsfolkReq__storage_, kinsId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = DelKinsfolkReq_FieldNumber_UserId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DelKinsfolkReq__storage_, userId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DelKinsfolkReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DelKinsfolkReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\006\000\002\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetRechargeSettingRsp

@implementation GetRechargeSettingRsp

@dynamic rsListArray, rsListArray_Count;

typedef struct GetRechargeSettingRsp__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *rsListArray;
} GetRechargeSettingRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "rsListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(RechargeSetting),
        .number = GetRechargeSettingRsp_FieldNumber_RsListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetRechargeSettingRsp__storage_, rsListArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetRechargeSettingRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetRechargeSettingRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\000rsList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FeedBackReq

@implementation FeedBackReq

@dynamic suggestion;
@dynamic feedbackType;
@dynamic orgId;

typedef struct FeedBackReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t feedbackType;
  NSString *suggestion;
  uint64_t orgId;
} FeedBackReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "suggestion",
        .dataTypeSpecific.className = NULL,
        .number = FeedBackReq_FieldNumber_Suggestion,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FeedBackReq__storage_, suggestion),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "feedbackType",
        .dataTypeSpecific.className = NULL,
        .number = FeedBackReq_FieldNumber_FeedbackType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(FeedBackReq__storage_, feedbackType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "orgId",
        .dataTypeSpecific.className = NULL,
        .number = FeedBackReq_FieldNumber_OrgId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(FeedBackReq__storage_, orgId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FeedBackReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FeedBackReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\002\014\000\003\005\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DoPayReq

@implementation DoPayReq

@dynamic operation;
@dynamic payType;
@dynamic rechargeId;
@dynamic rechargeFee;
@dynamic orderId;
@dynamic monthsArray, monthsArray_Count;
@dynamic itemId;
@dynamic insureNo;
@dynamic applyId;
@dynamic authCode;
@dynamic hgId;
@dynamic userId;
@dynamic ip;
@dynamic openId;
@dynamic cburl;
@dynamic requestStatus;
@dynamic orderIdsArray, orderIdsArray_Count;

typedef struct DoPayReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t payType;
  uint32_t rechargeId;
  uint32_t requestStatus;
  NSString *operation;
  NSString *rechargeFee;
  NSString *orderId;
  NSMutableArray *monthsArray;
  NSString *insureNo;
  NSString *applyId;
  NSString *authCode;
  NSString *ip;
  NSString *openId;
  NSString *cburl;
  NSMutableArray *orderIdsArray;
  uint64_t itemId;
  uint64_t hgId;
  uint64_t userId;
} DoPayReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "operation",
        .dataTypeSpecific.className = NULL,
        .number = DoPayReq_FieldNumber_Operation,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DoPayReq__storage_, operation),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "payType",
        .dataTypeSpecific.className = NULL,
        .number = DoPayReq_FieldNumber_PayType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DoPayReq__storage_, payType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "rechargeId",
        .dataTypeSpecific.className = NULL,
        .number = DoPayReq_FieldNumber_RechargeId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DoPayReq__storage_, rechargeId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "rechargeFee",
        .dataTypeSpecific.className = NULL,
        .number = DoPayReq_FieldNumber_RechargeFee,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(DoPayReq__storage_, rechargeFee),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = DoPayReq_FieldNumber_OrderId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(DoPayReq__storage_, orderId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "monthsArray",
        .dataTypeSpecific.className = NULL,
        .number = DoPayReq_FieldNumber_MonthsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DoPayReq__storage_, monthsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "itemId",
        .dataTypeSpecific.className = NULL,
        .number = DoPayReq_FieldNumber_ItemId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(DoPayReq__storage_, itemId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "insureNo",
        .dataTypeSpecific.className = NULL,
        .number = DoPayReq_FieldNumber_InsureNo,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(DoPayReq__storage_, insureNo),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "applyId",
        .dataTypeSpecific.className = NULL,
        .number = DoPayReq_FieldNumber_ApplyId,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(DoPayReq__storage_, applyId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "authCode",
        .dataTypeSpecific.className = NULL,
        .number = DoPayReq_FieldNumber_AuthCode,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(DoPayReq__storage_, authCode),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "hgId",
        .dataTypeSpecific.className = NULL,
        .number = DoPayReq_FieldNumber_HgId,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(DoPayReq__storage_, hgId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = DoPayReq_FieldNumber_UserId,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(DoPayReq__storage_, userId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "ip",
        .dataTypeSpecific.className = NULL,
        .number = DoPayReq_FieldNumber_Ip,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(DoPayReq__storage_, ip),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "openId",
        .dataTypeSpecific.className = NULL,
        .number = DoPayReq_FieldNumber_OpenId,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(DoPayReq__storage_, openId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cburl",
        .dataTypeSpecific.className = NULL,
        .number = DoPayReq_FieldNumber_Cburl,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(DoPayReq__storage_, cburl),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "requestStatus",
        .dataTypeSpecific.className = NULL,
        .number = DoPayReq_FieldNumber_RequestStatus,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(DoPayReq__storage_, requestStatus),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "orderIdsArray",
        .dataTypeSpecific.className = NULL,
        .number = DoPayReq_FieldNumber_OrderIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DoPayReq__storage_, orderIdsArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DoPayReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DoPayReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\r\002\007\000\003\n\000\004\013\000\005\007\000\007\006\000\010\007A\000\t\007\000\n\010\000\013\004\000\310\001\006\000\312\001\006\000\314\001\r"
        "\000\315\001\000orderIds\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DoPayRsp

@implementation DoPayRsp

@dynamic prePayId;
@dynamic payType;

typedef struct DoPayRsp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t payType;
  NSString *prePayId;
} DoPayRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "prePayId",
        .dataTypeSpecific.className = NULL,
        .number = DoPayRsp_FieldNumber_PrePayId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DoPayRsp__storage_, prePayId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "payType",
        .dataTypeSpecific.className = NULL,
        .number = DoPayRsp_FieldNumber_PayType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DoPayRsp__storage_, payType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DoPayRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DoPayRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\010\000\002\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetIDCardNoReq

@implementation GetIDCardNoReq

@dynamic imgId;

typedef struct GetIDCardNoReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *imgId;
} GetIDCardNoReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "imgId",
        .dataTypeSpecific.className = NULL,
        .number = GetIDCardNoReq_FieldNumber_ImgId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetIDCardNoReq__storage_, imgId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetIDCardNoReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetIDCardNoReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\005\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetIDCardNoRsp

@implementation GetIDCardNoRsp

@dynamic hasIdInfo, idInfo;

typedef struct GetIDCardNoRsp__storage_ {
  uint32_t _has_storage_[1];
  IDCardInfo *idInfo;
} GetIDCardNoRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "idInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(IDCardInfo),
        .number = GetIDCardNoRsp_FieldNumber_IdInfo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetIDCardNoRsp__storage_, idInfo),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetIDCardNoRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetIDCardNoRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetDoPayReq

@implementation GetDoPayReq

@dynamic payRes;
@dynamic payType;

typedef struct GetDoPayReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t payType;
  NSString *payRes;
} GetDoPayReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "payRes",
        .dataTypeSpecific.className = NULL,
        .number = GetDoPayReq_FieldNumber_PayRes,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetDoPayReq__storage_, payRes),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "payType",
        .dataTypeSpecific.className = NULL,
        .number = GetDoPayReq_FieldNumber_PayType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetDoPayReq__storage_, payType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetDoPayReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetDoPayReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\006\000\002\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetDoPayRsp

@implementation GetDoPayRsp

@dynamic res;
@dynamic msg;

typedef struct GetDoPayRsp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t res;
  NSString *msg;
} GetDoPayRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "res",
        .dataTypeSpecific.className = NULL,
        .number = GetDoPayRsp_FieldNumber_Res,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetDoPayRsp__storage_, res),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "msg",
        .dataTypeSpecific.className = NULL,
        .number = GetDoPayRsp_FieldNumber_Msg,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetDoPayRsp__storage_, msg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetDoPayRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetDoPayRsp__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ScanLoginReq

@implementation ScanLoginReq

@dynamic accessToken;
@dynamic ops;

typedef struct ScanLoginReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t ops;
  NSString *accessToken;
} ScanLoginReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "accessToken",
        .dataTypeSpecific.className = NULL,
        .number = ScanLoginReq_FieldNumber_AccessToken,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ScanLoginReq__storage_, accessToken),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "ops",
        .dataTypeSpecific.className = NULL,
        .number = ScanLoginReq_FieldNumber_Ops,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ScanLoginReq__storage_, ops),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ScanLoginReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ScanLoginReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ScanLoginRsp

@implementation ScanLoginRsp

@dynamic retCode;

typedef struct ScanLoginRsp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t retCode;
} ScanLoginRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "retCode",
        .dataTypeSpecific.className = NULL,
        .number = ScanLoginRsp_FieldNumber_RetCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ScanLoginRsp__storage_, retCode),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ScanLoginRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ScanLoginRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SaveOrderPraiseReq

@implementation SaveOrderPraiseReq

@dynamic orderId;
@dynamic content;
@dynamic grade;

typedef struct SaveOrderPraiseReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t grade;
  NSString *orderId;
  NSString *content;
} SaveOrderPraiseReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = SaveOrderPraiseReq_FieldNumber_OrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SaveOrderPraiseReq__storage_, orderId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = SaveOrderPraiseReq_FieldNumber_Content,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SaveOrderPraiseReq__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "grade",
        .dataTypeSpecific.className = NULL,
        .number = SaveOrderPraiseReq_FieldNumber_Grade,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SaveOrderPraiseReq__storage_, grade),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SaveOrderPraiseReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SaveOrderPraiseReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetOrderPraiseReq

@implementation GetOrderPraiseReq

@dynamic orderId;

typedef struct GetOrderPraiseReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *orderId;
} GetOrderPraiseReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderPraiseReq_FieldNumber_OrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetOrderPraiseReq__storage_, orderId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetOrderPraiseReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetOrderPraiseReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CreateOrderReq

@implementation CreateOrderReq

@dynamic serviceStartTime;
@dynamic serviceEndTime;
@dynamic kinsId;
@dynamic priceId;
@dynamic orderType;
@dynamic phone;
@dynamic roomId;
@dynamic bedId;
@dynamic addrId;
@dynamic companyId;
@dynamic orgId;
@dynamic branchId;
@dynamic userId;
@dynamic securityAssess;
@dynamic orgNo;
@dynamic admissionDate;
@dynamic kinsName;
@dynamic age;
@dynamic sex;
@dynamic needExtra;
@dynamic pic1;
@dynamic bedNo;
@dynamic isHis;
@dynamic orderId;

typedef struct CreateOrderReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t orderType;
  uint32_t age;
  uint32_t sex;
  uint32_t isHis;
  NSString *serviceStartTime;
  NSString *serviceEndTime;
  NSString *phone;
  NSString *securityAssess;
  NSString *orgNo;
  NSString *admissionDate;
  NSString *kinsName;
  NSString *pic1;
  NSString *bedNo;
  NSString *orderId;
  uint64_t kinsId;
  uint64_t priceId;
  uint64_t roomId;
  uint64_t bedId;
  uint64_t addrId;
  uint64_t companyId;
  uint64_t orgId;
  uint64_t branchId;
  uint64_t userId;
} CreateOrderReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "serviceStartTime",
        .dataTypeSpecific.className = NULL,
        .number = CreateOrderReq_FieldNumber_ServiceStartTime,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CreateOrderReq__storage_, serviceStartTime),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "serviceEndTime",
        .dataTypeSpecific.className = NULL,
        .number = CreateOrderReq_FieldNumber_ServiceEndTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CreateOrderReq__storage_, serviceEndTime),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "kinsId",
        .dataTypeSpecific.className = NULL,
        .number = CreateOrderReq_FieldNumber_KinsId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CreateOrderReq__storage_, kinsId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "priceId",
        .dataTypeSpecific.className = NULL,
        .number = CreateOrderReq_FieldNumber_PriceId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(CreateOrderReq__storage_, priceId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "orderType",
        .dataTypeSpecific.className = NULL,
        .number = CreateOrderReq_FieldNumber_OrderType,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(CreateOrderReq__storage_, orderType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "phone",
        .dataTypeSpecific.className = NULL,
        .number = CreateOrderReq_FieldNumber_Phone,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(CreateOrderReq__storage_, phone),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = CreateOrderReq_FieldNumber_RoomId,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(CreateOrderReq__storage_, roomId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "bedId",
        .dataTypeSpecific.className = NULL,
        .number = CreateOrderReq_FieldNumber_BedId,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(CreateOrderReq__storage_, bedId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "addrId",
        .dataTypeSpecific.className = NULL,
        .number = CreateOrderReq_FieldNumber_AddrId,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(CreateOrderReq__storage_, addrId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "companyId",
        .dataTypeSpecific.className = NULL,
        .number = CreateOrderReq_FieldNumber_CompanyId,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(CreateOrderReq__storage_, companyId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "orgId",
        .dataTypeSpecific.className = NULL,
        .number = CreateOrderReq_FieldNumber_OrgId,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(CreateOrderReq__storage_, orgId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "branchId",
        .dataTypeSpecific.className = NULL,
        .number = CreateOrderReq_FieldNumber_BranchId,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(CreateOrderReq__storage_, branchId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = CreateOrderReq_FieldNumber_UserId,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(CreateOrderReq__storage_, userId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "securityAssess",
        .dataTypeSpecific.className = NULL,
        .number = CreateOrderReq_FieldNumber_SecurityAssess,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(CreateOrderReq__storage_, securityAssess),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "orgNo",
        .dataTypeSpecific.className = NULL,
        .number = CreateOrderReq_FieldNumber_OrgNo,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(CreateOrderReq__storage_, orgNo),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "admissionDate",
        .dataTypeSpecific.className = NULL,
        .number = CreateOrderReq_FieldNumber_AdmissionDate,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(CreateOrderReq__storage_, admissionDate),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "kinsName",
        .dataTypeSpecific.className = NULL,
        .number = CreateOrderReq_FieldNumber_KinsName,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(CreateOrderReq__storage_, kinsName),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "age",
        .dataTypeSpecific.className = NULL,
        .number = CreateOrderReq_FieldNumber_Age,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(CreateOrderReq__storage_, age),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "sex",
        .dataTypeSpecific.className = NULL,
        .number = CreateOrderReq_FieldNumber_Sex,
        .hasIndex = 18,
        .offset = (uint32_t)offsetof(CreateOrderReq__storage_, sex),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "needExtra",
        .dataTypeSpecific.className = NULL,
        .number = CreateOrderReq_FieldNumber_NeedExtra,
        .hasIndex = 19,
        .offset = 20,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "pic1",
        .dataTypeSpecific.className = NULL,
        .number = CreateOrderReq_FieldNumber_Pic1,
        .hasIndex = 21,
        .offset = (uint32_t)offsetof(CreateOrderReq__storage_, pic1),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bedNo",
        .dataTypeSpecific.className = NULL,
        .number = CreateOrderReq_FieldNumber_BedNo,
        .hasIndex = 22,
        .offset = (uint32_t)offsetof(CreateOrderReq__storage_, bedNo),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isHis",
        .dataTypeSpecific.className = NULL,
        .number = CreateOrderReq_FieldNumber_IsHis,
        .hasIndex = 23,
        .offset = (uint32_t)offsetof(CreateOrderReq__storage_, isHis),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = CreateOrderReq_FieldNumber_OrderId,
        .hasIndex = 24,
        .offset = (uint32_t)offsetof(CreateOrderReq__storage_, orderId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CreateOrderReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CreateOrderReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\024\001\020\000\002\016\000\003\006\000\004\007\000\005\t\000\007\006\000\010\005\000\t\006\000\n\t\000\013\005\000\014\010\000\r\006\000\016\016\000"
        "\017\004A\000\020\r\000\021\010\000\024\t\000\026\004A\000\027\005\000\030\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CreateInsureOrderReq

@implementation CreateInsureOrderReq

@dynamic serviceStartTime;
@dynamic serviceEndTime;
@dynamic priceId;
@dynamic priceitemIdsArray, priceitemIdsArray_Count;
@dynamic userId;
@dynamic addrId;
@dynamic insureNo;
@dynamic kinsId;

typedef struct CreateInsureOrderReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *serviceStartTime;
  NSString *serviceEndTime;
  NSMutableArray *priceitemIdsArray;
  NSString *insureNo;
  uint64_t priceId;
  uint64_t userId;
  uint64_t addrId;
  uint64_t kinsId;
} CreateInsureOrderReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "serviceStartTime",
        .dataTypeSpecific.className = NULL,
        .number = CreateInsureOrderReq_FieldNumber_ServiceStartTime,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CreateInsureOrderReq__storage_, serviceStartTime),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "serviceEndTime",
        .dataTypeSpecific.className = NULL,
        .number = CreateInsureOrderReq_FieldNumber_ServiceEndTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CreateInsureOrderReq__storage_, serviceEndTime),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "priceId",
        .dataTypeSpecific.className = NULL,
        .number = CreateInsureOrderReq_FieldNumber_PriceId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CreateInsureOrderReq__storage_, priceId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "priceitemIdsArray",
        .dataTypeSpecific.className = NULL,
        .number = CreateInsureOrderReq_FieldNumber_PriceitemIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(CreateInsureOrderReq__storage_, priceitemIdsArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = CreateInsureOrderReq_FieldNumber_UserId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(CreateInsureOrderReq__storage_, userId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "addrId",
        .dataTypeSpecific.className = NULL,
        .number = CreateInsureOrderReq_FieldNumber_AddrId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(CreateInsureOrderReq__storage_, addrId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "insureNo",
        .dataTypeSpecific.className = NULL,
        .number = CreateInsureOrderReq_FieldNumber_InsureNo,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(CreateInsureOrderReq__storage_, insureNo),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "kinsId",
        .dataTypeSpecific.className = NULL,
        .number = CreateInsureOrderReq_FieldNumber_KinsId,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(CreateInsureOrderReq__storage_, kinsId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CreateInsureOrderReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CreateInsureOrderReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\010\001\020\000\002\016\000\003\007\000\004\000priceitemIds\000\005\006\000\006\006\000\007\007A\000\010\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetOrderPraiseRsp

@implementation GetOrderPraiseRsp

@dynamic hasModel, model;

typedef struct GetOrderPraiseRsp__storage_ {
  uint32_t _has_storage_[1];
  OrderPraise *model;
} GetOrderPraiseRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "model",
        .dataTypeSpecific.className = GPBStringifySymbol(OrderPraise),
        .number = GetOrderPraiseRsp_FieldNumber_Model,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetOrderPraiseRsp__storage_, model),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetOrderPraiseRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetOrderPraiseRsp__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CreateKinsfolkRsp

@implementation CreateKinsfolkRsp

@dynamic kinsId;

typedef struct CreateKinsfolkRsp__storage_ {
  uint32_t _has_storage_[1];
  uint64_t kinsId;
} CreateKinsfolkRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "kinsId",
        .dataTypeSpecific.className = NULL,
        .number = CreateKinsfolkRsp_FieldNumber_KinsId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CreateKinsfolkRsp__storage_, kinsId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CreateKinsfolkRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CreateKinsfolkRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CreateAddressRsp

@implementation CreateAddressRsp

@dynamic addrId;
@dynamic addressInfo;

typedef struct CreateAddressRsp__storage_ {
  uint32_t _has_storage_[1];
  NSString *addressInfo;
  uint64_t addrId;
} CreateAddressRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "addrId",
        .dataTypeSpecific.className = NULL,
        .number = CreateAddressRsp_FieldNumber_AddrId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CreateAddressRsp__storage_, addrId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "addressInfo",
        .dataTypeSpecific.className = NULL,
        .number = CreateAddressRsp_FieldNumber_AddressInfo,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CreateAddressRsp__storage_, addressInfo),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CreateAddressRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CreateAddressRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\002\006\000\003\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CreateOrderRsp

@implementation CreateOrderRsp

@dynamic orderId;
@dynamic doPay;

typedef struct CreateOrderRsp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t doPay;
  NSString *orderId;
} CreateOrderRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = CreateOrderRsp_FieldNumber_OrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CreateOrderRsp__storage_, orderId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "doPay",
        .dataTypeSpecific.className = NULL,
        .number = CreateOrderRsp_FieldNumber_DoPay,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CreateOrderRsp__storage_, doPay),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CreateOrderRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CreateOrderRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\007\000\002\005\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetOrderListReq

@implementation GetOrderListReq

@dynamic tabType;
@dynamic pageSize;
@dynamic pageNum;

typedef struct GetOrderListReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t tabType;
  uint32_t pageSize;
  uint32_t pageNum;
} GetOrderListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "tabType",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderListReq_FieldNumber_TabType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetOrderListReq__storage_, tabType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderListReq_FieldNumber_PageSize,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetOrderListReq__storage_, pageSize),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "pageNum",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderListReq_FieldNumber_PageNum,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetOrderListReq__storage_, pageNum),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetOrderListReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetOrderListReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\007\000\002\010\000\003\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetOrderListRsp

@implementation GetOrderListRsp

@dynamic orderListArray, orderListArray_Count;
@dynamic count;

typedef struct GetOrderListRsp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t count;
  NSMutableArray *orderListArray;
} GetOrderListRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(OrderVO),
        .number = GetOrderListRsp_FieldNumber_OrderListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetOrderListRsp__storage_, orderListArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderListRsp_FieldNumber_Count,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetOrderListRsp__storage_, count),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetOrderListRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetOrderListRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\000orderList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetOrderReq

@implementation GetOrderReq

@dynamic orderId;

typedef struct GetOrderReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *orderId;
} GetOrderReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderReq_FieldNumber_OrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetOrderReq__storage_, orderId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetOrderReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetOrderReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WithdrawReq

@implementation WithdrawReq

@dynamic fee;

typedef struct WithdrawReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *fee;
} WithdrawReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "fee",
        .dataTypeSpecific.className = NULL,
        .number = WithdrawReq_FieldNumber_Fee,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WithdrawReq__storage_, fee),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WithdrawReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WithdrawReq__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetUserAccountRsp

@implementation GetUserAccountRsp

@dynamic account;
@dynamic present;
@dynamic totalAccount;
@dynamic accountStr;

typedef struct GetUserAccountRsp__storage_ {
  uint32_t _has_storage_[1];
  NSString *totalAccount;
  NSString *accountStr;
  uint64_t account;
  uint64_t present;
} GetUserAccountRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "account",
        .dataTypeSpecific.className = NULL,
        .number = GetUserAccountRsp_FieldNumber_Account,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetUserAccountRsp__storage_, account),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "present",
        .dataTypeSpecific.className = NULL,
        .number = GetUserAccountRsp_FieldNumber_Present,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetUserAccountRsp__storage_, present),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "totalAccount",
        .dataTypeSpecific.className = NULL,
        .number = GetUserAccountRsp_FieldNumber_TotalAccount,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetUserAccountRsp__storage_, totalAccount),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "accountStr",
        .dataTypeSpecific.className = NULL,
        .number = GetUserAccountRsp_FieldNumber_AccountStr,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetUserAccountRsp__storage_, accountStr),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetUserAccountRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetUserAccountRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\003\014\000\004\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ReOrderRsp

@implementation ReOrderRsp

@dynamic orgId;
@dynamic orgName;
@dynamic branchId;
@dynamic branchName;
@dynamic roomId;
@dynamic roomNo;
@dynamic kinsId;
@dynamic fullName;
@dynamic bedId;
@dynamic bedNo;
@dynamic priceId;
@dynamic orderType;
@dynamic phone;
@dynamic addrId;
@dynamic serviceStartTime;
@dynamic prepayAmount;

typedef struct ReOrderRsp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t orderType;
  NSString *orgName;
  NSString *branchName;
  NSString *roomNo;
  NSString *fullName;
  NSString *bedNo;
  NSString *phone;
  NSString *serviceStartTime;
  uint64_t orgId;
  uint64_t branchId;
  uint64_t roomId;
  uint64_t kinsId;
  uint64_t bedId;
  uint64_t priceId;
  uint64_t addrId;
  uint64_t prepayAmount;
} ReOrderRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orgId",
        .dataTypeSpecific.className = NULL,
        .number = ReOrderRsp_FieldNumber_OrgId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ReOrderRsp__storage_, orgId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "orgName",
        .dataTypeSpecific.className = NULL,
        .number = ReOrderRsp_FieldNumber_OrgName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ReOrderRsp__storage_, orgName),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "branchId",
        .dataTypeSpecific.className = NULL,
        .number = ReOrderRsp_FieldNumber_BranchId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ReOrderRsp__storage_, branchId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "branchName",
        .dataTypeSpecific.className = NULL,
        .number = ReOrderRsp_FieldNumber_BranchName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ReOrderRsp__storage_, branchName),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = ReOrderRsp_FieldNumber_RoomId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ReOrderRsp__storage_, roomId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "roomNo",
        .dataTypeSpecific.className = NULL,
        .number = ReOrderRsp_FieldNumber_RoomNo,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(ReOrderRsp__storage_, roomNo),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "kinsId",
        .dataTypeSpecific.className = NULL,
        .number = ReOrderRsp_FieldNumber_KinsId,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(ReOrderRsp__storage_, kinsId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "fullName",
        .dataTypeSpecific.className = NULL,
        .number = ReOrderRsp_FieldNumber_FullName,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(ReOrderRsp__storage_, fullName),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bedId",
        .dataTypeSpecific.className = NULL,
        .number = ReOrderRsp_FieldNumber_BedId,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(ReOrderRsp__storage_, bedId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "bedNo",
        .dataTypeSpecific.className = NULL,
        .number = ReOrderRsp_FieldNumber_BedNo,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(ReOrderRsp__storage_, bedNo),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "priceId",
        .dataTypeSpecific.className = NULL,
        .number = ReOrderRsp_FieldNumber_PriceId,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(ReOrderRsp__storage_, priceId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "orderType",
        .dataTypeSpecific.className = NULL,
        .number = ReOrderRsp_FieldNumber_OrderType,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(ReOrderRsp__storage_, orderType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "phone",
        .dataTypeSpecific.className = NULL,
        .number = ReOrderRsp_FieldNumber_Phone,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(ReOrderRsp__storage_, phone),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "addrId",
        .dataTypeSpecific.className = NULL,
        .number = ReOrderRsp_FieldNumber_AddrId,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(ReOrderRsp__storage_, addrId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "serviceStartTime",
        .dataTypeSpecific.className = NULL,
        .number = ReOrderRsp_FieldNumber_ServiceStartTime,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(ReOrderRsp__storage_, serviceStartTime),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "prepayAmount",
        .dataTypeSpecific.className = NULL,
        .number = ReOrderRsp_FieldNumber_PrepayAmount,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(ReOrderRsp__storage_, prepayAmount),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ReOrderRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ReOrderRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\017\001\005\000\002\007\000\003\010\000\004\n\000\005\006\000\006\006\000\007\006\000\010\010\000\t\005\000\n\005\000\013\007\000\014\t\000\016\006\000"
        "\017\020\000\020\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - IndexRsp

@implementation IndexRsp

@dynamic hasOrderCur, orderCur;

typedef struct IndexRsp__storage_ {
  uint32_t _has_storage_[1];
  OrderCurrent *orderCur;
} IndexRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderCur",
        .dataTypeSpecific.className = GPBStringifySymbol(OrderCurrent),
        .number = IndexRsp_FieldNumber_OrderCur,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(IndexRsp__storage_, orderCur),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IndexRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(IndexRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ListSettlementRsp

@implementation ListSettlementRsp

@dynamic orderId;
@dynamic prePayAmount;
@dynamic confirmCost;
@dynamic voListArray, voListArray_Count;

typedef struct ListSettlementRsp__storage_ {
  uint32_t _has_storage_[1];
  NSString *orderId;
  NSString *prePayAmount;
  NSString *confirmCost;
  NSMutableArray *voListArray;
} ListSettlementRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = ListSettlementRsp_FieldNumber_OrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ListSettlementRsp__storage_, orderId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "prePayAmount",
        .dataTypeSpecific.className = NULL,
        .number = ListSettlementRsp_FieldNumber_PrePayAmount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ListSettlementRsp__storage_, prePayAmount),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "confirmCost",
        .dataTypeSpecific.className = NULL,
        .number = ListSettlementRsp_FieldNumber_ConfirmCost,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ListSettlementRsp__storage_, confirmCost),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "voListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(SettlementVO),
        .number = ListSettlementRsp_FieldNumber_VoListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ListSettlementRsp__storage_, voListArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ListSettlementRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ListSettlementRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001\007\000\002\014\000\003\013\000\004\000voList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SettlementReq

@implementation SettlementReq

@dynamic orderId;
@dynamic settDate;
@dynamic pageNum;
@dynamic pageSize;

typedef struct SettlementReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t pageNum;
  uint32_t pageSize;
  NSString *orderId;
  NSString *settDate;
} SettlementReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = SettlementReq_FieldNumber_OrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SettlementReq__storage_, orderId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "settDate",
        .dataTypeSpecific.className = NULL,
        .number = SettlementReq_FieldNumber_SettDate,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SettlementReq__storage_, settDate),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pageNum",
        .dataTypeSpecific.className = NULL,
        .number = SettlementReq_FieldNumber_PageNum,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SettlementReq__storage_, pageNum),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = SettlementReq_FieldNumber_PageSize,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SettlementReq__storage_, pageSize),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SettlementReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SettlementReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001\007\000\002\010\000\003\007\000\004\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ListOrderItemRsp

@implementation ListOrderItemRsp

@dynamic voListArray, voListArray_Count;

typedef struct ListOrderItemRsp__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *voListArray;
} ListOrderItemRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "voListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(OrderItemVO),
        .number = ListOrderItemRsp_FieldNumber_VoListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ListOrderItemRsp__storage_, voListArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ListOrderItemRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ListOrderItemRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\000voList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetOrderTimeReq

@implementation GetOrderTimeReq

@dynamic orderType;

typedef struct GetOrderTimeReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t orderType;
} GetOrderTimeReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderType",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderTimeReq_FieldNumber_OrderType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetOrderTimeReq__storage_, orderType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetOrderTimeReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetOrderTimeReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetOrderTimeRsp

@implementation GetOrderTimeRsp

@dynamic timeDateListArray, timeDateListArray_Count;
@dynamic hasDefaultTimeData, defaultTimeData;

typedef struct GetOrderTimeRsp__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *timeDateListArray;
  OrderTimeData *defaultTimeData;
} GetOrderTimeRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "timeDateListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(TimeData),
        .number = GetOrderTimeRsp_FieldNumber_TimeDateListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetOrderTimeRsp__storage_, timeDateListArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "defaultTimeData",
        .dataTypeSpecific.className = GPBStringifySymbol(OrderTimeData),
        .number = GetOrderTimeRsp_FieldNumber_DefaultTimeData,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetOrderTimeRsp__storage_, defaultTimeData),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetOrderTimeRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetOrderTimeRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\000timeDateList\000\002\017\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SettlPayDetailReq

@implementation SettlPayDetailReq

@dynamic orderId;
@dynamic settDateArray, settDateArray_Count;
@dynamic status;

typedef struct SettlPayDetailReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t status;
  NSString *orderId;
  NSMutableArray *settDateArray;
} SettlPayDetailReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = SettlPayDetailReq_FieldNumber_OrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SettlPayDetailReq__storage_, orderId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "settDateArray",
        .dataTypeSpecific.className = NULL,
        .number = SettlPayDetailReq_FieldNumber_SettDateArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SettlPayDetailReq__storage_, settDateArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = SettlPayDetailReq_FieldNumber_Status,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SettlPayDetailReq__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SettlPayDetailReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SettlPayDetailReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\007\000\002\000settDate\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SettlPayDetailRsp

@implementation SettlPayDetailRsp

@dynamic hasOrder, order;
@dynamic serviceTime;
@dynamic expense;
@dynamic serviceFee;
@dynamic extraFee;
@dynamic adjustFee;
@dynamic usePurse;
@dynamic needPay;
@dynamic serviceListArray, serviceListArray_Count;
@dynamic extraListArray, extraListArray_Count;
@dynamic adjustListArray, adjustListArray_Count;
@dynamic payFlag;
@dynamic purse;
@dynamic insureAccount;
@dynamic extraPay;
@dynamic preRealFee;
@dynamic payHint;
@dynamic realPay;
@dynamic returnPay;
@dynamic hgRebateFee;
@dynamic totalFee;
@dynamic serviceTotalFee;
@dynamic extraTotalFee;
@dynamic balancePreRealFee;
@dynamic returnType;
@dynamic dudaoChargeConfig;

typedef struct SettlPayDetailRsp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t payFlag;
  uint32_t returnType;
  uint32_t dudaoChargeConfig;
  OrderVO *order;
  NSString *serviceTime;
  NSString *expense;
  NSString *serviceFee;
  NSString *extraFee;
  NSString *adjustFee;
  NSString *needPay;
  NSMutableArray *serviceListArray;
  NSMutableArray *extraListArray;
  NSMutableArray *adjustListArray;
  NSString *purse;
  NSString *insureAccount;
  NSString *preRealFee;
  NSString *payHint;
  NSString *realPay;
  NSString *returnPay;
  NSString *hgRebateFee;
  NSString *totalFee;
  NSString *serviceTotalFee;
  NSString *extraTotalFee;
  NSString *balancePreRealFee;
} SettlPayDetailRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "order",
        .dataTypeSpecific.className = GPBStringifySymbol(OrderVO),
        .number = SettlPayDetailRsp_FieldNumber_Order,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SettlPayDetailRsp__storage_, order),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "serviceTime",
        .dataTypeSpecific.className = NULL,
        .number = SettlPayDetailRsp_FieldNumber_ServiceTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SettlPayDetailRsp__storage_, serviceTime),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "expense",
        .dataTypeSpecific.className = NULL,
        .number = SettlPayDetailRsp_FieldNumber_Expense,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SettlPayDetailRsp__storage_, expense),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "serviceFee",
        .dataTypeSpecific.className = NULL,
        .number = SettlPayDetailRsp_FieldNumber_ServiceFee,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SettlPayDetailRsp__storage_, serviceFee),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "extraFee",
        .dataTypeSpecific.className = NULL,
        .number = SettlPayDetailRsp_FieldNumber_ExtraFee,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SettlPayDetailRsp__storage_, extraFee),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "adjustFee",
        .dataTypeSpecific.className = NULL,
        .number = SettlPayDetailRsp_FieldNumber_AdjustFee,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SettlPayDetailRsp__storage_, adjustFee),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "usePurse",
        .dataTypeSpecific.className = NULL,
        .number = SettlPayDetailRsp_FieldNumber_UsePurse,
        .hasIndex = 6,
        .offset = 7,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "needPay",
        .dataTypeSpecific.className = NULL,
        .number = SettlPayDetailRsp_FieldNumber_NeedPay,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(SettlPayDetailRsp__storage_, needPay),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "serviceListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(OrderItemVO2),
        .number = SettlPayDetailRsp_FieldNumber_ServiceListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SettlPayDetailRsp__storage_, serviceListArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "extraListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(OrderItemVO2),
        .number = SettlPayDetailRsp_FieldNumber_ExtraListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SettlPayDetailRsp__storage_, extraListArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "adjustListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(OrderItemVO2),
        .number = SettlPayDetailRsp_FieldNumber_AdjustListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SettlPayDetailRsp__storage_, adjustListArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "payFlag",
        .dataTypeSpecific.className = NULL,
        .number = SettlPayDetailRsp_FieldNumber_PayFlag,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(SettlPayDetailRsp__storage_, payFlag),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "purse",
        .dataTypeSpecific.className = NULL,
        .number = SettlPayDetailRsp_FieldNumber_Purse,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(SettlPayDetailRsp__storage_, purse),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "insureAccount",
        .dataTypeSpecific.className = NULL,
        .number = SettlPayDetailRsp_FieldNumber_InsureAccount,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(SettlPayDetailRsp__storage_, insureAccount),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "extraPay",
        .dataTypeSpecific.className = NULL,
        .number = SettlPayDetailRsp_FieldNumber_ExtraPay,
        .hasIndex = 12,
        .offset = 13,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "preRealFee",
        .dataTypeSpecific.className = NULL,
        .number = SettlPayDetailRsp_FieldNumber_PreRealFee,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(SettlPayDetailRsp__storage_, preRealFee),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "payHint",
        .dataTypeSpecific.className = NULL,
        .number = SettlPayDetailRsp_FieldNumber_PayHint,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(SettlPayDetailRsp__storage_, payHint),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "realPay",
        .dataTypeSpecific.className = NULL,
        .number = SettlPayDetailRsp_FieldNumber_RealPay,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(SettlPayDetailRsp__storage_, realPay),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "returnPay",
        .dataTypeSpecific.className = NULL,
        .number = SettlPayDetailRsp_FieldNumber_ReturnPay,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(SettlPayDetailRsp__storage_, returnPay),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "hgRebateFee",
        .dataTypeSpecific.className = NULL,
        .number = SettlPayDetailRsp_FieldNumber_HgRebateFee,
        .hasIndex = 18,
        .offset = (uint32_t)offsetof(SettlPayDetailRsp__storage_, hgRebateFee),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "totalFee",
        .dataTypeSpecific.className = NULL,
        .number = SettlPayDetailRsp_FieldNumber_TotalFee,
        .hasIndex = 19,
        .offset = (uint32_t)offsetof(SettlPayDetailRsp__storage_, totalFee),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "serviceTotalFee",
        .dataTypeSpecific.className = NULL,
        .number = SettlPayDetailRsp_FieldNumber_ServiceTotalFee,
        .hasIndex = 20,
        .offset = (uint32_t)offsetof(SettlPayDetailRsp__storage_, serviceTotalFee),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "extraTotalFee",
        .dataTypeSpecific.className = NULL,
        .number = SettlPayDetailRsp_FieldNumber_ExtraTotalFee,
        .hasIndex = 21,
        .offset = (uint32_t)offsetof(SettlPayDetailRsp__storage_, extraTotalFee),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "balancePreRealFee",
        .dataTypeSpecific.className = NULL,
        .number = SettlPayDetailRsp_FieldNumber_BalancePreRealFee,
        .hasIndex = 22,
        .offset = (uint32_t)offsetof(SettlPayDetailRsp__storage_, balancePreRealFee),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "returnType",
        .dataTypeSpecific.className = NULL,
        .number = SettlPayDetailRsp_FieldNumber_ReturnType,
        .hasIndex = 23,
        .offset = (uint32_t)offsetof(SettlPayDetailRsp__storage_, returnType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "dudaoChargeConfig",
        .dataTypeSpecific.className = NULL,
        .number = SettlPayDetailRsp_FieldNumber_DudaoChargeConfig,
        .hasIndex = 24,
        .offset = (uint32_t)offsetof(SettlPayDetailRsp__storage_, dudaoChargeConfig),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SettlPayDetailRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SettlPayDetailRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\027\002\013\000\004\n\000\005\010\000\006\t\000\007\010\000\010\007\000\t\000serviceList\000\n\000extra"
        "List\000\013\000adjustList\000\014\007\000\016\r\000\017\010\000\020\n\000\021\007\000\022\007\000\023\t\000\024"
        "\013\000\025\010\000\026\017\000\027\r\000\030\021\000\031\n\000\032\021\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetOrderPayDetailRsp

@implementation GetOrderPayDetailRsp

@dynamic hasOrder, order;
@dynamic prePayAmount;
@dynamic hasEntranceFee;
@dynamic entranceFee;
@dynamic needPay;
@dynamic usePurse;
@dynamic purse;
@dynamic expire;
@dynamic payHint;
@dynamic needNotice;
@dynamic extraAddr;
@dynamic extraAddrDesc;

typedef struct GetOrderPayDetailRsp__storage_ {
  uint32_t _has_storage_[1];
  OrderVO *order;
  NSString *prePayAmount;
  NSString *entranceFee;
  NSString *needPay;
  NSString *purse;
  NSString *payHint;
  NSString *extraAddr;
  NSString *extraAddrDesc;
  int64_t expire;
} GetOrderPayDetailRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "order",
        .dataTypeSpecific.className = GPBStringifySymbol(OrderVO),
        .number = GetOrderPayDetailRsp_FieldNumber_Order,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetOrderPayDetailRsp__storage_, order),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "prePayAmount",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderPayDetailRsp_FieldNumber_PrePayAmount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetOrderPayDetailRsp__storage_, prePayAmount),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "hasEntranceFee",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderPayDetailRsp_FieldNumber_HasEntranceFee,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "entranceFee",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderPayDetailRsp_FieldNumber_EntranceFee,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GetOrderPayDetailRsp__storage_, entranceFee),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "needPay",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderPayDetailRsp_FieldNumber_NeedPay,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(GetOrderPayDetailRsp__storage_, needPay),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "usePurse",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderPayDetailRsp_FieldNumber_UsePurse,
        .hasIndex = 6,
        .offset = 7,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "purse",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderPayDetailRsp_FieldNumber_Purse,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(GetOrderPayDetailRsp__storage_, purse),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "expire",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderPayDetailRsp_FieldNumber_Expire,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(GetOrderPayDetailRsp__storage_, expire),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "payHint",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderPayDetailRsp_FieldNumber_PayHint,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(GetOrderPayDetailRsp__storage_, payHint),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "needNotice",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderPayDetailRsp_FieldNumber_NeedNotice,
        .hasIndex = 11,
        .offset = 12,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "extraAddr",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderPayDetailRsp_FieldNumber_ExtraAddr,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(GetOrderPayDetailRsp__storage_, extraAddr),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "extraAddrDesc",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderPayDetailRsp_FieldNumber_ExtraAddrDesc,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(GetOrderPayDetailRsp__storage_, extraAddrDesc),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetOrderPayDetailRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetOrderPayDetailRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\t\002\014\000\003\016\000\004\013\000\005\007\000\006\010\000\n\007\000\013\n\000\014\t\000\r\r\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetOrderDetailRsp

@implementation GetOrderDetailRsp

@dynamic hasOrder, order;
@dynamic confirmCost;
@dynamic voListArray, voListArray_Count;
@dynamic expire;
@dynamic insureAccount;

typedef struct GetOrderDetailRsp__storage_ {
  uint32_t _has_storage_[1];
  OrderVO *order;
  NSString *confirmCost;
  NSMutableArray *voListArray;
  NSString *insureAccount;
  int64_t expire;
} GetOrderDetailRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "order",
        .dataTypeSpecific.className = GPBStringifySymbol(OrderVO),
        .number = GetOrderDetailRsp_FieldNumber_Order,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetOrderDetailRsp__storage_, order),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "confirmCost",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderDetailRsp_FieldNumber_ConfirmCost,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetOrderDetailRsp__storage_, confirmCost),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "voListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(SettlementVO),
        .number = GetOrderDetailRsp_FieldNumber_VoListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetOrderDetailRsp__storage_, voListArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "expire",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderDetailRsp_FieldNumber_Expire,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetOrderDetailRsp__storage_, expire),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "insureAccount",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderDetailRsp_FieldNumber_InsureAccount,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetOrderDetailRsp__storage_, insureAccount),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetOrderDetailRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetOrderDetailRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\003\013\000\004\000voList\000\036\r\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SetDefaultKinsReq

@implementation SetDefaultKinsReq

@dynamic kinsId;

typedef struct SetDefaultKinsReq__storage_ {
  uint32_t _has_storage_[1];
  uint64_t kinsId;
} SetDefaultKinsReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "kinsId",
        .dataTypeSpecific.className = NULL,
        .number = SetDefaultKinsReq_FieldNumber_KinsId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SetDefaultKinsReq__storage_, kinsId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SetDefaultKinsReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SetDefaultKinsReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AddInsureReq

@implementation AddInsureReq

@dynamic kinsId;
@dynamic addrId;
@dynamic healthCareNo;
@dynamic insureGetType;
@dynamic agencyName;
@dynamic agencyRelation;
@dynamic agencyPhone;
@dynamic userId;
@dynamic dudaoScoreAdl;
@dynamic applyTreatmentType;
@dynamic treatmentType;
@dynamic assessType;
@dynamic securityAssess;
@dynamic userStatusRemark;
@dynamic userSignPic;
@dynamic entrustPic;
@dynamic assessId;

typedef struct AddInsureReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t insureGetType;
  uint32_t dudaoScoreAdl;
  uint32_t applyTreatmentType;
  uint32_t treatmentType;
  uint32_t assessType;
  NSString *healthCareNo;
  NSString *agencyName;
  NSString *agencyRelation;
  NSString *agencyPhone;
  NSString *securityAssess;
  NSString *userStatusRemark;
  NSString *userSignPic;
  NSString *entrustPic;
  uint64_t kinsId;
  uint64_t addrId;
  uint64_t userId;
  uint64_t assessId;
} AddInsureReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "kinsId",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureReq_FieldNumber_KinsId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AddInsureReq__storage_, kinsId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "addrId",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureReq_FieldNumber_AddrId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AddInsureReq__storage_, addrId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "healthCareNo",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureReq_FieldNumber_HealthCareNo,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(AddInsureReq__storage_, healthCareNo),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "insureGetType",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureReq_FieldNumber_InsureGetType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(AddInsureReq__storage_, insureGetType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "agencyName",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureReq_FieldNumber_AgencyName,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(AddInsureReq__storage_, agencyName),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "agencyRelation",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureReq_FieldNumber_AgencyRelation,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(AddInsureReq__storage_, agencyRelation),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "agencyPhone",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureReq_FieldNumber_AgencyPhone,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(AddInsureReq__storage_, agencyPhone),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureReq_FieldNumber_UserId,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(AddInsureReq__storage_, userId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "dudaoScoreAdl",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureReq_FieldNumber_DudaoScoreAdl,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(AddInsureReq__storage_, dudaoScoreAdl),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "applyTreatmentType",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureReq_FieldNumber_ApplyTreatmentType,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(AddInsureReq__storage_, applyTreatmentType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "treatmentType",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureReq_FieldNumber_TreatmentType,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(AddInsureReq__storage_, treatmentType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "assessType",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureReq_FieldNumber_AssessType,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(AddInsureReq__storage_, assessType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "securityAssess",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureReq_FieldNumber_SecurityAssess,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(AddInsureReq__storage_, securityAssess),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userStatusRemark",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureReq_FieldNumber_UserStatusRemark,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(AddInsureReq__storage_, userStatusRemark),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userSignPic",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureReq_FieldNumber_UserSignPic,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(AddInsureReq__storage_, userSignPic),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "entrustPic",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureReq_FieldNumber_EntrustPic,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(AddInsureReq__storage_, entrustPic),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "assessId",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureReq_FieldNumber_AssessId,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(AddInsureReq__storage_, assessId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AddInsureReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AddInsureReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\021\001\006\000\002\006\000\003\013A\000\004\r\000\005\n\000\006\016\000\007\013\000\010\006\000\t\013b\000\n\022\000\013\r\000\014\n\000\r"
        "\016\000\016\020\000\017\013\000\020\n\000\021\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AddInsureRsp

@implementation AddInsureRsp

@dynamic insureNo;
@dynamic lastAssessTime;
@dynamic score;
@dynamic status;

typedef struct AddInsureRsp__storage_ {
  uint32_t _has_storage_[1];
  int32_t score;
  int32_t status;
  NSString *insureNo;
  NSString *lastAssessTime;
} AddInsureRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "insureNo",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureRsp_FieldNumber_InsureNo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AddInsureRsp__storage_, insureNo),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "lastAssessTime",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureRsp_FieldNumber_LastAssessTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AddInsureRsp__storage_, lastAssessTime),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "score",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureRsp_FieldNumber_Score,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(AddInsureRsp__storage_, score),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureRsp_FieldNumber_Status,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(AddInsureRsp__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AddInsureRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AddInsureRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\007A\000\002\016\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetInsureReq

@implementation GetInsureReq

@dynamic insureNo;
@dynamic assessType;

typedef struct GetInsureReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t assessType;
  NSString *insureNo;
} GetInsureReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "insureNo",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureReq_FieldNumber_InsureNo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetInsureReq__storage_, insureNo),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "assessType",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureReq_FieldNumber_AssessType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetInsureReq__storage_, assessType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetInsureReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetInsureReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\007A\000\002\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetInsureRsp

@implementation GetInsureRsp

@dynamic insureNo;
@dynamic createTime;
@dynamic kinsName;
@dynamic idcard;
@dynamic detailListArray, detailListArray_Count;
@dynamic depositFee;
@dynamic forceFlag;
@dynamic kfPhone;
@dynamic purse;
@dynamic usePurse;
@dynamic score;
@dynamic status;
@dynamic isAmentia;
@dynamic hsCasePresentation;
@dynamic medicalHistory;
@dynamic hsRemark;
@dynamic aptitudeTime;
@dynamic scoreAdl;

typedef struct GetInsureRsp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t forceFlag;
  int32_t score;
  uint32_t status;
  uint32_t isAmentia;
  int32_t scoreAdl;
  NSString *insureNo;
  NSString *createTime;
  NSString *kinsName;
  NSString *idcard;
  NSMutableArray *detailListArray;
  NSString *depositFee;
  NSString *kfPhone;
  NSString *purse;
  NSString *hsCasePresentation;
  NSString *medicalHistory;
  NSString *hsRemark;
  NSString *aptitudeTime;
} GetInsureRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "insureNo",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureRsp_FieldNumber_InsureNo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetInsureRsp__storage_, insureNo),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "createTime",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureRsp_FieldNumber_CreateTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetInsureRsp__storage_, createTime),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "kinsName",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureRsp_FieldNumber_KinsName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetInsureRsp__storage_, kinsName),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "idcard",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureRsp_FieldNumber_Idcard,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetInsureRsp__storage_, idcard),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "detailListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(InsureNODetailVO),
        .number = GetInsureRsp_FieldNumber_DetailListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetInsureRsp__storage_, detailListArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "depositFee",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureRsp_FieldNumber_DepositFee,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GetInsureRsp__storage_, depositFee),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "forceFlag",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureRsp_FieldNumber_ForceFlag,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(GetInsureRsp__storage_, forceFlag),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "kfPhone",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureRsp_FieldNumber_KfPhone,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(GetInsureRsp__storage_, kfPhone),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "purse",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureRsp_FieldNumber_Purse,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(GetInsureRsp__storage_, purse),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "usePurse",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureRsp_FieldNumber_UsePurse,
        .hasIndex = 8,
        .offset = 9,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "score",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureRsp_FieldNumber_Score,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(GetInsureRsp__storage_, score),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureRsp_FieldNumber_Status,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(GetInsureRsp__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "isAmentia",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureRsp_FieldNumber_IsAmentia,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(GetInsureRsp__storage_, isAmentia),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "hsCasePresentation",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureRsp_FieldNumber_HsCasePresentation,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(GetInsureRsp__storage_, hsCasePresentation),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "medicalHistory",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureRsp_FieldNumber_MedicalHistory,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(GetInsureRsp__storage_, medicalHistory),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "hsRemark",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureRsp_FieldNumber_HsRemark,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(GetInsureRsp__storage_, hsRemark),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "aptitudeTime",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureRsp_FieldNumber_AptitudeTime,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(GetInsureRsp__storage_, aptitudeTime),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "scoreAdl",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureRsp_FieldNumber_ScoreAdl,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(GetInsureRsp__storage_, scoreAdl),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetInsureRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetInsureRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\016\001\007A\000\002\n\000\003\010\000\005\000detailList\000\006\n\000\007\t\000\010\007\000\n\010\000\r\t\000\016"
        "\022\000\017\016\000\020\010\000\021\014\000\022\006b\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetInsureListRsp

@implementation GetInsureListRsp

@dynamic insureListArray, insureListArray_Count;

typedef struct GetInsureListRsp__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *insureListArray;
} GetInsureListRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "insureListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(InsureVO),
        .number = GetInsureListRsp_FieldNumber_InsureListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetInsureListRsp__storage_, insureListArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetInsureListRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetInsureListRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\000insureList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetMsgListRsp

@implementation GetMsgListRsp

@dynamic msgListArray, msgListArray_Count;

typedef struct GetMsgListRsp__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *msgListArray;
} GetMsgListRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "msgListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(SystemMessageVO),
        .number = GetMsgListRsp_FieldNumber_MsgListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetMsgListRsp__storage_, msgListArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetMsgListRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetMsgListRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\000msgList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetUserMsgByTypeReq

@implementation GetUserMsgByTypeReq

@dynamic msgType;
@dynamic pageNo;
@dynamic pageSize;

typedef struct GetUserMsgByTypeReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t msgType;
  uint32_t pageNo;
  uint32_t pageSize;
} GetUserMsgByTypeReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "msgType",
        .dataTypeSpecific.className = NULL,
        .number = GetUserMsgByTypeReq_FieldNumber_MsgType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetUserMsgByTypeReq__storage_, msgType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "pageNo",
        .dataTypeSpecific.className = NULL,
        .number = GetUserMsgByTypeReq_FieldNumber_PageNo,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetUserMsgByTypeReq__storage_, pageNo),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = GetUserMsgByTypeReq_FieldNumber_PageSize,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetUserMsgByTypeReq__storage_, pageSize),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetUserMsgByTypeReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetUserMsgByTypeReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\007\000\002\006\000\003\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetUserMsgByTypeRsp

@implementation GetUserMsgByTypeRsp

@dynamic msgListArray, msgListArray_Count;

typedef struct GetUserMsgByTypeRsp__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *msgListArray;
} GetUserMsgByTypeRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "msgListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(SystemMessage),
        .number = GetUserMsgByTypeRsp_FieldNumber_MsgListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetUserMsgByTypeRsp__storage_, msgListArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetUserMsgByTypeRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetUserMsgByTypeRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\000msgList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetInsureAccountDetailReq

@implementation GetInsureAccountDetailReq

@dynamic orderId;
@dynamic idcard;
@dynamic tabType;
@dynamic pageNo;
@dynamic pageSize;

typedef struct GetInsureAccountDetailReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t tabType;
  uint32_t pageNo;
  uint32_t pageSize;
  NSString *orderId;
  NSString *idcard;
} GetInsureAccountDetailReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureAccountDetailReq_FieldNumber_OrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetInsureAccountDetailReq__storage_, orderId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "idcard",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureAccountDetailReq_FieldNumber_Idcard,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetInsureAccountDetailReq__storage_, idcard),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "tabType",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureAccountDetailReq_FieldNumber_TabType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetInsureAccountDetailReq__storage_, tabType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "pageNo",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureAccountDetailReq_FieldNumber_PageNo,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetInsureAccountDetailReq__storage_, pageNo),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureAccountDetailReq_FieldNumber_PageSize,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GetInsureAccountDetailReq__storage_, pageSize),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetInsureAccountDetailReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetInsureAccountDetailReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001\007\000\003\007\000\004\006\000\005\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetInsureAccountDetailRsp

@implementation GetInsureAccountDetailRsp

@dynamic kinsName;
@dynamic orderNum;
@dynamic insureAccount;
@dynamic recordListArray, recordListArray_Count;

typedef struct GetInsureAccountDetailRsp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t orderNum;
  NSString *kinsName;
  NSString *insureAccount;
  NSMutableArray *recordListArray;
} GetInsureAccountDetailRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "kinsName",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureAccountDetailRsp_FieldNumber_KinsName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetInsureAccountDetailRsp__storage_, kinsName),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "orderNum",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureAccountDetailRsp_FieldNumber_OrderNum,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetInsureAccountDetailRsp__storage_, orderNum),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "insureAccount",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureAccountDetailRsp_FieldNumber_InsureAccount,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetInsureAccountDetailRsp__storage_, insureAccount),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "recordListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(InsureAccountRecordVO),
        .number = GetInsureAccountDetailRsp_FieldNumber_RecordListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetInsureAccountDetailRsp__storage_, recordListArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetInsureAccountDetailRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetInsureAccountDetailRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001\010\000\002\010\000\003\r\000\004\000recordList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetInsureAccountRsp

@implementation GetInsureAccountRsp

@dynamic recordListArray, recordListArray_Count;

typedef struct GetInsureAccountRsp__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *recordListArray;
} GetInsureAccountRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "recordListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(InsureAccountVO),
        .number = GetInsureAccountRsp_FieldNumber_RecordListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetInsureAccountRsp__storage_, recordListArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetInsureAccountRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetInsureAccountRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\004\000recordList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetScheduleListReq

@implementation GetScheduleListReq

@dynamic time;
@dynamic pageSize;
@dynamic pageNum;

typedef struct GetScheduleListReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t pageSize;
  uint32_t pageNum;
  NSString *time;
} GetScheduleListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "time",
        .dataTypeSpecific.className = NULL,
        .number = GetScheduleListReq_FieldNumber_Time,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetScheduleListReq__storage_, time),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = GetScheduleListReq_FieldNumber_PageSize,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetScheduleListReq__storage_, pageSize),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "pageNum",
        .dataTypeSpecific.className = NULL,
        .number = GetScheduleListReq_FieldNumber_PageNum,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetScheduleListReq__storage_, pageNum),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetScheduleListReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetScheduleListReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\002\010\000\003\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetScheduleListRsp

@implementation GetScheduleListRsp

@dynamic scheduleListArray, scheduleListArray_Count;
@dynamic count;

typedef struct GetScheduleListRsp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t count;
  NSMutableArray *scheduleListArray;
} GetScheduleListRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "scheduleListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ScheduleVO),
        .number = GetScheduleListRsp_FieldNumber_ScheduleListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetScheduleListRsp__storage_, scheduleListArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = GetScheduleListRsp_FieldNumber_Count,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetScheduleListRsp__storage_, count),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetScheduleListRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetScheduleListRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\000scheduleList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetAssessListReq

@implementation GetAssessListReq

@dynamic status;
@dynamic pageSize;
@dynamic pageNum;
@dynamic insureName;

typedef struct GetAssessListReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t status;
  uint32_t pageSize;
  uint32_t pageNum;
  NSString *insureName;
} GetAssessListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = GetAssessListReq_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetAssessListReq__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = GetAssessListReq_FieldNumber_PageSize,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetAssessListReq__storage_, pageSize),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "pageNum",
        .dataTypeSpecific.className = NULL,
        .number = GetAssessListReq_FieldNumber_PageNum,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetAssessListReq__storage_, pageNum),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "insureName",
        .dataTypeSpecific.className = NULL,
        .number = GetAssessListReq_FieldNumber_InsureName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetAssessListReq__storage_, insureName),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetAssessListReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetAssessListReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\002\010\000\003\007\000\004\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetAssessListRsp

@implementation GetAssessListRsp

@dynamic assessArray, assessArray_Count;
@dynamic count;

typedef struct GetAssessListRsp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t count;
  NSMutableArray *assessArray;
} GetAssessListRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "assessArray",
        .dataTypeSpecific.className = GPBStringifySymbol(AssignVO),
        .number = GetAssessListRsp_FieldNumber_AssessArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetAssessListRsp__storage_, assessArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = GetAssessListRsp_FieldNumber_Count,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetAssessListRsp__storage_, count),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetAssessListRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetAssessListRsp__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AddInsureAssessMMSEReq

@implementation AddInsureAssessMMSEReq

@dynamic insureNo;
@dynamic isCommit;
@dynamic composure;
@dynamic isMemory;
@dynamic isMind;
@dynamic isRecall;
@dynamic isRename;
@dynamic isRetell;
@dynamic isThree;
@dynamic isWrite;
@dynamic isRead;
@dynamic isStruct;
@dynamic memoryRemark;
@dynamic mindRemark;
@dynamic recallRemark;
@dynamic renameRemark;
@dynamic retellRemark;
@dynamic threeRemark;
@dynamic writeRemark;
@dynamic readRemark;
@dynamic structRemark;

typedef struct AddInsureAssessMMSEReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t isCommit;
  uint32_t isMemory;
  uint32_t isMind;
  uint32_t isRecall;
  uint32_t isRename;
  uint32_t isRetell;
  uint32_t isThree;
  uint32_t isWrite;
  uint32_t isRead;
  uint32_t isStruct;
  NSString *insureNo;
  NSString *composure;
  NSString *memoryRemark;
  NSString *mindRemark;
  NSString *recallRemark;
  NSString *renameRemark;
  NSString *retellRemark;
  NSString *threeRemark;
  NSString *writeRemark;
  NSString *readRemark;
  NSString *structRemark;
} AddInsureAssessMMSEReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "insureNo",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureAssessMMSEReq_FieldNumber_InsureNo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AddInsureAssessMMSEReq__storage_, insureNo),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isCommit",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureAssessMMSEReq_FieldNumber_IsCommit,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AddInsureAssessMMSEReq__storage_, isCommit),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "composure",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureAssessMMSEReq_FieldNumber_Composure,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(AddInsureAssessMMSEReq__storage_, composure),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isMemory",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureAssessMMSEReq_FieldNumber_IsMemory,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(AddInsureAssessMMSEReq__storage_, isMemory),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "isMind",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureAssessMMSEReq_FieldNumber_IsMind,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(AddInsureAssessMMSEReq__storage_, isMind),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "isRecall",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureAssessMMSEReq_FieldNumber_IsRecall,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(AddInsureAssessMMSEReq__storage_, isRecall),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "isRename",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureAssessMMSEReq_FieldNumber_IsRename,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(AddInsureAssessMMSEReq__storage_, isRename),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "isRetell",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureAssessMMSEReq_FieldNumber_IsRetell,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(AddInsureAssessMMSEReq__storage_, isRetell),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "isThree",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureAssessMMSEReq_FieldNumber_IsThree,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(AddInsureAssessMMSEReq__storage_, isThree),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "isWrite",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureAssessMMSEReq_FieldNumber_IsWrite,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(AddInsureAssessMMSEReq__storage_, isWrite),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "isRead",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureAssessMMSEReq_FieldNumber_IsRead,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(AddInsureAssessMMSEReq__storage_, isRead),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "isStruct",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureAssessMMSEReq_FieldNumber_IsStruct,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(AddInsureAssessMMSEReq__storage_, isStruct),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "memoryRemark",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureAssessMMSEReq_FieldNumber_MemoryRemark,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(AddInsureAssessMMSEReq__storage_, memoryRemark),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "mindRemark",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureAssessMMSEReq_FieldNumber_MindRemark,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(AddInsureAssessMMSEReq__storage_, mindRemark),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "recallRemark",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureAssessMMSEReq_FieldNumber_RecallRemark,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(AddInsureAssessMMSEReq__storage_, recallRemark),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "renameRemark",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureAssessMMSEReq_FieldNumber_RenameRemark,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(AddInsureAssessMMSEReq__storage_, renameRemark),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "retellRemark",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureAssessMMSEReq_FieldNumber_RetellRemark,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(AddInsureAssessMMSEReq__storage_, retellRemark),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "threeRemark",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureAssessMMSEReq_FieldNumber_ThreeRemark,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(AddInsureAssessMMSEReq__storage_, threeRemark),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "writeRemark",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureAssessMMSEReq_FieldNumber_WriteRemark,
        .hasIndex = 18,
        .offset = (uint32_t)offsetof(AddInsureAssessMMSEReq__storage_, writeRemark),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "readRemark",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureAssessMMSEReq_FieldNumber_ReadRemark,
        .hasIndex = 19,
        .offset = (uint32_t)offsetof(AddInsureAssessMMSEReq__storage_, readRemark),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "structRemark",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureAssessMMSEReq_FieldNumber_StructRemark,
        .hasIndex = 20,
        .offset = (uint32_t)offsetof(AddInsureAssessMMSEReq__storage_, structRemark),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AddInsureAssessMMSEReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AddInsureAssessMMSEReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\024\001\007A\000\002\010\000\010\010\000\t\006\000\n\010\000\013\010\000\014\010\000\r\007\000\016\007\000\017\006\000\020\010\000\021\014\000\022\n"
        "\000\023\014\000\024\014\000\025\014\000\026\013\000\027\013\000\030\n\000\031\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AddInsureAssessMMSERsp

@implementation AddInsureAssessMMSERsp

@dynamic insureNo;
@dynamic score;

typedef struct AddInsureAssessMMSERsp__storage_ {
  uint32_t _has_storage_[1];
  NSString *insureNo;
  uint64_t score;
} AddInsureAssessMMSERsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "insureNo",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureAssessMMSERsp_FieldNumber_InsureNo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AddInsureAssessMMSERsp__storage_, insureNo),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "score",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureAssessMMSERsp_FieldNumber_Score,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AddInsureAssessMMSERsp__storage_, score),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AddInsureAssessMMSERsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AddInsureAssessMMSERsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\007A\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AddInsureAssessADLReq

@implementation AddInsureAssessADLReq

@dynamic insureNo;
@dynamic isCommit;
@dynamic isEat;
@dynamic isWater;
@dynamic isFace;
@dynamic isWear;
@dynamic isFaec;
@dynamic isPee;
@dynamic isToilet;
@dynamic isCarry;
@dynamic isWalk;
@dynamic isStair;
@dynamic eatRemark;
@dynamic waterRemark;
@dynamic faceRemark;
@dynamic wearRemark;
@dynamic faecRemark;
@dynamic peeRemark;
@dynamic toiletRemark;
@dynamic carryRemark;
@dynamic walkRemark;
@dynamic stairRemark;
@dynamic isSelf;

typedef struct AddInsureAssessADLReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t isCommit;
  uint32_t isEat;
  uint32_t isWater;
  uint32_t isFace;
  uint32_t isWear;
  uint32_t isFaec;
  uint32_t isPee;
  uint32_t isToilet;
  uint32_t isCarry;
  uint32_t isWalk;
  uint32_t isStair;
  uint32_t isSelf;
  NSString *insureNo;
  NSString *eatRemark;
  NSString *waterRemark;
  NSString *faceRemark;
  NSString *wearRemark;
  NSString *faecRemark;
  NSString *peeRemark;
  NSString *toiletRemark;
  NSString *carryRemark;
  NSString *walkRemark;
  NSString *stairRemark;
} AddInsureAssessADLReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "insureNo",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureAssessADLReq_FieldNumber_InsureNo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AddInsureAssessADLReq__storage_, insureNo),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isCommit",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureAssessADLReq_FieldNumber_IsCommit,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AddInsureAssessADLReq__storage_, isCommit),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "isEat",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureAssessADLReq_FieldNumber_IsEat,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(AddInsureAssessADLReq__storage_, isEat),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "isWater",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureAssessADLReq_FieldNumber_IsWater,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(AddInsureAssessADLReq__storage_, isWater),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "isFace",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureAssessADLReq_FieldNumber_IsFace,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(AddInsureAssessADLReq__storage_, isFace),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "isWear",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureAssessADLReq_FieldNumber_IsWear,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(AddInsureAssessADLReq__storage_, isWear),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "isFaec",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureAssessADLReq_FieldNumber_IsFaec,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(AddInsureAssessADLReq__storage_, isFaec),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "isPee",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureAssessADLReq_FieldNumber_IsPee,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(AddInsureAssessADLReq__storage_, isPee),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "isToilet",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureAssessADLReq_FieldNumber_IsToilet,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(AddInsureAssessADLReq__storage_, isToilet),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "isCarry",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureAssessADLReq_FieldNumber_IsCarry,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(AddInsureAssessADLReq__storage_, isCarry),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "isWalk",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureAssessADLReq_FieldNumber_IsWalk,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(AddInsureAssessADLReq__storage_, isWalk),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "isStair",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureAssessADLReq_FieldNumber_IsStair,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(AddInsureAssessADLReq__storage_, isStair),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "eatRemark",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureAssessADLReq_FieldNumber_EatRemark,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(AddInsureAssessADLReq__storage_, eatRemark),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "waterRemark",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureAssessADLReq_FieldNumber_WaterRemark,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(AddInsureAssessADLReq__storage_, waterRemark),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "faceRemark",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureAssessADLReq_FieldNumber_FaceRemark,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(AddInsureAssessADLReq__storage_, faceRemark),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "wearRemark",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureAssessADLReq_FieldNumber_WearRemark,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(AddInsureAssessADLReq__storage_, wearRemark),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "faecRemark",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureAssessADLReq_FieldNumber_FaecRemark,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(AddInsureAssessADLReq__storage_, faecRemark),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "peeRemark",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureAssessADLReq_FieldNumber_PeeRemark,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(AddInsureAssessADLReq__storage_, peeRemark),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "toiletRemark",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureAssessADLReq_FieldNumber_ToiletRemark,
        .hasIndex = 18,
        .offset = (uint32_t)offsetof(AddInsureAssessADLReq__storage_, toiletRemark),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "carryRemark",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureAssessADLReq_FieldNumber_CarryRemark,
        .hasIndex = 19,
        .offset = (uint32_t)offsetof(AddInsureAssessADLReq__storage_, carryRemark),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "walkRemark",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureAssessADLReq_FieldNumber_WalkRemark,
        .hasIndex = 20,
        .offset = (uint32_t)offsetof(AddInsureAssessADLReq__storage_, walkRemark),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "stairRemark",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureAssessADLReq_FieldNumber_StairRemark,
        .hasIndex = 21,
        .offset = (uint32_t)offsetof(AddInsureAssessADLReq__storage_, stairRemark),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isSelf",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureAssessADLReq_FieldNumber_IsSelf,
        .hasIndex = 22,
        .offset = (uint32_t)offsetof(AddInsureAssessADLReq__storage_, isSelf),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AddInsureAssessADLReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AddInsureAssessADLReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\027\001\007A\000\002\010\000\003\005\000\004\007\000\005\006\000\006\006\000\007\006\000\010\005\000\t\010\000\n\007\000\013\006\000\014\007\000\r\t"
        "\000\016\013\000\017\n\000\020\n\000\021\n\000\022\t\000\023\014\000\024\013\000\025\n\000\026\013\000\027\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AddInsureAssessADLRsp

@implementation AddInsureAssessADLRsp

@dynamic insureNo;
@dynamic score;

typedef struct AddInsureAssessADLRsp__storage_ {
  uint32_t _has_storage_[1];
  NSString *insureNo;
  uint64_t score;
} AddInsureAssessADLRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "insureNo",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureAssessADLRsp_FieldNumber_InsureNo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AddInsureAssessADLRsp__storage_, insureNo),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "score",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureAssessADLRsp_FieldNumber_Score,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AddInsureAssessADLRsp__storage_, score),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AddInsureAssessADLRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AddInsureAssessADLRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\007A\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AddInsureAssessMedicalReq

@implementation AddInsureAssessMedicalReq

@dynamic insureNo;
@dynamic isCommit;
@dynamic medicalListArray, medicalListArray_Count;

typedef struct AddInsureAssessMedicalReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t isCommit;
  NSString *insureNo;
  NSMutableArray *medicalListArray;
} AddInsureAssessMedicalReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "insureNo",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureAssessMedicalReq_FieldNumber_InsureNo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AddInsureAssessMedicalReq__storage_, insureNo),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isCommit",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureAssessMedicalReq_FieldNumber_IsCommit,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AddInsureAssessMedicalReq__storage_, isCommit),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "medicalListArray",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureAssessMedicalReq_FieldNumber_MedicalListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(AddInsureAssessMedicalReq__storage_, medicalListArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AddInsureAssessMedicalReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AddInsureAssessMedicalReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\007A\000\002\010\000\003\000medicalList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AddInsureAssessMedicalRsp

@implementation AddInsureAssessMedicalRsp

@dynamic insureNo;
@dynamic medicalList;

typedef struct AddInsureAssessMedicalRsp__storage_ {
  uint32_t _has_storage_[1];
  NSString *insureNo;
  NSString *medicalList;
} AddInsureAssessMedicalRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "insureNo",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureAssessMedicalRsp_FieldNumber_InsureNo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AddInsureAssessMedicalRsp__storage_, insureNo),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "medicalList",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureAssessMedicalRsp_FieldNumber_MedicalList,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AddInsureAssessMedicalRsp__storage_, medicalList),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AddInsureAssessMedicalRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AddInsureAssessMedicalRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\007A\000\002\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetInsureAssessADLlRsp

@implementation GetInsureAssessADLlRsp

@dynamic insureNo;
@dynamic judge;
@dynamic timeSort;
@dynamic id_p;
@dynamic createStaffId;
@dynamic createStaffName;
@dynamic idcard;
@dynamic userId;
@dynamic assessType;
@dynamic createTime;
@dynamic hasEat, eat;
@dynamic hasWater, water;
@dynamic hasFace, face;
@dynamic hasWear, wear;
@dynamic hasFaec, faec;
@dynamic hasPee, pee;
@dynamic hasToilet, toilet;
@dynamic hasCarry, carry;
@dynamic hasWalk, walk;
@dynamic hasStair, stair;
@dynamic score;

typedef struct GetInsureAssessADLlRsp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t judge;
  NSString *insureNo;
  NSString *createStaffName;
  NSString *idcard;
  NSString *createTime;
  AdlAssessItem *eat;
  AdlAssessItem *water;
  AdlAssessItem *face;
  AdlAssessItem *wear;
  AdlAssessItem *faec;
  AdlAssessItem *pee;
  AdlAssessItem *toilet;
  AdlAssessItem *carry;
  AdlAssessItem *walk;
  AdlAssessItem *stair;
  uint64_t timeSort;
  uint64_t id_p;
  uint64_t createStaffId;
  uint64_t userId;
  uint64_t assessType;
  uint64_t score;
} GetInsureAssessADLlRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "insureNo",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureAssessADLlRsp_FieldNumber_InsureNo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetInsureAssessADLlRsp__storage_, insureNo),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "judge",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureAssessADLlRsp_FieldNumber_Judge,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetInsureAssessADLlRsp__storage_, judge),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "timeSort",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureAssessADLlRsp_FieldNumber_TimeSort,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetInsureAssessADLlRsp__storage_, timeSort),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureAssessADLlRsp_FieldNumber_Id_p,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetInsureAssessADLlRsp__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "createStaffId",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureAssessADLlRsp_FieldNumber_CreateStaffId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GetInsureAssessADLlRsp__storage_, createStaffId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "createStaffName",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureAssessADLlRsp_FieldNumber_CreateStaffName,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(GetInsureAssessADLlRsp__storage_, createStaffName),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "idcard",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureAssessADLlRsp_FieldNumber_Idcard,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(GetInsureAssessADLlRsp__storage_, idcard),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureAssessADLlRsp_FieldNumber_UserId,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(GetInsureAssessADLlRsp__storage_, userId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "assessType",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureAssessADLlRsp_FieldNumber_AssessType,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(GetInsureAssessADLlRsp__storage_, assessType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "createTime",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureAssessADLlRsp_FieldNumber_CreateTime,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(GetInsureAssessADLlRsp__storage_, createTime),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "eat",
        .dataTypeSpecific.className = GPBStringifySymbol(AdlAssessItem),
        .number = GetInsureAssessADLlRsp_FieldNumber_Eat,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(GetInsureAssessADLlRsp__storage_, eat),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "water",
        .dataTypeSpecific.className = GPBStringifySymbol(AdlAssessItem),
        .number = GetInsureAssessADLlRsp_FieldNumber_Water,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(GetInsureAssessADLlRsp__storage_, water),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "face",
        .dataTypeSpecific.className = GPBStringifySymbol(AdlAssessItem),
        .number = GetInsureAssessADLlRsp_FieldNumber_Face,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(GetInsureAssessADLlRsp__storage_, face),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "wear",
        .dataTypeSpecific.className = GPBStringifySymbol(AdlAssessItem),
        .number = GetInsureAssessADLlRsp_FieldNumber_Wear,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(GetInsureAssessADLlRsp__storage_, wear),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "faec",
        .dataTypeSpecific.className = GPBStringifySymbol(AdlAssessItem),
        .number = GetInsureAssessADLlRsp_FieldNumber_Faec,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(GetInsureAssessADLlRsp__storage_, faec),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "pee",
        .dataTypeSpecific.className = GPBStringifySymbol(AdlAssessItem),
        .number = GetInsureAssessADLlRsp_FieldNumber_Pee,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(GetInsureAssessADLlRsp__storage_, pee),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "toilet",
        .dataTypeSpecific.className = GPBStringifySymbol(AdlAssessItem),
        .number = GetInsureAssessADLlRsp_FieldNumber_Toilet,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(GetInsureAssessADLlRsp__storage_, toilet),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "carry",
        .dataTypeSpecific.className = GPBStringifySymbol(AdlAssessItem),
        .number = GetInsureAssessADLlRsp_FieldNumber_Carry,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(GetInsureAssessADLlRsp__storage_, carry),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "walk",
        .dataTypeSpecific.className = GPBStringifySymbol(AdlAssessItem),
        .number = GetInsureAssessADLlRsp_FieldNumber_Walk,
        .hasIndex = 18,
        .offset = (uint32_t)offsetof(GetInsureAssessADLlRsp__storage_, walk),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "stair",
        .dataTypeSpecific.className = GPBStringifySymbol(AdlAssessItem),
        .number = GetInsureAssessADLlRsp_FieldNumber_Stair,
        .hasIndex = 19,
        .offset = (uint32_t)offsetof(GetInsureAssessADLlRsp__storage_, stair),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "score",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureAssessADLlRsp_FieldNumber_Score,
        .hasIndex = 20,
        .offset = (uint32_t)offsetof(GetInsureAssessADLlRsp__storage_, score),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetInsureAssessADLlRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetInsureAssessADLlRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\007\001\007A\000\003\010\000\005\r\000\006\017\000\010\006\000\t\n\000\n\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetInsureAssessMMSERsp

@implementation GetInsureAssessMMSERsp

@dynamic hasMmse, mmse;

typedef struct GetInsureAssessMMSERsp__storage_ {
  uint32_t _has_storage_[1];
  InsureAssessMMSE *mmse;
} GetInsureAssessMMSERsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "mmse",
        .dataTypeSpecific.className = GPBStringifySymbol(InsureAssessMMSE),
        .number = GetInsureAssessMMSERsp_FieldNumber_Mmse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetInsureAssessMMSERsp__storage_, mmse),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetInsureAssessMMSERsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetInsureAssessMMSERsp__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SaveInsureAssessReq

@implementation SaveInsureAssessReq

@dynamic insureNo;
@dynamic height;
@dynamic weight;
@dynamic healthCareNo;
@dynamic medicareNo;
@dynamic appointTime;
@dynamic hsRemark;

typedef struct SaveInsureAssessReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *insureNo;
  NSString *height;
  NSString *weight;
  NSString *healthCareNo;
  NSString *medicareNo;
  NSString *appointTime;
  NSString *hsRemark;
} SaveInsureAssessReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "insureNo",
        .dataTypeSpecific.className = NULL,
        .number = SaveInsureAssessReq_FieldNumber_InsureNo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SaveInsureAssessReq__storage_, insureNo),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "height",
        .dataTypeSpecific.className = NULL,
        .number = SaveInsureAssessReq_FieldNumber_Height,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SaveInsureAssessReq__storage_, height),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "weight",
        .dataTypeSpecific.className = NULL,
        .number = SaveInsureAssessReq_FieldNumber_Weight,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SaveInsureAssessReq__storage_, weight),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "healthCareNo",
        .dataTypeSpecific.className = NULL,
        .number = SaveInsureAssessReq_FieldNumber_HealthCareNo,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SaveInsureAssessReq__storage_, healthCareNo),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "medicareNo",
        .dataTypeSpecific.className = NULL,
        .number = SaveInsureAssessReq_FieldNumber_MedicareNo,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SaveInsureAssessReq__storage_, medicareNo),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "appointTime",
        .dataTypeSpecific.className = NULL,
        .number = SaveInsureAssessReq_FieldNumber_AppointTime,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SaveInsureAssessReq__storage_, appointTime),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "hsRemark",
        .dataTypeSpecific.className = NULL,
        .number = SaveInsureAssessReq_FieldNumber_HsRemark,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(SaveInsureAssessReq__storage_, hsRemark),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SaveInsureAssessReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SaveInsureAssessReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001\007A\000\004\013A\000\005\tA\000\006\013\000\007\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetInsureNoRsp

@implementation GetInsureNoRsp

@dynamic hasInsureModel, insureModel;
@dynamic rejectDesc;
@dynamic appointTimeStr;
@dynamic assessTimeStr;
@dynamic insureStatus;
@dynamic againStatus;
@dynamic orderTimeStr;

typedef struct GetInsureNoRsp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t insureStatus;
  uint32_t againStatus;
  InsureNOModel *insureModel;
  NSString *rejectDesc;
  NSString *appointTimeStr;
  NSString *assessTimeStr;
  NSString *orderTimeStr;
} GetInsureNoRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "insureModel",
        .dataTypeSpecific.className = GPBStringifySymbol(InsureNOModel),
        .number = GetInsureNoRsp_FieldNumber_InsureModel,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetInsureNoRsp__storage_, insureModel),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "rejectDesc",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureNoRsp_FieldNumber_RejectDesc,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetInsureNoRsp__storage_, rejectDesc),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "appointTimeStr",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureNoRsp_FieldNumber_AppointTimeStr,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetInsureNoRsp__storage_, appointTimeStr),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "assessTimeStr",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureNoRsp_FieldNumber_AssessTimeStr,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetInsureNoRsp__storage_, assessTimeStr),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "insureStatus",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureNoRsp_FieldNumber_InsureStatus,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GetInsureNoRsp__storage_, insureStatus),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "againStatus",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureNoRsp_FieldNumber_AgainStatus,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(GetInsureNoRsp__storage_, againStatus),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "orderTimeStr",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureNoRsp_FieldNumber_OrderTimeStr,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(GetInsureNoRsp__storage_, orderTimeStr),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetInsureNoRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetInsureNoRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\007\001\013\000\002\n\000\003\016\000\004\r\000\005\014\000\006\013\000\007\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetSaasOrderListReq

@implementation GetSaasOrderListReq

@dynamic nameOrderId;
@dynamic tabType;
@dynamic pageSize;
@dynamic pageNum;

typedef struct GetSaasOrderListReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t tabType;
  uint32_t pageSize;
  uint32_t pageNum;
  NSString *nameOrderId;
} GetSaasOrderListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "nameOrderId",
        .dataTypeSpecific.className = NULL,
        .number = GetSaasOrderListReq_FieldNumber_NameOrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetSaasOrderListReq__storage_, nameOrderId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "tabType",
        .dataTypeSpecific.className = NULL,
        .number = GetSaasOrderListReq_FieldNumber_TabType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetSaasOrderListReq__storage_, tabType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = GetSaasOrderListReq_FieldNumber_PageSize,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetSaasOrderListReq__storage_, pageSize),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "pageNum",
        .dataTypeSpecific.className = NULL,
        .number = GetSaasOrderListReq_FieldNumber_PageNum,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetSaasOrderListReq__storage_, pageNum),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetSaasOrderListReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetSaasOrderListReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001\013\000\002\007\000\003\010\000\004\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetSaasOrderListRsp

@implementation GetSaasOrderListRsp

@dynamic orderArray, orderArray_Count;
@dynamic count;

typedef struct GetSaasOrderListRsp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t count;
  NSMutableArray *orderArray;
} GetSaasOrderListRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderArray",
        .dataTypeSpecific.className = GPBStringifySymbol(OrderSAAS),
        .number = GetSaasOrderListRsp_FieldNumber_OrderArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetSaasOrderListRsp__storage_, orderArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = GetSaasOrderListRsp_FieldNumber_Count,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetSaasOrderListRsp__storage_, count),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetSaasOrderListRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetSaasOrderListRsp__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - InsureAssessFirstReq

@implementation InsureAssessFirstReq

@dynamic insureNo;
@dynamic status;
@dynamic rejectDesc;
@dynamic remark;
@dynamic payType;

typedef struct InsureAssessFirstReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t status;
  uint32_t payType;
  NSString *insureNo;
  NSString *rejectDesc;
  NSString *remark;
} InsureAssessFirstReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "insureNo",
        .dataTypeSpecific.className = NULL,
        .number = InsureAssessFirstReq_FieldNumber_InsureNo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(InsureAssessFirstReq__storage_, insureNo),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = InsureAssessFirstReq_FieldNumber_Status,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(InsureAssessFirstReq__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "rejectDesc",
        .dataTypeSpecific.className = NULL,
        .number = InsureAssessFirstReq_FieldNumber_RejectDesc,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(InsureAssessFirstReq__storage_, rejectDesc),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "remark",
        .dataTypeSpecific.className = NULL,
        .number = InsureAssessFirstReq_FieldNumber_Remark,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(InsureAssessFirstReq__storage_, remark),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "payType",
        .dataTypeSpecific.className = NULL,
        .number = InsureAssessFirstReq_FieldNumber_PayType,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(InsureAssessFirstReq__storage_, payType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[InsureAssessFirstReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(InsureAssessFirstReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\007A\000\003\n\000\005\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SignUserReq

@implementation SignUserReq

@dynamic phone;
@dynamic code;

typedef struct SignUserReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *phone;
  NSString *code;
} SignUserReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "phone",
        .dataTypeSpecific.className = NULL,
        .number = SignUserReq_FieldNumber_Phone,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SignUserReq__storage_, phone),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "code",
        .dataTypeSpecific.className = NULL,
        .number = SignUserReq_FieldNumber_Code,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SignUserReq__storage_, code),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SignUserReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SignUserReq__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SignUserRsp

@implementation SignUserRsp

@dynamic userId;
@dynamic isComplete;

typedef struct SignUserRsp__storage_ {
  uint32_t _has_storage_[1];
  uint64_t userId;
} SignUserRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = SignUserRsp_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SignUserRsp__storage_, userId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "isComplete",
        .dataTypeSpecific.className = NULL,
        .number = SignUserRsp_FieldNumber_IsComplete,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SignUserRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SignUserRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\006\000\002\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MedicalRsp

@implementation MedicalRsp

@dynamic medicalArray, medicalArray_Count;

typedef struct MedicalRsp__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *medicalArray;
} MedicalRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "medicalArray",
        .dataTypeSpecific.className = NULL,
        .number = MedicalRsp_FieldNumber_MedicalArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(MedicalRsp__storage_, medicalArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MedicalRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MedicalRsp__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OrderSAAS

@implementation OrderSAAS

@dynamic hasOrders, orders;
@dynamic createTimestr;
@dynamic createTime;
@dynamic orderStatus;
@dynamic orderStatusStr;
@dynamic settleItemStatus;

typedef struct OrderSAAS__storage_ {
  uint32_t _has_storage_[1];
  uint32_t orderStatus;
  uint32_t settleItemStatus;
  Order *orders;
  NSString *createTimestr;
  NSString *orderStatusStr;
  uint64_t createTime;
} OrderSAAS__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orders",
        .dataTypeSpecific.className = GPBStringifySymbol(Order),
        .number = OrderSAAS_FieldNumber_Orders,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OrderSAAS__storage_, orders),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "createTimestr",
        .dataTypeSpecific.className = NULL,
        .number = OrderSAAS_FieldNumber_CreateTimestr,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OrderSAAS__storage_, createTimestr),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "createTime",
        .dataTypeSpecific.className = NULL,
        .number = OrderSAAS_FieldNumber_CreateTime,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OrderSAAS__storage_, createTime),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "orderStatus",
        .dataTypeSpecific.className = NULL,
        .number = OrderSAAS_FieldNumber_OrderStatus,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(OrderSAAS__storage_, orderStatus),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "orderStatusStr",
        .dataTypeSpecific.className = NULL,
        .number = OrderSAAS_FieldNumber_OrderStatusStr,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(OrderSAAS__storage_, orderStatusStr),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "settleItemStatus",
        .dataTypeSpecific.className = NULL,
        .number = OrderSAAS_FieldNumber_SettleItemStatus,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(OrderSAAS__storage_, settleItemStatus),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OrderSAAS class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OrderSAAS__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\002\r\000\003\n\000\004\013\000\005\016\000\006\020\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetOrderInfoReq

@implementation GetOrderInfoReq

@dynamic orderId;

typedef struct GetOrderInfoReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *orderId;
} GetOrderInfoReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderInfoReq_FieldNumber_OrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetOrderInfoReq__storage_, orderId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetOrderInfoReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetOrderInfoReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetOrderInfoRsp

@implementation GetOrderInfoRsp

@dynamic hasOrderVo, orderVo;
@dynamic priceNameArray, priceNameArray_Count;
@dynamic orderItemArray, orderItemArray_Count;
@dynamic insureItemArray, insureItemArray_Count;
@dynamic confirmCost;
@dynamic expire;
@dynamic insureAccount;
@dynamic workType;
@dynamic isItem;
@dynamic isfinish;
@dynamic dudaoChargeConfig;
@dynamic needRefundPrepay;
@dynamic needRefundExtra;
@dynamic cashPayFlag;
@dynamic subjoinFeeStr;
@dynamic subjoinNewNum;
@dynamic accompanyFee;
@dynamic isNumberPrc;
@dynamic isNumberNight;
@dynamic numberNight;
@dynamic returnType;
@dynamic returnFee;
@dynamic returnFeeStr;
@dynamic canStartService;
@dynamic canRefundExtraFee;
@dynamic showPhone;
@dynamic isUpdateHg;
@dynamic isSignPicRole;
@dynamic isSignPic;
@dynamic yesterdayPrcnum;
@dynamic isUpdateYesterday;
@dynamic isAddYesterday;
@dynamic isUpdateBedNo;
@dynamic isHgPay;
@dynamic hangServiceDateListArray, hangServiceDateListArray_Count;
@dynamic isZzorder;

typedef struct GetOrderInfoRsp__storage_ {
  uint32_t _has_storage_[2];
  uint32_t workType;
  uint32_t isItem;
  int32_t isNumberPrc;
  int32_t isNumberNight;
  uint32_t returnType;
  OrderVO *orderVo;
  NSMutableArray *priceNameArray;
  NSMutableArray *orderItemArray;
  NSMutableArray *insureItemArray;
  NSString *confirmCost;
  NSString *insureAccount;
  NSString *subjoinFeeStr;
  NSString *accompanyFee;
  NSString *returnFeeStr;
  NSString *yesterdayPrcnum;
  NSMutableArray *hangServiceDateListArray;
  int64_t expire;
  int64_t subjoinNewNum;
  uint64_t numberNight;
  int64_t returnFee;
} GetOrderInfoRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderVo",
        .dataTypeSpecific.className = GPBStringifySymbol(OrderVO),
        .number = GetOrderInfoRsp_FieldNumber_OrderVo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetOrderInfoRsp__storage_, orderVo),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "priceNameArray",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderInfoRsp_FieldNumber_PriceNameArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetOrderInfoRsp__storage_, priceNameArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "orderItemArray",
        .dataTypeSpecific.className = GPBStringifySymbol(SettlementVO),
        .number = GetOrderInfoRsp_FieldNumber_OrderItemArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetOrderInfoRsp__storage_, orderItemArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "insureItemArray",
        .dataTypeSpecific.className = GPBStringifySymbol(OrderItemVO),
        .number = GetOrderInfoRsp_FieldNumber_InsureItemArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetOrderInfoRsp__storage_, insureItemArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "confirmCost",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderInfoRsp_FieldNumber_ConfirmCost,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetOrderInfoRsp__storage_, confirmCost),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "expire",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderInfoRsp_FieldNumber_Expire,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetOrderInfoRsp__storage_, expire),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "insureAccount",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderInfoRsp_FieldNumber_InsureAccount,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetOrderInfoRsp__storage_, insureAccount),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "workType",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderInfoRsp_FieldNumber_WorkType,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GetOrderInfoRsp__storage_, workType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "isItem",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderInfoRsp_FieldNumber_IsItem,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(GetOrderInfoRsp__storage_, isItem),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "isfinish",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderInfoRsp_FieldNumber_Isfinish,
        .hasIndex = 6,
        .offset = 7,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "dudaoChargeConfig",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderInfoRsp_FieldNumber_DudaoChargeConfig,
        .hasIndex = 8,
        .offset = 9,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "needRefundPrepay",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderInfoRsp_FieldNumber_NeedRefundPrepay,
        .hasIndex = 10,
        .offset = 11,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "needRefundExtra",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderInfoRsp_FieldNumber_NeedRefundExtra,
        .hasIndex = 12,
        .offset = 13,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "cashPayFlag",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderInfoRsp_FieldNumber_CashPayFlag,
        .hasIndex = 14,
        .offset = 15,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "subjoinFeeStr",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderInfoRsp_FieldNumber_SubjoinFeeStr,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(GetOrderInfoRsp__storage_, subjoinFeeStr),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "subjoinNewNum",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderInfoRsp_FieldNumber_SubjoinNewNum,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(GetOrderInfoRsp__storage_, subjoinNewNum),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "accompanyFee",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderInfoRsp_FieldNumber_AccompanyFee,
        .hasIndex = 18,
        .offset = (uint32_t)offsetof(GetOrderInfoRsp__storage_, accompanyFee),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isNumberPrc",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderInfoRsp_FieldNumber_IsNumberPrc,
        .hasIndex = 19,
        .offset = (uint32_t)offsetof(GetOrderInfoRsp__storage_, isNumberPrc),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "isNumberNight",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderInfoRsp_FieldNumber_IsNumberNight,
        .hasIndex = 20,
        .offset = (uint32_t)offsetof(GetOrderInfoRsp__storage_, isNumberNight),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "numberNight",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderInfoRsp_FieldNumber_NumberNight,
        .hasIndex = 21,
        .offset = (uint32_t)offsetof(GetOrderInfoRsp__storage_, numberNight),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "returnType",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderInfoRsp_FieldNumber_ReturnType,
        .hasIndex = 22,
        .offset = (uint32_t)offsetof(GetOrderInfoRsp__storage_, returnType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "returnFee",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderInfoRsp_FieldNumber_ReturnFee,
        .hasIndex = 23,
        .offset = (uint32_t)offsetof(GetOrderInfoRsp__storage_, returnFee),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "returnFeeStr",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderInfoRsp_FieldNumber_ReturnFeeStr,
        .hasIndex = 24,
        .offset = (uint32_t)offsetof(GetOrderInfoRsp__storage_, returnFeeStr),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "canStartService",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderInfoRsp_FieldNumber_CanStartService,
        .hasIndex = 25,
        .offset = 26,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "canRefundExtraFee",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderInfoRsp_FieldNumber_CanRefundExtraFee,
        .hasIndex = 27,
        .offset = 28,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "showPhone",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderInfoRsp_FieldNumber_ShowPhone,
        .hasIndex = 29,
        .offset = 30,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isUpdateHg",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderInfoRsp_FieldNumber_IsUpdateHg,
        .hasIndex = 31,
        .offset = 32,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isSignPicRole",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderInfoRsp_FieldNumber_IsSignPicRole,
        .hasIndex = 33,
        .offset = 34,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isSignPic",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderInfoRsp_FieldNumber_IsSignPic,
        .hasIndex = 35,
        .offset = 36,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "yesterdayPrcnum",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderInfoRsp_FieldNumber_YesterdayPrcnum,
        .hasIndex = 37,
        .offset = (uint32_t)offsetof(GetOrderInfoRsp__storage_, yesterdayPrcnum),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isUpdateYesterday",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderInfoRsp_FieldNumber_IsUpdateYesterday,
        .hasIndex = 38,
        .offset = 39,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isAddYesterday",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderInfoRsp_FieldNumber_IsAddYesterday,
        .hasIndex = 40,
        .offset = 41,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isUpdateBedNo",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderInfoRsp_FieldNumber_IsUpdateBedNo,
        .hasIndex = 42,
        .offset = 43,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isHgPay",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderInfoRsp_FieldNumber_IsHgPay,
        .hasIndex = 44,
        .offset = 45,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "hangServiceDateListArray",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderInfoRsp_FieldNumber_HangServiceDateListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetOrderInfoRsp__storage_, hangServiceDateListArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isZzorder",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderInfoRsp_FieldNumber_IsZzorder,
        .hasIndex = 46,
        .offset = 47,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetOrderInfoRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetOrderInfoRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\"\001\007\000\002\000priceName\000\003\000orderItem\000\004\000insureItem"
        "\000\005\013\000\007\r\000\010\010\000\t\006\000\013\021\000\014\020\000\r\017\000\016\013\000\017\r\000\020\r\000\021\014\000\022\tb\000\023\r"
        "\000\024\013\000\025\n\000\026\t\000\027\014\000\030\017\000\031\021\000\032\t\000\033\n\000\034\r\000\035\t\000\036\nc\002\000\037\021\000 "
        "\016\000!\r\000\"\007\000#\000hangServiceDateList\000$\003b\004\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetOrderInformedReq

@implementation GetOrderInformedReq

@dynamic orderId;

typedef struct GetOrderInformedReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *orderId;
} GetOrderInformedReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderInformedReq_FieldNumber_OrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetOrderInformedReq__storage_, orderId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetOrderInformedReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetOrderInformedReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetOrderInformedRsp

@implementation GetOrderInformedRsp

@dynamic price;
@dynamic obligation, obligation_Count;
@dynamic disclaimerArray, disclaimerArray_Count;
@dynamic signPic;
@dynamic isSignPic;

typedef struct GetOrderInformedRsp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t isSignPic;
  NSString *price;
  NSMutableDictionary *obligation;
  NSMutableArray *disclaimerArray;
  NSString *signPic;
} GetOrderInformedRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "price",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderInformedRsp_FieldNumber_Price,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetOrderInformedRsp__storage_, price),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "obligation",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderInformedRsp_FieldNumber_Obligation,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetOrderInformedRsp__storage_, obligation),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "disclaimerArray",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderInformedRsp_FieldNumber_DisclaimerArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetOrderInformedRsp__storage_, disclaimerArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "signPic",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderInformedRsp_FieldNumber_SignPic,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetOrderInformedRsp__storage_, signPic),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isSignPic",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderInformedRsp_FieldNumber_IsSignPic,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetOrderInformedRsp__storage_, isSignPic),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetOrderInformedRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetOrderInformedRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\004\007\000\005\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UpdateOrderSignPicReq

@implementation UpdateOrderSignPicReq

@dynamic orderId;
@dynamic signPic;
@dynamic signType;

typedef struct UpdateOrderSignPicReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t signType;
  NSString *orderId;
  NSString *signPic;
} UpdateOrderSignPicReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = UpdateOrderSignPicReq_FieldNumber_OrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpdateOrderSignPicReq__storage_, orderId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "signPic",
        .dataTypeSpecific.className = NULL,
        .number = UpdateOrderSignPicReq_FieldNumber_SignPic,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UpdateOrderSignPicReq__storage_, signPic),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "signType",
        .dataTypeSpecific.className = NULL,
        .number = UpdateOrderSignPicReq_FieldNumber_SignType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(UpdateOrderSignPicReq__storage_, signType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateOrderSignPicReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateOrderSignPicReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\007\000\002\007\000\003\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UpdateOrderSignPicRsp

@implementation UpdateOrderSignPicRsp

@dynamic signId;

typedef struct UpdateOrderSignPicRsp__storage_ {
  uint32_t _has_storage_[1];
  uint64_t signId;
} UpdateOrderSignPicRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "signId",
        .dataTypeSpecific.className = NULL,
        .number = UpdateOrderSignPicRsp_FieldNumber_SignId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpdateOrderSignPicRsp__storage_, signId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateOrderSignPicRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateOrderSignPicRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SaveOrUpdateOrderReq

@implementation SaveOrUpdateOrderReq

@dynamic orderId;
@dynamic operationType;

typedef struct SaveOrUpdateOrderReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t operationType;
  NSString *orderId;
} SaveOrUpdateOrderReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = SaveOrUpdateOrderReq_FieldNumber_OrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SaveOrUpdateOrderReq__storage_, orderId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "operationType",
        .dataTypeSpecific.className = NULL,
        .number = SaveOrUpdateOrderReq_FieldNumber_OperationType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SaveOrUpdateOrderReq__storage_, operationType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SaveOrUpdateOrderReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SaveOrUpdateOrderReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\007\000\002\r\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AddOrderPriceReq

@implementation AddOrderPriceReq

@dynamic orderId;
@dynamic serviceTime;
@dynamic mapPrice, mapPrice_Count;
@dynamic dischargedTime;

typedef struct AddOrderPriceReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *orderId;
  NSString *serviceTime;
  GPBUInt64UInt32Dictionary *mapPrice;
  NSString *dischargedTime;
} AddOrderPriceReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = AddOrderPriceReq_FieldNumber_OrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AddOrderPriceReq__storage_, orderId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "serviceTime",
        .dataTypeSpecific.className = NULL,
        .number = AddOrderPriceReq_FieldNumber_ServiceTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AddOrderPriceReq__storage_, serviceTime),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "mapPrice",
        .dataTypeSpecific.className = NULL,
        .number = AddOrderPriceReq_FieldNumber_MapPrice,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(AddOrderPriceReq__storage_, mapPrice),
        .flags = GPBFieldMapKeyUInt64 | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "dischargedTime",
        .dataTypeSpecific.className = NULL,
        .number = AddOrderPriceReq_FieldNumber_DischargedTime,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(AddOrderPriceReq__storage_, dischargedTime),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AddOrderPriceReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AddOrderPriceReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001\007\000\002\013\000\003\010\000\004\016\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OrderJPushReq

@implementation OrderJPushReq

@dynamic orderId;
@dynamic jpushType;
@dynamic priceId;

typedef struct OrderJPushReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t jpushType;
  NSString *orderId;
  uint64_t priceId;
} OrderJPushReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = OrderJPushReq_FieldNumber_OrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OrderJPushReq__storage_, orderId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "jpushType",
        .dataTypeSpecific.className = NULL,
        .number = OrderJPushReq_FieldNumber_JpushType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OrderJPushReq__storage_, jpushType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "priceId",
        .dataTypeSpecific.className = NULL,
        .number = OrderJPushReq_FieldNumber_PriceId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OrderJPushReq__storage_, priceId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OrderJPushReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OrderJPushReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\007\000\002\t\000\003\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SaveOrderItemReq

@implementation SaveOrderItemReq

@dynamic orderId;
@dynamic affirmTime;
@dynamic mold;
@dynamic type;

typedef struct SaveOrderItemReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t mold;
  uint32_t type;
  NSString *orderId;
  NSString *affirmTime;
} SaveOrderItemReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = SaveOrderItemReq_FieldNumber_OrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SaveOrderItemReq__storage_, orderId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "affirmTime",
        .dataTypeSpecific.className = NULL,
        .number = SaveOrderItemReq_FieldNumber_AffirmTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SaveOrderItemReq__storage_, affirmTime),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "mold",
        .dataTypeSpecific.className = NULL,
        .number = SaveOrderItemReq_FieldNumber_Mold,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SaveOrderItemReq__storage_, mold),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = SaveOrderItemReq_FieldNumber_Type,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SaveOrderItemReq__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SaveOrderItemReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SaveOrderItemReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\007\000\002\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetPriceListRsp

@implementation GetPriceListRsp

@dynamic insurePriceVolistArray, insurePriceVolistArray_Count;
@dynamic commonPriceVolistArray, commonPriceVolistArray_Count;
@dynamic hgRebateFeeAm;
@dynamic hgRebateFeePm;
@dynamic hgKinsRebateFeeAm;
@dynamic hgKinsRebateFeePm;
@dynamic dischargedTime;

typedef struct GetPriceListRsp__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *insurePriceVolistArray;
  NSMutableArray *commonPriceVolistArray;
  NSString *hgRebateFeeAm;
  NSString *hgRebateFeePm;
  NSString *hgKinsRebateFeeAm;
  NSString *hgKinsRebateFeePm;
  NSString *dischargedTime;
} GetPriceListRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "insurePriceVolistArray",
        .dataTypeSpecific.className = GPBStringifySymbol(CompanyPriceVO),
        .number = GetPriceListRsp_FieldNumber_InsurePriceVolistArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetPriceListRsp__storage_, insurePriceVolistArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "commonPriceVolistArray",
        .dataTypeSpecific.className = GPBStringifySymbol(CompanyPriceVO),
        .number = GetPriceListRsp_FieldNumber_CommonPriceVolistArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetPriceListRsp__storage_, commonPriceVolistArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "hgRebateFeeAm",
        .dataTypeSpecific.className = NULL,
        .number = GetPriceListRsp_FieldNumber_HgRebateFeeAm,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetPriceListRsp__storage_, hgRebateFeeAm),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "hgRebateFeePm",
        .dataTypeSpecific.className = NULL,
        .number = GetPriceListRsp_FieldNumber_HgRebateFeePm,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetPriceListRsp__storage_, hgRebateFeePm),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "hgKinsRebateFeeAm",
        .dataTypeSpecific.className = NULL,
        .number = GetPriceListRsp_FieldNumber_HgKinsRebateFeeAm,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetPriceListRsp__storage_, hgKinsRebateFeeAm),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "hgKinsRebateFeePm",
        .dataTypeSpecific.className = NULL,
        .number = GetPriceListRsp_FieldNumber_HgKinsRebateFeePm,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetPriceListRsp__storage_, hgKinsRebateFeePm),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "dischargedTime",
        .dataTypeSpecific.className = NULL,
        .number = GetPriceListRsp_FieldNumber_DischargedTime,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GetPriceListRsp__storage_, dischargedTime),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetPriceListRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetPriceListRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\007\001\000insurePriceVOList\000\002\000commonPriceVOList"
        "\000\003\014A\000\004\014A\000\005\020A\000\006\020A\000\007\016\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetHgInfoReq

@implementation GetHgInfoReq

@dynamic hgId;

typedef struct GetHgInfoReq__storage_ {
  uint32_t _has_storage_[1];
  uint64_t hgId;
} GetHgInfoReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "hgId",
        .dataTypeSpecific.className = NULL,
        .number = GetHgInfoReq_FieldNumber_HgId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetHgInfoReq__storage_, hgId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetHgInfoReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetHgInfoReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\004\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetHgInfoRsp

@implementation GetHgInfoRsp

@dynamic id_p;
@dynamic phone;
@dynamic state;
@dynamic fullName;
@dynamic picURL;
@dynamic sex;
@dynamic nativeplace;
@dynamic nation;
@dynamic province;
@dynamic city;
@dynamic district;
@dynamic address;
@dynamic building;
@dynamic languageArray, languageArray_Count;
@dynamic emergencyContact;
@dynamic emergencyContactPhone;
@dynamic assessNumber;
@dynamic orderNumber;
@dynamic joinTimeStr;
@dynamic careerStartTime;
@dynamic branchId;
@dynamic branchName;
@dynamic superiorId;
@dynamic superiorName;
@dynamic nursingCertificateURL;
@dynamic hgno;
@dynamic workType;
@dynamic roleId;
@dynamic hgNumbser;
@dynamic msgNum;
@dynamic mpQrcode;
@dynamic hasDiffno;
@dynamic onduty;
@dynamic serviceTypeStr;
@dynamic bankNo;
@dynamic bankName;
@dynamic superiorPhone;
@dynamic exp;
@dynamic isUserSituation;
@dynamic isAbnormalOrder;
@dynamic isSign;
@dynamic isPrcorder;

typedef struct GetHgInfoRsp__storage_ {
  uint32_t _has_storage_[2];
  uint32_t state;
  uint32_t sex;
  uint32_t workType;
  uint32_t msgNum;
  uint32_t exp;
  uint32_t isUserSituation;
  uint32_t isAbnormalOrder;
  uint32_t isSign;
  uint32_t isPrcorder;
  NSString *phone;
  NSString *fullName;
  NSString *picURL;
  NSString *nativeplace;
  NSString *nation;
  NSString *province;
  NSString *city;
  NSString *district;
  NSString *address;
  NSString *building;
  GPBUInt32Array *languageArray;
  NSString *emergencyContact;
  NSString *emergencyContactPhone;
  NSString *joinTimeStr;
  NSString *careerStartTime;
  NSString *branchName;
  NSString *superiorId;
  NSString *superiorName;
  NSString *nursingCertificateURL;
  NSString *hgno;
  NSString *mpQrcode;
  NSString *serviceTypeStr;
  NSString *bankNo;
  NSString *bankName;
  NSString *superiorPhone;
  uint64_t id_p;
  uint64_t assessNumber;
  uint64_t orderNumber;
  uint64_t branchId;
  uint64_t roleId;
  uint64_t hgNumbser;
} GetHgInfoRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = GetHgInfoRsp_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetHgInfoRsp__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "phone",
        .dataTypeSpecific.className = NULL,
        .number = GetHgInfoRsp_FieldNumber_Phone,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetHgInfoRsp__storage_, phone),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "state",
        .dataTypeSpecific.className = NULL,
        .number = GetHgInfoRsp_FieldNumber_State,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetHgInfoRsp__storage_, state),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "fullName",
        .dataTypeSpecific.className = NULL,
        .number = GetHgInfoRsp_FieldNumber_FullName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetHgInfoRsp__storage_, fullName),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "picURL",
        .dataTypeSpecific.className = NULL,
        .number = GetHgInfoRsp_FieldNumber_PicURL,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GetHgInfoRsp__storage_, picURL),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sex",
        .dataTypeSpecific.className = NULL,
        .number = GetHgInfoRsp_FieldNumber_Sex,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(GetHgInfoRsp__storage_, sex),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "nativeplace",
        .dataTypeSpecific.className = NULL,
        .number = GetHgInfoRsp_FieldNumber_Nativeplace,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(GetHgInfoRsp__storage_, nativeplace),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "nation",
        .dataTypeSpecific.className = NULL,
        .number = GetHgInfoRsp_FieldNumber_Nation,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(GetHgInfoRsp__storage_, nation),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "province",
        .dataTypeSpecific.className = NULL,
        .number = GetHgInfoRsp_FieldNumber_Province,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(GetHgInfoRsp__storage_, province),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "city",
        .dataTypeSpecific.className = NULL,
        .number = GetHgInfoRsp_FieldNumber_City,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(GetHgInfoRsp__storage_, city),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "district",
        .dataTypeSpecific.className = NULL,
        .number = GetHgInfoRsp_FieldNumber_District,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(GetHgInfoRsp__storage_, district),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "address",
        .dataTypeSpecific.className = NULL,
        .number = GetHgInfoRsp_FieldNumber_Address,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(GetHgInfoRsp__storage_, address),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "building",
        .dataTypeSpecific.className = NULL,
        .number = GetHgInfoRsp_FieldNumber_Building,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(GetHgInfoRsp__storage_, building),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "languageArray",
        .dataTypeSpecific.className = NULL,
        .number = GetHgInfoRsp_FieldNumber_LanguageArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetHgInfoRsp__storage_, languageArray),
        .flags = GPBFieldRepeated | GPBFieldPacked,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "emergencyContact",
        .dataTypeSpecific.className = NULL,
        .number = GetHgInfoRsp_FieldNumber_EmergencyContact,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(GetHgInfoRsp__storage_, emergencyContact),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "emergencyContactPhone",
        .dataTypeSpecific.className = NULL,
        .number = GetHgInfoRsp_FieldNumber_EmergencyContactPhone,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(GetHgInfoRsp__storage_, emergencyContactPhone),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "assessNumber",
        .dataTypeSpecific.className = NULL,
        .number = GetHgInfoRsp_FieldNumber_AssessNumber,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(GetHgInfoRsp__storage_, assessNumber),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "orderNumber",
        .dataTypeSpecific.className = NULL,
        .number = GetHgInfoRsp_FieldNumber_OrderNumber,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(GetHgInfoRsp__storage_, orderNumber),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "joinTimeStr",
        .dataTypeSpecific.className = NULL,
        .number = GetHgInfoRsp_FieldNumber_JoinTimeStr,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(GetHgInfoRsp__storage_, joinTimeStr),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "careerStartTime",
        .dataTypeSpecific.className = NULL,
        .number = GetHgInfoRsp_FieldNumber_CareerStartTime,
        .hasIndex = 18,
        .offset = (uint32_t)offsetof(GetHgInfoRsp__storage_, careerStartTime),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "branchId",
        .dataTypeSpecific.className = NULL,
        .number = GetHgInfoRsp_FieldNumber_BranchId,
        .hasIndex = 19,
        .offset = (uint32_t)offsetof(GetHgInfoRsp__storage_, branchId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "branchName",
        .dataTypeSpecific.className = NULL,
        .number = GetHgInfoRsp_FieldNumber_BranchName,
        .hasIndex = 20,
        .offset = (uint32_t)offsetof(GetHgInfoRsp__storage_, branchName),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "superiorId",
        .dataTypeSpecific.className = NULL,
        .number = GetHgInfoRsp_FieldNumber_SuperiorId,
        .hasIndex = 21,
        .offset = (uint32_t)offsetof(GetHgInfoRsp__storage_, superiorId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "superiorName",
        .dataTypeSpecific.className = NULL,
        .number = GetHgInfoRsp_FieldNumber_SuperiorName,
        .hasIndex = 22,
        .offset = (uint32_t)offsetof(GetHgInfoRsp__storage_, superiorName),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "nursingCertificateURL",
        .dataTypeSpecific.className = NULL,
        .number = GetHgInfoRsp_FieldNumber_NursingCertificateURL,
        .hasIndex = 23,
        .offset = (uint32_t)offsetof(GetHgInfoRsp__storage_, nursingCertificateURL),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "hgno",
        .dataTypeSpecific.className = NULL,
        .number = GetHgInfoRsp_FieldNumber_Hgno,
        .hasIndex = 24,
        .offset = (uint32_t)offsetof(GetHgInfoRsp__storage_, hgno),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "workType",
        .dataTypeSpecific.className = NULL,
        .number = GetHgInfoRsp_FieldNumber_WorkType,
        .hasIndex = 25,
        .offset = (uint32_t)offsetof(GetHgInfoRsp__storage_, workType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "roleId",
        .dataTypeSpecific.className = NULL,
        .number = GetHgInfoRsp_FieldNumber_RoleId,
        .hasIndex = 26,
        .offset = (uint32_t)offsetof(GetHgInfoRsp__storage_, roleId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "hgNumbser",
        .dataTypeSpecific.className = NULL,
        .number = GetHgInfoRsp_FieldNumber_HgNumbser,
        .hasIndex = 27,
        .offset = (uint32_t)offsetof(GetHgInfoRsp__storage_, hgNumbser),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "msgNum",
        .dataTypeSpecific.className = NULL,
        .number = GetHgInfoRsp_FieldNumber_MsgNum,
        .hasIndex = 28,
        .offset = (uint32_t)offsetof(GetHgInfoRsp__storage_, msgNum),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "mpQrcode",
        .dataTypeSpecific.className = NULL,
        .number = GetHgInfoRsp_FieldNumber_MpQrcode,
        .hasIndex = 29,
        .offset = (uint32_t)offsetof(GetHgInfoRsp__storage_, mpQrcode),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "hasDiffno",
        .dataTypeSpecific.className = NULL,
        .number = GetHgInfoRsp_FieldNumber_HasDiffno,
        .hasIndex = 30,
        .offset = 31,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "onduty",
        .dataTypeSpecific.className = NULL,
        .number = GetHgInfoRsp_FieldNumber_Onduty,
        .hasIndex = 32,
        .offset = 33,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "serviceTypeStr",
        .dataTypeSpecific.className = NULL,
        .number = GetHgInfoRsp_FieldNumber_ServiceTypeStr,
        .hasIndex = 34,
        .offset = (uint32_t)offsetof(GetHgInfoRsp__storage_, serviceTypeStr),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bankNo",
        .dataTypeSpecific.className = NULL,
        .number = GetHgInfoRsp_FieldNumber_BankNo,
        .hasIndex = 35,
        .offset = (uint32_t)offsetof(GetHgInfoRsp__storage_, bankNo),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bankName",
        .dataTypeSpecific.className = NULL,
        .number = GetHgInfoRsp_FieldNumber_BankName,
        .hasIndex = 36,
        .offset = (uint32_t)offsetof(GetHgInfoRsp__storage_, bankName),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "superiorPhone",
        .dataTypeSpecific.className = NULL,
        .number = GetHgInfoRsp_FieldNumber_SuperiorPhone,
        .hasIndex = 37,
        .offset = (uint32_t)offsetof(GetHgInfoRsp__storage_, superiorPhone),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "exp",
        .dataTypeSpecific.className = NULL,
        .number = GetHgInfoRsp_FieldNumber_Exp,
        .hasIndex = 38,
        .offset = (uint32_t)offsetof(GetHgInfoRsp__storage_, exp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "isUserSituation",
        .dataTypeSpecific.className = NULL,
        .number = GetHgInfoRsp_FieldNumber_IsUserSituation,
        .hasIndex = 39,
        .offset = (uint32_t)offsetof(GetHgInfoRsp__storage_, isUserSituation),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "isAbnormalOrder",
        .dataTypeSpecific.className = NULL,
        .number = GetHgInfoRsp_FieldNumber_IsAbnormalOrder,
        .hasIndex = 40,
        .offset = (uint32_t)offsetof(GetHgInfoRsp__storage_, isAbnormalOrder),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "isSign",
        .dataTypeSpecific.className = NULL,
        .number = GetHgInfoRsp_FieldNumber_IsSign,
        .hasIndex = 41,
        .offset = (uint32_t)offsetof(GetHgInfoRsp__storage_, isSign),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "isPrcorder",
        .dataTypeSpecific.className = NULL,
        .number = GetHgInfoRsp_FieldNumber_IsPrcorder,
        .hasIndex = 42,
        .offset = (uint32_t)offsetof(GetHgInfoRsp__storage_, isPrcorder),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetHgInfoRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetHgInfoRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\033\004\010\000\005\004!!\000\017\020\000\020\025\000\021\014\000\022\013\000\023\013\000\024\017\000\025\010\000\026\n\000\027\n\000\030\014\000\031"
        "\023!!\000\033\010\000\034\006\000\035\t\000\036\006\000\037\003b\003\000 \t\000\"\016\000#\005A\000$\010\000%\r\000\'\017\000"
        "(\017\000)\006\000*\003c\004\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UpdateHgInfoReq

@implementation UpdateHgInfoReq

@dynamic emergencyContact;
@dynamic emergencyContactPhone;

typedef struct UpdateHgInfoReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *emergencyContact;
  NSString *emergencyContactPhone;
} UpdateHgInfoReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "emergencyContact",
        .dataTypeSpecific.className = NULL,
        .number = UpdateHgInfoReq_FieldNumber_EmergencyContact,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpdateHgInfoReq__storage_, emergencyContact),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "emergencyContactPhone",
        .dataTypeSpecific.className = NULL,
        .number = UpdateHgInfoReq_FieldNumber_EmergencyContactPhone,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UpdateHgInfoReq__storage_, emergencyContactPhone),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateHgInfoReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateHgInfoReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\020\000\002\025\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetAssignListReq

@implementation GetAssignListReq

@dynamic nameInsureId;
@dynamic status;
@dynamic pageSize;
@dynamic pageNum;

typedef struct GetAssignListReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t status;
  uint32_t pageSize;
  uint32_t pageNum;
  NSString *nameInsureId;
} GetAssignListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "nameInsureId",
        .dataTypeSpecific.className = NULL,
        .number = GetAssignListReq_FieldNumber_NameInsureId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetAssignListReq__storage_, nameInsureId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = GetAssignListReq_FieldNumber_Status,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetAssignListReq__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = GetAssignListReq_FieldNumber_PageSize,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetAssignListReq__storage_, pageSize),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "pageNum",
        .dataTypeSpecific.className = NULL,
        .number = GetAssignListReq_FieldNumber_PageNum,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetAssignListReq__storage_, pageNum),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetAssignListReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetAssignListReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\014\000\003\010\000\004\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetAssignListRsp

@implementation GetAssignListRsp

@dynamic assignArray, assignArray_Count;
@dynamic count;

typedef struct GetAssignListRsp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t count;
  NSMutableArray *assignArray;
} GetAssignListRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "assignArray",
        .dataTypeSpecific.className = GPBStringifySymbol(AssignVO),
        .number = GetAssignListRsp_FieldNumber_AssignArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetAssignListRsp__storage_, assignArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = GetAssignListRsp_FieldNumber_Count,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetAssignListRsp__storage_, count),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetAssignListRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetAssignListRsp__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetSubserverReq

@implementation GetSubserverReq

@dynamic nameOrderId;
@dynamic status;
@dynamic pageSize;
@dynamic pageNum;

typedef struct GetSubserverReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t status;
  uint32_t pageSize;
  uint32_t pageNum;
  NSString *nameOrderId;
} GetSubserverReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "nameOrderId",
        .dataTypeSpecific.className = NULL,
        .number = GetSubserverReq_FieldNumber_NameOrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetSubserverReq__storage_, nameOrderId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = GetSubserverReq_FieldNumber_Status,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetSubserverReq__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = GetSubserverReq_FieldNumber_PageSize,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetSubserverReq__storage_, pageSize),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "pageNum",
        .dataTypeSpecific.className = NULL,
        .number = GetSubserverReq_FieldNumber_PageNum,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetSubserverReq__storage_, pageNum),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetSubserverReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetSubserverReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\013\000\003\010\000\004\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetKinsfolkReq

@implementation GetKinsfolkReq

@dynamic kinsId;
@dynamic idCardNo;

typedef struct GetKinsfolkReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *idCardNo;
  uint64_t kinsId;
} GetKinsfolkReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "kinsId",
        .dataTypeSpecific.className = NULL,
        .number = GetKinsfolkReq_FieldNumber_KinsId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetKinsfolkReq__storage_, kinsId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "idCardNo",
        .dataTypeSpecific.className = NULL,
        .number = GetKinsfolkReq_FieldNumber_IdCardNo,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetKinsfolkReq__storage_, idCardNo),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetKinsfolkReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetKinsfolkReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\006\000\002\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetKinsfolkRsp

@implementation GetKinsfolkRsp

@dynamic hasKins, kins;
@dynamic scoreAdl;

typedef struct GetKinsfolkRsp__storage_ {
  uint32_t _has_storage_[1];
  Kinsfolk *kins;
  uint64_t scoreAdl;
} GetKinsfolkRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "kins",
        .dataTypeSpecific.className = GPBStringifySymbol(Kinsfolk),
        .number = GetKinsfolkRsp_FieldNumber_Kins,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetKinsfolkRsp__storage_, kins),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "scoreAdl",
        .dataTypeSpecific.className = NULL,
        .number = GetKinsfolkRsp_FieldNumber_ScoreAdl,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetKinsfolkRsp__storage_, scoreAdl),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetKinsfolkRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetKinsfolkRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\006b\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GuideStaffReq

@implementation GuideStaffReq

@dynamic insureNo;
@dynamic orderId;
@dynamic staffId;
@dynamic guideType;
@dynamic remark;
@dynamic time;
@dynamic type;

typedef struct GuideStaffReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t guideType;
  uint32_t type;
  NSString *insureNo;
  NSString *orderId;
  NSString *remark;
  NSString *time;
  uint64_t staffId;
} GuideStaffReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "insureNo",
        .dataTypeSpecific.className = NULL,
        .number = GuideStaffReq_FieldNumber_InsureNo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GuideStaffReq__storage_, insureNo),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = GuideStaffReq_FieldNumber_OrderId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GuideStaffReq__storage_, orderId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "staffId",
        .dataTypeSpecific.className = NULL,
        .number = GuideStaffReq_FieldNumber_StaffId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GuideStaffReq__storage_, staffId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "guideType",
        .dataTypeSpecific.className = NULL,
        .number = GuideStaffReq_FieldNumber_GuideType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GuideStaffReq__storage_, guideType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "remark",
        .dataTypeSpecific.className = NULL,
        .number = GuideStaffReq_FieldNumber_Remark,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GuideStaffReq__storage_, remark),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "time",
        .dataTypeSpecific.className = NULL,
        .number = GuideStaffReq_FieldNumber_Time,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(GuideStaffReq__storage_, time),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = GuideStaffReq_FieldNumber_Type,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(GuideStaffReq__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GuideStaffReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GuideStaffReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001\007A\000\002\007\000\003\007\000\004\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetHgReq

@implementation GetHgReq

@dynamic fullName;
@dynamic orderId;
@dynamic pageSize;
@dynamic pageNum;
@dynamic priceId;

typedef struct GetHgReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t pageSize;
  uint32_t pageNum;
  NSString *fullName;
  NSString *orderId;
  uint64_t priceId;
} GetHgReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "fullName",
        .dataTypeSpecific.className = NULL,
        .number = GetHgReq_FieldNumber_FullName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetHgReq__storage_, fullName),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = GetHgReq_FieldNumber_OrderId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetHgReq__storage_, orderId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = GetHgReq_FieldNumber_PageSize,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetHgReq__storage_, pageSize),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "pageNum",
        .dataTypeSpecific.className = NULL,
        .number = GetHgReq_FieldNumber_PageNum,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetHgReq__storage_, pageNum),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "priceId",
        .dataTypeSpecific.className = NULL,
        .number = GetHgReq_FieldNumber_PriceId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GetHgReq__storage_, priceId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetHgReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetHgReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001\010\000\002\007\000\003\010\000\004\007\000\005\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetHgRsp

@implementation GetHgRsp

@dynamic hgVoArray, hgVoArray_Count;
@dynamic count;

typedef struct GetHgRsp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t count;
  NSMutableArray *hgVoArray;
} GetHgRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "hgVoArray",
        .dataTypeSpecific.className = GPBStringifySymbol(HgVO),
        .number = GetHgRsp_FieldNumber_HgVoArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetHgRsp__storage_, hgVoArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = GetHgRsp_FieldNumber_Count,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetHgRsp__storage_, count),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetHgRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetHgRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\000hgVO\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetUserReq

@implementation GetUserReq

@dynamic userId;

typedef struct GetUserReq__storage_ {
  uint32_t _has_storage_[1];
  uint64_t userId;
} GetUserReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = GetUserReq_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetUserReq__storage_, userId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetUserReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetUserReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetUserKinsListRsp

@implementation GetUserKinsListRsp

@dynamic kinsListArray, kinsListArray_Count;

typedef struct GetUserKinsListRsp__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *kinsListArray;
} GetUserKinsListRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "kinsListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(KinsfolkVO),
        .number = GetUserKinsListRsp_FieldNumber_KinsListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetUserKinsListRsp__storage_, kinsListArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetUserKinsListRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetUserKinsListRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\000kinsList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetUserAddrListRsp

@implementation GetUserAddrListRsp

@dynamic addrListArray, addrListArray_Count;

typedef struct GetUserAddrListRsp__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *addrListArray;
} GetUserAddrListRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "addrListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(UserAddressVO),
        .number = GetUserAddrListRsp_FieldNumber_AddrListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetUserAddrListRsp__storage_, addrListArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetUserAddrListRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetUserAddrListRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\000addrList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UpdateInsureOrderReq

@implementation UpdateInsureOrderReq

@dynamic insureNo;
@dynamic orderTime;
@dynamic orderStatus;

typedef struct UpdateInsureOrderReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t orderStatus;
  NSString *insureNo;
  NSString *orderTime;
} UpdateInsureOrderReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "insureNo",
        .dataTypeSpecific.className = NULL,
        .number = UpdateInsureOrderReq_FieldNumber_InsureNo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpdateInsureOrderReq__storage_, insureNo),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "orderTime",
        .dataTypeSpecific.className = NULL,
        .number = UpdateInsureOrderReq_FieldNumber_OrderTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UpdateInsureOrderReq__storage_, orderTime),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "orderStatus",
        .dataTypeSpecific.className = NULL,
        .number = UpdateInsureOrderReq_FieldNumber_OrderStatus,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(UpdateInsureOrderReq__storage_, orderStatus),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateInsureOrderReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateInsureOrderReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\010\000\002\t\000\003\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UpdateOrderServeReq

@implementation UpdateOrderServeReq

@dynamic orderId;
@dynamic hgId;
@dynamic addrId;
@dynamic priceId;
@dynamic additionArray, additionArray_Count;
@dynamic branchId;
@dynamic roomId;
@dynamic bedId;
@dynamic phone;
@dynamic bedNo;
@dynamic priceUpdateType;

typedef struct UpdateOrderServeReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t priceUpdateType;
  NSString *orderId;
  GPBUInt64Array *additionArray;
  NSString *phone;
  NSString *bedNo;
  uint64_t hgId;
  uint64_t addrId;
  uint64_t priceId;
  uint64_t branchId;
  uint64_t roomId;
  uint64_t bedId;
} UpdateOrderServeReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = UpdateOrderServeReq_FieldNumber_OrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpdateOrderServeReq__storage_, orderId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "hgId",
        .dataTypeSpecific.className = NULL,
        .number = UpdateOrderServeReq_FieldNumber_HgId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UpdateOrderServeReq__storage_, hgId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "addrId",
        .dataTypeSpecific.className = NULL,
        .number = UpdateOrderServeReq_FieldNumber_AddrId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(UpdateOrderServeReq__storage_, addrId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "priceId",
        .dataTypeSpecific.className = NULL,
        .number = UpdateOrderServeReq_FieldNumber_PriceId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(UpdateOrderServeReq__storage_, priceId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "additionArray",
        .dataTypeSpecific.className = NULL,
        .number = UpdateOrderServeReq_FieldNumber_AdditionArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(UpdateOrderServeReq__storage_, additionArray),
        .flags = GPBFieldRepeated | GPBFieldPacked,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "branchId",
        .dataTypeSpecific.className = NULL,
        .number = UpdateOrderServeReq_FieldNumber_BranchId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(UpdateOrderServeReq__storage_, branchId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = UpdateOrderServeReq_FieldNumber_RoomId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(UpdateOrderServeReq__storage_, roomId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "bedId",
        .dataTypeSpecific.className = NULL,
        .number = UpdateOrderServeReq_FieldNumber_BedId,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(UpdateOrderServeReq__storage_, bedId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "phone",
        .dataTypeSpecific.className = NULL,
        .number = UpdateOrderServeReq_FieldNumber_Phone,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(UpdateOrderServeReq__storage_, phone),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bedNo",
        .dataTypeSpecific.className = NULL,
        .number = UpdateOrderServeReq_FieldNumber_BedNo,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(UpdateOrderServeReq__storage_, bedNo),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "priceUpdateType",
        .dataTypeSpecific.className = NULL,
        .number = UpdateOrderServeReq_FieldNumber_PriceUpdateType,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(UpdateOrderServeReq__storage_, priceUpdateType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateOrderServeReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateOrderServeReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\t\001\007\000\002\004\000\003\006\000\004\007\000\006\010\000\007\006\000\010\005\000\n\005\000\013\017\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AddUserAddrReq

@implementation AddUserAddrReq

@dynamic addrId;
@dynamic addrDetail;
@dynamic adCode;
@dynamic street;
@dynamic building;
@dynamic gpsType;
@dynamic lng;
@dynamic lat;
@dynamic defaultUse;
@dynamic phone;
@dynamic contacts;
@dynamic userId;

typedef struct AddUserAddrReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t gpsType;
  uint32_t defaultUse;
  NSString *addrDetail;
  NSString *adCode;
  NSString *street;
  NSString *building;
  NSString *phone;
  NSString *contacts;
  uint64_t addrId;
  double lng;
  double lat;
  uint64_t userId;
} AddUserAddrReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "addrId",
        .dataTypeSpecific.className = NULL,
        .number = AddUserAddrReq_FieldNumber_AddrId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AddUserAddrReq__storage_, addrId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "addrDetail",
        .dataTypeSpecific.className = NULL,
        .number = AddUserAddrReq_FieldNumber_AddrDetail,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AddUserAddrReq__storage_, addrDetail),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "adCode",
        .dataTypeSpecific.className = NULL,
        .number = AddUserAddrReq_FieldNumber_AdCode,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(AddUserAddrReq__storage_, adCode),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "street",
        .dataTypeSpecific.className = NULL,
        .number = AddUserAddrReq_FieldNumber_Street,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(AddUserAddrReq__storage_, street),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "building",
        .dataTypeSpecific.className = NULL,
        .number = AddUserAddrReq_FieldNumber_Building,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(AddUserAddrReq__storage_, building),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "gpsType",
        .dataTypeSpecific.className = NULL,
        .number = AddUserAddrReq_FieldNumber_GpsType,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(AddUserAddrReq__storage_, gpsType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "lng",
        .dataTypeSpecific.className = NULL,
        .number = AddUserAddrReq_FieldNumber_Lng,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(AddUserAddrReq__storage_, lng),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "lat",
        .dataTypeSpecific.className = NULL,
        .number = AddUserAddrReq_FieldNumber_Lat,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(AddUserAddrReq__storage_, lat),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "defaultUse",
        .dataTypeSpecific.className = NULL,
        .number = AddUserAddrReq_FieldNumber_DefaultUse,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(AddUserAddrReq__storage_, defaultUse),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "phone",
        .dataTypeSpecific.className = NULL,
        .number = AddUserAddrReq_FieldNumber_Phone,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(AddUserAddrReq__storage_, phone),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "contacts",
        .dataTypeSpecific.className = NULL,
        .number = AddUserAddrReq_FieldNumber_Contacts,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(AddUserAddrReq__storage_, contacts),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = AddUserAddrReq_FieldNumber_UserId,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(AddUserAddrReq__storage_, userId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AddUserAddrReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AddUserAddrReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\006\001\006\000\002\n\000\003\006\000\006\007\000\t\n\000\014\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AddUserAddrRsp

@implementation AddUserAddrRsp

@dynamic addrId;
@dynamic location;

typedef struct AddUserAddrRsp__storage_ {
  uint32_t _has_storage_[1];
  NSString *location;
  uint64_t addrId;
} AddUserAddrRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "addrId",
        .dataTypeSpecific.className = NULL,
        .number = AddUserAddrRsp_FieldNumber_AddrId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AddUserAddrRsp__storage_, addrId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "location",
        .dataTypeSpecific.className = NULL,
        .number = AddUserAddrRsp_FieldNumber_Location,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AddUserAddrRsp__storage_, location),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AddUserAddrRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AddUserAddrRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetOrderProcessReq

@implementation GetOrderProcessReq

@dynamic orderId;
@dynamic isYesterday;

typedef struct GetOrderProcessReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *orderId;
} GetOrderProcessReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderProcessReq_FieldNumber_OrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetOrderProcessReq__storage_, orderId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isYesterday",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderProcessReq_FieldNumber_IsYesterday,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetOrderProcessReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetOrderProcessReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\007\000\002\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetOrderProcessRsp

@implementation GetOrderProcessRsp

@dynamic opListArray, opListArray_Count;

typedef struct GetOrderProcessRsp__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *opListArray;
} GetOrderProcessRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "opListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(OrderProcess),
        .number = GetOrderProcessRsp_FieldNumber_OpListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetOrderProcessRsp__storage_, opListArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetOrderProcessRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetOrderProcessRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\000opList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CancelOrderReq

@implementation CancelOrderReq

@dynamic orderId;
@dynamic serviceDate;

typedef struct CancelOrderReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *orderId;
  NSString *serviceDate;
} CancelOrderReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = CancelOrderReq_FieldNumber_OrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CancelOrderReq__storage_, orderId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "serviceDate",
        .dataTypeSpecific.className = NULL,
        .number = CancelOrderReq_FieldNumber_ServiceDate,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CancelOrderReq__storage_, serviceDate),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CancelOrderReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CancelOrderReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\007\000\002\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetOrderServiceRsp

@implementation GetOrderServiceRsp

@dynamic hgId;
@dynamic hgName;
@dynamic addrId;
@dynamic addrStr;
@dynamic branchId;
@dynamic branchName;
@dynamic roomId;
@dynamic roomNo;
@dynamic bedId;
@dynamic bedNo;
@dynamic phone;
@dynamic contacts;
@dynamic pList12NArray, pList12NArray_Count;
@dynamic pList121Array, pList121Array_Count;
@dynamic familyPriceVolistArray, familyPriceVolistArray_Count;
@dynamic userId;
@dynamic serviceType;
@dynamic updatePriceTypeArray, updatePriceTypeArray_Count;
@dynamic updateType;

typedef struct GetOrderServiceRsp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t serviceType;
  int32_t updateType;
  NSString *hgName;
  NSString *addrStr;
  NSString *branchName;
  NSString *roomNo;
  NSString *bedNo;
  NSString *phone;
  NSString *contacts;
  NSMutableArray *pList12NArray;
  NSMutableArray *pList121Array;
  NSMutableArray *familyPriceVolistArray;
  NSMutableArray *updatePriceTypeArray;
  uint64_t hgId;
  uint64_t addrId;
  uint64_t branchId;
  uint64_t roomId;
  uint64_t bedId;
  uint64_t userId;
} GetOrderServiceRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "hgId",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderServiceRsp_FieldNumber_HgId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetOrderServiceRsp__storage_, hgId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "hgName",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderServiceRsp_FieldNumber_HgName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetOrderServiceRsp__storage_, hgName),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "addrId",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderServiceRsp_FieldNumber_AddrId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetOrderServiceRsp__storage_, addrId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "addrStr",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderServiceRsp_FieldNumber_AddrStr,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetOrderServiceRsp__storage_, addrStr),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "branchId",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderServiceRsp_FieldNumber_BranchId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GetOrderServiceRsp__storage_, branchId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "branchName",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderServiceRsp_FieldNumber_BranchName,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(GetOrderServiceRsp__storage_, branchName),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderServiceRsp_FieldNumber_RoomId,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(GetOrderServiceRsp__storage_, roomId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "roomNo",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderServiceRsp_FieldNumber_RoomNo,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(GetOrderServiceRsp__storage_, roomNo),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bedId",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderServiceRsp_FieldNumber_BedId,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(GetOrderServiceRsp__storage_, bedId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "bedNo",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderServiceRsp_FieldNumber_BedNo,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(GetOrderServiceRsp__storage_, bedNo),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "phone",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderServiceRsp_FieldNumber_Phone,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(GetOrderServiceRsp__storage_, phone),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "contacts",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderServiceRsp_FieldNumber_Contacts,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(GetOrderServiceRsp__storage_, contacts),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pList12NArray",
        .dataTypeSpecific.className = GPBStringifySymbol(CompanyPriceVO),
        .number = GetOrderServiceRsp_FieldNumber_PList12NArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetOrderServiceRsp__storage_, pList12NArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "pList121Array",
        .dataTypeSpecific.className = GPBStringifySymbol(CompanyPriceVO),
        .number = GetOrderServiceRsp_FieldNumber_PList121Array,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetOrderServiceRsp__storage_, pList121Array),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "familyPriceVolistArray",
        .dataTypeSpecific.className = GPBStringifySymbol(CompanyPriceVO),
        .number = GetOrderServiceRsp_FieldNumber_FamilyPriceVolistArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetOrderServiceRsp__storage_, familyPriceVolistArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderServiceRsp_FieldNumber_UserId,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(GetOrderServiceRsp__storage_, userId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "serviceType",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderServiceRsp_FieldNumber_ServiceType,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(GetOrderServiceRsp__storage_, serviceType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "updatePriceTypeArray",
        .dataTypeSpecific.className = GPBStringifySymbol(UpdateType),
        .number = GetOrderServiceRsp_FieldNumber_UpdatePriceTypeArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetOrderServiceRsp__storage_, updatePriceTypeArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateType",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderServiceRsp_FieldNumber_UpdateType,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(GetOrderServiceRsp__storage_, updateType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetOrderServiceRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetOrderServiceRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\021\001\004\000\002\006\000\003\006\000\004\007\000\005\010\000\006\n\000\007\006\000\010\006\000\t\005\000\n\005\000\r\000pList12"
        "N\000\016\000pList121\000\017\000familyPriceVOList\000\020\006\000\021\013\000\022"
        "\000updatePriceType\000\023\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SaveOrderItemExtraReq

@implementation SaveOrderItemExtraReq

@dynamic orderId;
@dynamic startDate;
@dynamic endDate;
@dynamic numMap, numMap_Count;

typedef struct SaveOrderItemExtraReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *orderId;
  NSString *startDate;
  NSString *endDate;
  GPBUInt64UInt32Dictionary *numMap;
} SaveOrderItemExtraReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = SaveOrderItemExtraReq_FieldNumber_OrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SaveOrderItemExtraReq__storage_, orderId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "startDate",
        .dataTypeSpecific.className = NULL,
        .number = SaveOrderItemExtraReq_FieldNumber_StartDate,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SaveOrderItemExtraReq__storage_, startDate),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "endDate",
        .dataTypeSpecific.className = NULL,
        .number = SaveOrderItemExtraReq_FieldNumber_EndDate,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SaveOrderItemExtraReq__storage_, endDate),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "numMap",
        .dataTypeSpecific.className = NULL,
        .number = SaveOrderItemExtraReq_FieldNumber_NumMap,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SaveOrderItemExtraReq__storage_, numMap),
        .flags = GPBFieldMapKeyUInt64 | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SaveOrderItemExtraReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SaveOrderItemExtraReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001\007\000\002\t\000\003\007\000\004\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SaveOrderItemExtraRsp

@implementation SaveOrderItemExtraRsp

@dynamic extraId;

typedef struct SaveOrderItemExtraRsp__storage_ {
  uint32_t _has_storage_[1];
  NSString *extraId;
} SaveOrderItemExtraRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "extraId",
        .dataTypeSpecific.className = NULL,
        .number = SaveOrderItemExtraRsp_FieldNumber_ExtraId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SaveOrderItemExtraRsp__storage_, extraId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SaveOrderItemExtraRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SaveOrderItemExtraRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CheckOrderPaiedReq

@implementation CheckOrderPaiedReq

@dynamic paySolution;
@dynamic orderId;
@dynamic monthsArray, monthsArray_Count;

typedef struct CheckOrderPaiedReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t paySolution;
  NSString *orderId;
  NSMutableArray *monthsArray;
} CheckOrderPaiedReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "paySolution",
        .dataTypeSpecific.className = NULL,
        .number = CheckOrderPaiedReq_FieldNumber_PaySolution,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CheckOrderPaiedReq__storage_, paySolution),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = CheckOrderPaiedReq_FieldNumber_OrderId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CheckOrderPaiedReq__storage_, orderId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "monthsArray",
        .dataTypeSpecific.className = NULL,
        .number = CheckOrderPaiedReq_FieldNumber_MonthsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(CheckOrderPaiedReq__storage_, monthsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CheckOrderPaiedReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CheckOrderPaiedReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\013\000\002\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CheckOrderPaiedRsp

@implementation CheckOrderPaiedRsp

@dynamic isPaied;

typedef struct CheckOrderPaiedRsp__storage_ {
  uint32_t _has_storage_[1];
} CheckOrderPaiedRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "isPaied",
        .dataTypeSpecific.className = NULL,
        .number = CheckOrderPaiedRsp_FieldNumber_IsPaied,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CheckOrderPaiedRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CheckOrderPaiedRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CreateDisffnoUserRsp

@implementation CreateDisffnoUserRsp

@dynamic userId;
@dynamic diffno;

typedef struct CreateDisffnoUserRsp__storage_ {
  uint32_t _has_storage_[1];
  NSString *diffno;
  uint64_t userId;
} CreateDisffnoUserRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = CreateDisffnoUserRsp_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CreateDisffnoUserRsp__storage_, userId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "diffno",
        .dataTypeSpecific.className = NULL,
        .number = CreateDisffnoUserRsp_FieldNumber_Diffno,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CreateDisffnoUserRsp__storage_, diffno),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CreateDisffnoUserRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CreateDisffnoUserRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OrgNORecognizeReq

@implementation OrgNORecognizeReq

@dynamic imgId;

typedef struct OrgNORecognizeReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *imgId;
} OrgNORecognizeReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "imgId",
        .dataTypeSpecific.className = NULL,
        .number = OrgNORecognizeReq_FieldNumber_ImgId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OrgNORecognizeReq__storage_, imgId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OrgNORecognizeReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OrgNORecognizeReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\005\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OrgNORecognizeRsp

@implementation OrgNORecognizeRsp

@dynamic hasHospitalBra, hospitalBra;

typedef struct OrgNORecognizeRsp__storage_ {
  uint32_t _has_storage_[1];
  HospitalBra *hospitalBra;
} OrgNORecognizeRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "hospitalBra",
        .dataTypeSpecific.className = GPBStringifySymbol(HospitalBra),
        .number = OrgNORecognizeRsp_FieldNumber_HospitalBra,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OrgNORecognizeRsp__storage_, hospitalBra),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OrgNORecognizeRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OrgNORecognizeRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ScanReq

@implementation ScanReq

@dynamic key;

typedef struct ScanReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *key;
} ScanReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "key",
        .dataTypeSpecific.className = NULL,
        .number = ScanReq_FieldNumber_Key,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ScanReq__storage_, key),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ScanReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ScanReq__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ScanRsp

@implementation ScanRsp

@dynamic yjyURL;

typedef struct ScanRsp__storage_ {
  uint32_t _has_storage_[1];
  NSString *yjyURL;
} ScanRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "yjyURL",
        .dataTypeSpecific.className = NULL,
        .number = ScanRsp_FieldNumber_YjyURL,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ScanRsp__storage_, yjyURL),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ScanRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ScanRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\004!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ListBankRsp

@implementation ListBankRsp

@dynamic bankListArray, bankListArray_Count;

typedef struct ListBankRsp__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *bankListArray;
} ListBankRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "bankListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(UserBankVO),
        .number = ListBankRsp_FieldNumber_BankListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ListBankRsp__storage_, bankListArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ListBankRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ListBankRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\000bankList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AddUserBankReq

@implementation AddUserBankReq

@dynamic cardholderName;
@dynamic cardNo;
@dynamic bankBranch;

typedef struct AddUserBankReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *cardholderName;
  NSString *cardNo;
  NSString *bankBranch;
} AddUserBankReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "cardholderName",
        .dataTypeSpecific.className = NULL,
        .number = AddUserBankReq_FieldNumber_CardholderName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AddUserBankReq__storage_, cardholderName),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cardNo",
        .dataTypeSpecific.className = NULL,
        .number = AddUserBankReq_FieldNumber_CardNo,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AddUserBankReq__storage_, cardNo),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bankBranch",
        .dataTypeSpecific.className = NULL,
        .number = AddUserBankReq_FieldNumber_BankBranch,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(AddUserBankReq__storage_, bankBranch),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AddUserBankReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AddUserBankReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\016\000\002\005A\000\003\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DelUserBankReq

@implementation DelUserBankReq

@dynamic bankId;

typedef struct DelUserBankReq__storage_ {
  uint32_t _has_storage_[1];
  uint64_t bankId;
} DelUserBankReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "bankId",
        .dataTypeSpecific.className = NULL,
        .number = DelUserBankReq_FieldNumber_BankId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DelUserBankReq__storage_, bankId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DelUserBankReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DelUserBankReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UpdateOrderServicePriceRsp

@implementation UpdateOrderServicePriceRsp

@dynamic hgUpdateServerType;

typedef struct UpdateOrderServicePriceRsp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t hgUpdateServerType;
} UpdateOrderServicePriceRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "hgUpdateServerType",
        .dataTypeSpecific.className = NULL,
        .number = UpdateOrderServicePriceRsp_FieldNumber_HgUpdateServerType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpdateOrderServicePriceRsp__storage_, hgUpdateServerType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateOrderServicePriceRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateOrderServicePriceRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\022\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AddOrderPriceReviseReq

@implementation AddOrderPriceReviseReq

@dynamic orderId;
@dynamic mapPrice, mapPrice_Count;
@dynamic dischargedTime;
@dynamic hgRebateType;
@dynamic istoday;
@dynamic signId;

typedef struct AddOrderPriceReviseReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t hgRebateType;
  uint32_t istoday;
  NSString *orderId;
  GPBUInt64Int32Dictionary *mapPrice;
  NSString *dischargedTime;
  uint64_t signId;
} AddOrderPriceReviseReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = AddOrderPriceReviseReq_FieldNumber_OrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AddOrderPriceReviseReq__storage_, orderId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "mapPrice",
        .dataTypeSpecific.className = NULL,
        .number = AddOrderPriceReviseReq_FieldNumber_MapPrice,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(AddOrderPriceReviseReq__storage_, mapPrice),
        .flags = GPBFieldMapKeyUInt64 | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "dischargedTime",
        .dataTypeSpecific.className = NULL,
        .number = AddOrderPriceReviseReq_FieldNumber_DischargedTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AddOrderPriceReviseReq__storage_, dischargedTime),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "hgRebateType",
        .dataTypeSpecific.className = NULL,
        .number = AddOrderPriceReviseReq_FieldNumber_HgRebateType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(AddOrderPriceReviseReq__storage_, hgRebateType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "istoday",
        .dataTypeSpecific.className = NULL,
        .number = AddOrderPriceReviseReq_FieldNumber_Istoday,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(AddOrderPriceReviseReq__storage_, istoday),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "signId",
        .dataTypeSpecific.className = NULL,
        .number = AddOrderPriceReviseReq_FieldNumber_SignId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(AddOrderPriceReviseReq__storage_, signId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AddOrderPriceReviseReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AddOrderPriceReviseReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001\007\000\002\010\000\003\016\000\004\014\000\006\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OrderItemInvertRsp

@implementation OrderItemInvertRsp

@dynamic orderItemInverArray, orderItemInverArray_Count;
@dynamic hgRebateFeeStr;
@dynamic hgRebateType;

typedef struct OrderItemInvertRsp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t hgRebateType;
  NSMutableArray *orderItemInverArray;
  NSString *hgRebateFeeStr;
} OrderItemInvertRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderItemInverArray",
        .dataTypeSpecific.className = GPBStringifySymbol(OrderItemInvertVO),
        .number = OrderItemInvertRsp_FieldNumber_OrderItemInverArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(OrderItemInvertRsp__storage_, orderItemInverArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "hgRebateFeeStr",
        .dataTypeSpecific.className = NULL,
        .number = OrderItemInvertRsp_FieldNumber_HgRebateFeeStr,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OrderItemInvertRsp__storage_, hgRebateFeeStr),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "hgRebateType",
        .dataTypeSpecific.className = NULL,
        .number = OrderItemInvertRsp_FieldNumber_HgRebateType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OrderItemInvertRsp__storage_, hgRebateType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OrderItemInvertRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OrderItemInvertRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\000orderItemInver\000\002\016\000\003\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RechargePrepayFeeReq

@implementation RechargePrepayFeeReq

@dynamic prepayFee;
@dynamic orderId;
@dynamic payType;

typedef struct RechargePrepayFeeReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t payType;
  NSString *prepayFee;
  NSString *orderId;
} RechargePrepayFeeReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "prepayFee",
        .dataTypeSpecific.className = NULL,
        .number = RechargePrepayFeeReq_FieldNumber_PrepayFee,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RechargePrepayFeeReq__storage_, prepayFee),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = RechargePrepayFeeReq_FieldNumber_OrderId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RechargePrepayFeeReq__storage_, orderId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "payType",
        .dataTypeSpecific.className = NULL,
        .number = RechargePrepayFeeReq_FieldNumber_PayType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RechargePrepayFeeReq__storage_, payType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RechargePrepayFeeReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RechargePrepayFeeReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\t\000\002\007\000\003\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetInsureListReq

@implementation GetInsureListReq

@dynamic insureId;
@dynamic status;
@dynamic pageSize;
@dynamic pageNum;

typedef struct GetInsureListReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t status;
  uint32_t pageSize;
  uint32_t pageNum;
  NSString *insureId;
} GetInsureListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "insureId",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureListReq_FieldNumber_InsureId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetInsureListReq__storage_, insureId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureListReq_FieldNumber_Status,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetInsureListReq__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureListReq_FieldNumber_PageSize,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetInsureListReq__storage_, pageSize),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "pageNum",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureListReq_FieldNumber_PageNum,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetInsureListReq__storage_, pageNum),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetInsureListReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetInsureListReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\010\000\003\010\000\004\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetInsureListFirmRsp

@implementation GetInsureListFirmRsp

@dynamic count;
@dynamic insureFirmVoArray, insureFirmVoArray_Count;

typedef struct GetInsureListFirmRsp__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *insureFirmVoArray;
  uint64_t count;
} GetInsureListFirmRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureListFirmRsp_FieldNumber_Count,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetInsureListFirmRsp__storage_, count),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "insureFirmVoArray",
        .dataTypeSpecific.className = GPBStringifySymbol(InsureFirmVO),
        .number = GetInsureListFirmRsp_FieldNumber_InsureFirmVoArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetInsureListFirmRsp__storage_, insureFirmVoArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetInsureListFirmRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetInsureListFirmRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\000insureFirmVo\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetInsureDetailReq

@implementation GetInsureDetailReq

@dynamic insureId;

typedef struct GetInsureDetailReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *insureId;
} GetInsureDetailReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "insureId",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureDetailReq_FieldNumber_InsureId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetInsureDetailReq__storage_, insureId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetInsureDetailReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetInsureDetailReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetInsureDetailRsp

@implementation GetInsureDetailRsp

@dynamic hasInsureNo, insureNo;
@dynamic detailListArray, detailListArray_Count;
@dynamic hasKinsfolk, kinsfolk;
@dynamic scoreAdl;
@dynamic assessTimeStr;
@dynamic kfTimeStr;
@dynamic managerAssessTimeStr;
@dynamic loseAppointTimeStr;
@dynamic kfNoPassRemark;
@dynamic appointTimeStr;
@dynamic loseNoPassRemark;
@dynamic isManagerShow;
@dynamic aptitudeEndTimeStr;
@dynamic assessStatus;
@dynamic kfStatus;
@dynamic loseAppointStatus;
@dynamic hsOperationStatus;
@dynamic nurseLeaderStatus;
@dynamic assignStatus;
@dynamic loseAppointAssessTimeStr;
@dynamic caseDiagnosePicURLIdArray, caseDiagnosePicURLIdArray_Count;
@dynamic dysgnosiaePicURLIdArray, dysgnosiaePicURLIdArray_Count;
@dynamic isOrder;
@dynamic kfStatusStr;

typedef struct GetInsureDetailRsp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t assignStatus;
  InsureNOModel *insureNo;
  NSMutableArray *detailListArray;
  KinsfolkVO *kinsfolk;
  NSString *assessTimeStr;
  NSString *kfTimeStr;
  NSString *managerAssessTimeStr;
  NSString *loseAppointTimeStr;
  NSString *kfNoPassRemark;
  NSString *appointTimeStr;
  NSString *loseNoPassRemark;
  NSString *aptitudeEndTimeStr;
  NSString *loseAppointAssessTimeStr;
  NSMutableArray *caseDiagnosePicURLIdArray;
  NSMutableArray *dysgnosiaePicURLIdArray;
  NSString *kfStatusStr;
  uint64_t scoreAdl;
} GetInsureDetailRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "insureNo",
        .dataTypeSpecific.className = GPBStringifySymbol(InsureNOModel),
        .number = GetInsureDetailRsp_FieldNumber_InsureNo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetInsureDetailRsp__storage_, insureNo),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "detailListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(InsureNODetailVO),
        .number = GetInsureDetailRsp_FieldNumber_DetailListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetInsureDetailRsp__storage_, detailListArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "kinsfolk",
        .dataTypeSpecific.className = GPBStringifySymbol(KinsfolkVO),
        .number = GetInsureDetailRsp_FieldNumber_Kinsfolk,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetInsureDetailRsp__storage_, kinsfolk),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "scoreAdl",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureDetailRsp_FieldNumber_ScoreAdl,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetInsureDetailRsp__storage_, scoreAdl),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "assessTimeStr",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureDetailRsp_FieldNumber_AssessTimeStr,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetInsureDetailRsp__storage_, assessTimeStr),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "kfTimeStr",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureDetailRsp_FieldNumber_KfTimeStr,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GetInsureDetailRsp__storage_, kfTimeStr),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "managerAssessTimeStr",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureDetailRsp_FieldNumber_ManagerAssessTimeStr,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(GetInsureDetailRsp__storage_, managerAssessTimeStr),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "loseAppointTimeStr",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureDetailRsp_FieldNumber_LoseAppointTimeStr,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(GetInsureDetailRsp__storage_, loseAppointTimeStr),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "kfNoPassRemark",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureDetailRsp_FieldNumber_KfNoPassRemark,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(GetInsureDetailRsp__storage_, kfNoPassRemark),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "appointTimeStr",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureDetailRsp_FieldNumber_AppointTimeStr,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(GetInsureDetailRsp__storage_, appointTimeStr),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "loseNoPassRemark",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureDetailRsp_FieldNumber_LoseNoPassRemark,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(GetInsureDetailRsp__storage_, loseNoPassRemark),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isManagerShow",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureDetailRsp_FieldNumber_IsManagerShow,
        .hasIndex = 10,
        .offset = 11,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "aptitudeEndTimeStr",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureDetailRsp_FieldNumber_AptitudeEndTimeStr,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(GetInsureDetailRsp__storage_, aptitudeEndTimeStr),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "assessStatus",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureDetailRsp_FieldNumber_AssessStatus,
        .hasIndex = 13,
        .offset = 14,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "kfStatus",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureDetailRsp_FieldNumber_KfStatus,
        .hasIndex = 15,
        .offset = 16,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "loseAppointStatus",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureDetailRsp_FieldNumber_LoseAppointStatus,
        .hasIndex = 17,
        .offset = 18,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "hsOperationStatus",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureDetailRsp_FieldNumber_HsOperationStatus,
        .hasIndex = 19,
        .offset = 20,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "nurseLeaderStatus",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureDetailRsp_FieldNumber_NurseLeaderStatus,
        .hasIndex = 21,
        .offset = 22,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "assignStatus",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureDetailRsp_FieldNumber_AssignStatus,
        .hasIndex = 23,
        .offset = (uint32_t)offsetof(GetInsureDetailRsp__storage_, assignStatus),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "loseAppointAssessTimeStr",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureDetailRsp_FieldNumber_LoseAppointAssessTimeStr,
        .hasIndex = 24,
        .offset = (uint32_t)offsetof(GetInsureDetailRsp__storage_, loseAppointAssessTimeStr),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "caseDiagnosePicURLIdArray",
        .dataTypeSpecific.className = GPBStringifySymbol(picUrlId),
        .number = GetInsureDetailRsp_FieldNumber_CaseDiagnosePicURLIdArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetInsureDetailRsp__storage_, caseDiagnosePicURLIdArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "dysgnosiaePicURLIdArray",
        .dataTypeSpecific.className = GPBStringifySymbol(picUrlId),
        .number = GetInsureDetailRsp_FieldNumber_DysgnosiaePicURLIdArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetInsureDetailRsp__storage_, dysgnosiaePicURLIdArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "isOrder",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureDetailRsp_FieldNumber_IsOrder,
        .hasIndex = 25,
        .offset = 26,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "kfStatusStr",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureDetailRsp_FieldNumber_KfStatusStr,
        .hasIndex = 27,
        .offset = (uint32_t)offsetof(GetInsureDetailRsp__storage_, kfStatusStr),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetInsureDetailRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetInsureDetailRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\027\001\007A\000\002\000detailList\000\004\006b\000\005\r\000\006\t\000\007\024\000\010\022\000\t\016\000\n\016\000"
        "\013\020\000\014\r\000\r\022\000\016\014\000\017\010\000\020\021\000\021\021\000\022\021\000\023\014\000\024\030\000\025\000caseDiag"
        "nosePicUrlId\000\026\000dysgnosiaePicUrlId\000\027\007\000\030\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - InsureAssessReq

@implementation InsureAssessReq

@dynamic insureNo;
@dynamic assessType;
@dynamic status;
@dynamic remark;
@dynamic rejectDesc;
@dynamic hgId;
@dynamic dateTime;
@dynamic isAmentia;
@dynamic hsCasePresentation;
@dynamic medicalHistory;
@dynamic dysgnosiaePicArray, dysgnosiaePicArray_Count;
@dynamic caseDiagnosePicArray, caseDiagnosePicArray_Count;

typedef struct InsureAssessReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t assessType;
  uint32_t status;
  uint32_t isAmentia;
  NSString *insureNo;
  NSString *remark;
  NSString *rejectDesc;
  NSString *dateTime;
  NSString *hsCasePresentation;
  NSString *medicalHistory;
  NSMutableArray *dysgnosiaePicArray;
  NSMutableArray *caseDiagnosePicArray;
  uint64_t hgId;
} InsureAssessReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "insureNo",
        .dataTypeSpecific.className = NULL,
        .number = InsureAssessReq_FieldNumber_InsureNo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(InsureAssessReq__storage_, insureNo),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "assessType",
        .dataTypeSpecific.className = NULL,
        .number = InsureAssessReq_FieldNumber_AssessType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(InsureAssessReq__storage_, assessType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = InsureAssessReq_FieldNumber_Status,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(InsureAssessReq__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "remark",
        .dataTypeSpecific.className = NULL,
        .number = InsureAssessReq_FieldNumber_Remark,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(InsureAssessReq__storage_, remark),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "rejectDesc",
        .dataTypeSpecific.className = NULL,
        .number = InsureAssessReq_FieldNumber_RejectDesc,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(InsureAssessReq__storage_, rejectDesc),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "hgId",
        .dataTypeSpecific.className = NULL,
        .number = InsureAssessReq_FieldNumber_HgId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(InsureAssessReq__storage_, hgId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "dateTime",
        .dataTypeSpecific.className = NULL,
        .number = InsureAssessReq_FieldNumber_DateTime,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(InsureAssessReq__storage_, dateTime),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isAmentia",
        .dataTypeSpecific.className = NULL,
        .number = InsureAssessReq_FieldNumber_IsAmentia,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(InsureAssessReq__storage_, isAmentia),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "hsCasePresentation",
        .dataTypeSpecific.className = NULL,
        .number = InsureAssessReq_FieldNumber_HsCasePresentation,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(InsureAssessReq__storage_, hsCasePresentation),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "medicalHistory",
        .dataTypeSpecific.className = NULL,
        .number = InsureAssessReq_FieldNumber_MedicalHistory,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(InsureAssessReq__storage_, medicalHistory),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "dysgnosiaePicArray",
        .dataTypeSpecific.className = NULL,
        .number = InsureAssessReq_FieldNumber_DysgnosiaePicArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(InsureAssessReq__storage_, dysgnosiaePicArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "caseDiagnosePicArray",
        .dataTypeSpecific.className = NULL,
        .number = InsureAssessReq_FieldNumber_CaseDiagnosePicArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(InsureAssessReq__storage_, caseDiagnosePicArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[InsureAssessReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(InsureAssessReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\n\001\007A\000\002\n\000\005\n\000\006\004\000\007\010\000\010\t\000\t\022\000\n\016\000\013\000dysgnosiaePi"
        "c\000\014\000caseDiagnosePic\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SaveOrUpdateInsureReq

@implementation SaveOrUpdateInsureReq

@dynamic insureNo;
@dynamic province;
@dynamic city;
@dynamic district;
@dynamic building;
@dynamic addrDetail;
@dynamic phone;
@dynamic name;
@dynamic staffType;
@dynamic healthCareNo;
@dynamic agencyName;
@dynamic agencyRelation;
@dynamic agencyPhone;
@dynamic applyTreatmentType;
@dynamic treatmentType;
@dynamic insureGetType;
@dynamic userSignPic;
@dynamic entrustPic;
@dynamic healthCarePic;
@dynamic kinsfolkPic;
@dynamic idcardpic;
@dynamic idcardpic2;
@dynamic assessType;

typedef struct SaveOrUpdateInsureReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t staffType;
  uint32_t applyTreatmentType;
  uint32_t treatmentType;
  uint32_t insureGetType;
  uint32_t assessType;
  NSString *insureNo;
  NSString *province;
  NSString *city;
  NSString *district;
  NSString *building;
  NSString *addrDetail;
  NSString *phone;
  NSString *name;
  NSString *healthCareNo;
  NSString *agencyName;
  NSString *agencyRelation;
  NSString *agencyPhone;
  NSString *userSignPic;
  NSString *entrustPic;
  NSString *healthCarePic;
  NSString *kinsfolkPic;
  NSString *idcardpic;
  NSString *idcardpic2;
} SaveOrUpdateInsureReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "insureNo",
        .dataTypeSpecific.className = NULL,
        .number = SaveOrUpdateInsureReq_FieldNumber_InsureNo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SaveOrUpdateInsureReq__storage_, insureNo),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "province",
        .dataTypeSpecific.className = NULL,
        .number = SaveOrUpdateInsureReq_FieldNumber_Province,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SaveOrUpdateInsureReq__storage_, province),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "city",
        .dataTypeSpecific.className = NULL,
        .number = SaveOrUpdateInsureReq_FieldNumber_City,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SaveOrUpdateInsureReq__storage_, city),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "district",
        .dataTypeSpecific.className = NULL,
        .number = SaveOrUpdateInsureReq_FieldNumber_District,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SaveOrUpdateInsureReq__storage_, district),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "building",
        .dataTypeSpecific.className = NULL,
        .number = SaveOrUpdateInsureReq_FieldNumber_Building,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SaveOrUpdateInsureReq__storage_, building),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "addrDetail",
        .dataTypeSpecific.className = NULL,
        .number = SaveOrUpdateInsureReq_FieldNumber_AddrDetail,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SaveOrUpdateInsureReq__storage_, addrDetail),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "phone",
        .dataTypeSpecific.className = NULL,
        .number = SaveOrUpdateInsureReq_FieldNumber_Phone,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(SaveOrUpdateInsureReq__storage_, phone),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = SaveOrUpdateInsureReq_FieldNumber_Name,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(SaveOrUpdateInsureReq__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "staffType",
        .dataTypeSpecific.className = NULL,
        .number = SaveOrUpdateInsureReq_FieldNumber_StaffType,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(SaveOrUpdateInsureReq__storage_, staffType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "healthCareNo",
        .dataTypeSpecific.className = NULL,
        .number = SaveOrUpdateInsureReq_FieldNumber_HealthCareNo,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(SaveOrUpdateInsureReq__storage_, healthCareNo),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "agencyName",
        .dataTypeSpecific.className = NULL,
        .number = SaveOrUpdateInsureReq_FieldNumber_AgencyName,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(SaveOrUpdateInsureReq__storage_, agencyName),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "agencyRelation",
        .dataTypeSpecific.className = NULL,
        .number = SaveOrUpdateInsureReq_FieldNumber_AgencyRelation,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(SaveOrUpdateInsureReq__storage_, agencyRelation),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "agencyPhone",
        .dataTypeSpecific.className = NULL,
        .number = SaveOrUpdateInsureReq_FieldNumber_AgencyPhone,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(SaveOrUpdateInsureReq__storage_, agencyPhone),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "applyTreatmentType",
        .dataTypeSpecific.className = NULL,
        .number = SaveOrUpdateInsureReq_FieldNumber_ApplyTreatmentType,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(SaveOrUpdateInsureReq__storage_, applyTreatmentType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "treatmentType",
        .dataTypeSpecific.className = NULL,
        .number = SaveOrUpdateInsureReq_FieldNumber_TreatmentType,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(SaveOrUpdateInsureReq__storage_, treatmentType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "insureGetType",
        .dataTypeSpecific.className = NULL,
        .number = SaveOrUpdateInsureReq_FieldNumber_InsureGetType,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(SaveOrUpdateInsureReq__storage_, insureGetType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "userSignPic",
        .dataTypeSpecific.className = NULL,
        .number = SaveOrUpdateInsureReq_FieldNumber_UserSignPic,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(SaveOrUpdateInsureReq__storage_, userSignPic),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "entrustPic",
        .dataTypeSpecific.className = NULL,
        .number = SaveOrUpdateInsureReq_FieldNumber_EntrustPic,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(SaveOrUpdateInsureReq__storage_, entrustPic),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "healthCarePic",
        .dataTypeSpecific.className = NULL,
        .number = SaveOrUpdateInsureReq_FieldNumber_HealthCarePic,
        .hasIndex = 18,
        .offset = (uint32_t)offsetof(SaveOrUpdateInsureReq__storage_, healthCarePic),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "kinsfolkPic",
        .dataTypeSpecific.className = NULL,
        .number = SaveOrUpdateInsureReq_FieldNumber_KinsfolkPic,
        .hasIndex = 19,
        .offset = (uint32_t)offsetof(SaveOrUpdateInsureReq__storage_, kinsfolkPic),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "idcardpic",
        .dataTypeSpecific.className = NULL,
        .number = SaveOrUpdateInsureReq_FieldNumber_Idcardpic,
        .hasIndex = 20,
        .offset = (uint32_t)offsetof(SaveOrUpdateInsureReq__storage_, idcardpic),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "idcardpic2",
        .dataTypeSpecific.className = NULL,
        .number = SaveOrUpdateInsureReq_FieldNumber_Idcardpic2,
        .hasIndex = 21,
        .offset = (uint32_t)offsetof(SaveOrUpdateInsureReq__storage_, idcardpic2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "assessType",
        .dataTypeSpecific.className = NULL,
        .number = SaveOrUpdateInsureReq_FieldNumber_AssessType,
        .hasIndex = 22,
        .offset = (uint32_t)offsetof(SaveOrUpdateInsureReq__storage_, assessType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SaveOrUpdateInsureReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SaveOrUpdateInsureReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\017\001\007A\000\006\n\000\t\t\000\n\013A\000\013\n\000\014\016\000\r\013\000\016\022\000\017\r\000\020\r\000\021\013\000\022\n\000\023"
        "\r\000\024\013\000\027\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetUserInfoByOrgNOReq

@implementation GetUserInfoByOrgNOReq

@dynamic orgNo;
@dynamic orgId;

typedef struct GetUserInfoByOrgNOReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *orgNo;
  uint64_t orgId;
} GetUserInfoByOrgNOReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orgNo",
        .dataTypeSpecific.className = NULL,
        .number = GetUserInfoByOrgNOReq_FieldNumber_OrgNo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetUserInfoByOrgNOReq__storage_, orgNo),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "orgId",
        .dataTypeSpecific.className = NULL,
        .number = GetUserInfoByOrgNOReq_FieldNumber_OrgId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetUserInfoByOrgNOReq__storage_, orgId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetUserInfoByOrgNOReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetUserInfoByOrgNOReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\004A\000\002\005\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetUserInfoByOrgNORsp

@implementation GetUserInfoByOrgNORsp

@dynamic hasBra, bra;
@dynamic rspFlag;
@dynamic errorMsg;

typedef struct GetUserInfoByOrgNORsp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t rspFlag;
  HospitalBra *bra;
  NSString *errorMsg;
} GetUserInfoByOrgNORsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "bra",
        .dataTypeSpecific.className = GPBStringifySymbol(HospitalBra),
        .number = GetUserInfoByOrgNORsp_FieldNumber_Bra,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetUserInfoByOrgNORsp__storage_, bra),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "rspFlag",
        .dataTypeSpecific.className = NULL,
        .number = GetUserInfoByOrgNORsp_FieldNumber_RspFlag,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetUserInfoByOrgNORsp__storage_, rspFlag),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "errorMsg",
        .dataTypeSpecific.className = NULL,
        .number = GetUserInfoByOrgNORsp_FieldNumber_ErrorMsg,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetUserInfoByOrgNORsp__storage_, errorMsg),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetUserInfoByOrgNORsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetUserInfoByOrgNORsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\002\007\000\003\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RefundOrderReq

@implementation RefundOrderReq

@dynamic orderId;
@dynamic refundPayType;

typedef struct RefundOrderReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t refundPayType;
  NSString *orderId;
} RefundOrderReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = RefundOrderReq_FieldNumber_OrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RefundOrderReq__storage_, orderId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "refundPayType",
        .dataTypeSpecific.className = NULL,
        .number = RefundOrderReq_FieldNumber_RefundPayType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RefundOrderReq__storage_, refundPayType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RefundOrderReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RefundOrderReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\007\000\002\r\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetPayTypeRsp

@implementation GetPayTypeRsp

@dynamic payTypeListArray, payTypeListArray_Count;

typedef struct GetPayTypeRsp__storage_ {
  uint32_t _has_storage_[1];
  GPBUInt32Array *payTypeListArray;
} GetPayTypeRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "payTypeListArray",
        .dataTypeSpecific.className = NULL,
        .number = GetPayTypeRsp_FieldNumber_PayTypeListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetPayTypeRsp__storage_, payTypeListArray),
        .flags = GPBFieldRepeated | GPBFieldPacked | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetPayTypeRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetPayTypeRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\000payTypeList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetQRCodeReq

@implementation GetQRCodeReq

@dynamic width;
@dynamic height;
@dynamic purpose;
@dynamic format;
@dynamic URLType;
@dynamic orderId;

typedef struct GetQRCodeReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t URLType;
  NSString *width;
  NSString *height;
  NSString *purpose;
  NSString *format;
  NSString *orderId;
} GetQRCodeReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "width",
        .dataTypeSpecific.className = NULL,
        .number = GetQRCodeReq_FieldNumber_Width,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetQRCodeReq__storage_, width),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "height",
        .dataTypeSpecific.className = NULL,
        .number = GetQRCodeReq_FieldNumber_Height,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetQRCodeReq__storage_, height),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "purpose",
        .dataTypeSpecific.className = NULL,
        .number = GetQRCodeReq_FieldNumber_Purpose,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetQRCodeReq__storage_, purpose),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "format",
        .dataTypeSpecific.className = NULL,
        .number = GetQRCodeReq_FieldNumber_Format,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetQRCodeReq__storage_, format),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "URLType",
        .dataTypeSpecific.className = NULL,
        .number = GetQRCodeReq_FieldNumber_URLType,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GetQRCodeReq__storage_, URLType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = GetQRCodeReq_FieldNumber_OrderId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(GetQRCodeReq__storage_, orderId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetQRCodeReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetQRCodeReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\005!!%\000\006\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetQRCodeRsp

@implementation GetQRCodeRsp

@dynamic qrcodeUri;
@dynamic accessToken;
@dynamic time;

typedef struct GetQRCodeRsp__storage_ {
  uint32_t _has_storage_[1];
  NSString *qrcodeUri;
  NSString *accessToken;
  int64_t time;
} GetQRCodeRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "qrcodeUri",
        .dataTypeSpecific.className = NULL,
        .number = GetQRCodeRsp_FieldNumber_QrcodeUri,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetQRCodeRsp__storage_, qrcodeUri),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "accessToken",
        .dataTypeSpecific.className = NULL,
        .number = GetQRCodeRsp_FieldNumber_AccessToken,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetQRCodeRsp__storage_, accessToken),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "time",
        .dataTypeSpecific.className = NULL,
        .number = GetQRCodeRsp_FieldNumber_Time,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetQRCodeRsp__storage_, time),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetQRCodeRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetQRCodeRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\007b\000\002\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetOrderItemRsp

@implementation GetOrderItemRsp

@dynamic serviceListArray, serviceListArray_Count;
@dynamic extraListArray, extraListArray_Count;
@dynamic totalFee;
@dynamic totalCostPrc;
@dynamic numberPrc;
@dynamic serviceTotalFee;
@dynamic totalFeeStr;
@dynamic totalCostPrcstr;
@dynamic serviceTotalFeeStr;
@dynamic hasOrder, order;
@dynamic priceVoordinaryListArray, priceVoordinaryListArray_Count;
@dynamic priceVoadjustListArray, priceVoadjustListArray_Count;
@dynamic priceVoprcListArray, priceVoprcListArray_Count;
@dynamic hgRebateFeeStr;
@dynamic hgRebateType;
@dynamic hgRebateTypeStr;
@dynamic isUpdatePrcfee;
@dynamic isHgRebateTypeStatus;
@dynamic totalAllfee;
@dynamic totalAllfeeStr;
@dynamic prcOrderSignConfig;

typedef struct GetOrderItemRsp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t prcOrderSignConfig;
  NSMutableArray *serviceListArray;
  NSMutableArray *extraListArray;
  NSString *totalFeeStr;
  NSString *totalCostPrcstr;
  NSString *serviceTotalFeeStr;
  OrderVO *order;
  NSMutableArray *priceVoordinaryListArray;
  NSMutableArray *priceVoadjustListArray;
  NSMutableArray *priceVoprcListArray;
  NSString *hgRebateFeeStr;
  NSString *hgRebateTypeStr;
  NSString *totalAllfeeStr;
  int64_t totalFee;
  int64_t totalCostPrc;
  int64_t numberPrc;
  int64_t serviceTotalFee;
  int64_t hgRebateType;
  int64_t totalAllfee;
} GetOrderItemRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "serviceListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(OrderItemVO3),
        .number = GetOrderItemRsp_FieldNumber_ServiceListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetOrderItemRsp__storage_, serviceListArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "extraListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(OrderItemVO2),
        .number = GetOrderItemRsp_FieldNumber_ExtraListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetOrderItemRsp__storage_, extraListArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "totalFee",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderItemRsp_FieldNumber_TotalFee,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetOrderItemRsp__storage_, totalFee),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "totalCostPrc",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderItemRsp_FieldNumber_TotalCostPrc,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetOrderItemRsp__storage_, totalCostPrc),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "numberPrc",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderItemRsp_FieldNumber_NumberPrc,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetOrderItemRsp__storage_, numberPrc),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "serviceTotalFee",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderItemRsp_FieldNumber_ServiceTotalFee,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetOrderItemRsp__storage_, serviceTotalFee),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "totalFeeStr",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderItemRsp_FieldNumber_TotalFeeStr,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GetOrderItemRsp__storage_, totalFeeStr),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "totalCostPrcstr",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderItemRsp_FieldNumber_TotalCostPrcstr,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(GetOrderItemRsp__storage_, totalCostPrcstr),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "serviceTotalFeeStr",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderItemRsp_FieldNumber_ServiceTotalFeeStr,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(GetOrderItemRsp__storage_, serviceTotalFeeStr),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "order",
        .dataTypeSpecific.className = GPBStringifySymbol(OrderVO),
        .number = GetOrderItemRsp_FieldNumber_Order,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(GetOrderItemRsp__storage_, order),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "priceVoordinaryListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(CompanyPriceVO),
        .number = GetOrderItemRsp_FieldNumber_PriceVoordinaryListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetOrderItemRsp__storage_, priceVoordinaryListArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "priceVoadjustListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(CompanyPriceVO),
        .number = GetOrderItemRsp_FieldNumber_PriceVoadjustListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetOrderItemRsp__storage_, priceVoadjustListArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "priceVoprcListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(CompanyPriceVO),
        .number = GetOrderItemRsp_FieldNumber_PriceVoprcListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetOrderItemRsp__storage_, priceVoprcListArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "hgRebateFeeStr",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderItemRsp_FieldNumber_HgRebateFeeStr,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(GetOrderItemRsp__storage_, hgRebateFeeStr),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "hgRebateType",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderItemRsp_FieldNumber_HgRebateType,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(GetOrderItemRsp__storage_, hgRebateType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "hgRebateTypeStr",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderItemRsp_FieldNumber_HgRebateTypeStr,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(GetOrderItemRsp__storage_, hgRebateTypeStr),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isUpdatePrcfee",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderItemRsp_FieldNumber_IsUpdatePrcfee,
        .hasIndex = 11,
        .offset = 12,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isHgRebateTypeStatus",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderItemRsp_FieldNumber_IsHgRebateTypeStatus,
        .hasIndex = 13,
        .offset = 14,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "totalAllfee",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderItemRsp_FieldNumber_TotalAllfee,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(GetOrderItemRsp__storage_, totalAllfee),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "totalAllfeeStr",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderItemRsp_FieldNumber_TotalAllfeeStr,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(GetOrderItemRsp__storage_, totalAllfeeStr),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "prcOrderSignConfig",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderItemRsp_FieldNumber_PrcOrderSignConfig,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(GetOrderItemRsp__storage_, prcOrderSignConfig),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetOrderItemRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetOrderItemRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\024\001\000serviceList\000\002\000extraList\000\003\010\000\004\nb\000\006\007b\000\007\017"
        "\000\010\013\000\t\nc\002\000\n\022\000\014\000priceVOOrdinaryList\000\r\000pric"
        "eVOAdjustList\000\016\000priceVOPrcList\000\017\016\000\020\014\000\021\017\000"
        "\022\tc\002\000\023\024\000\024\006c\002\000\025\006c\005\000\026\022\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CreateErrorReq

@implementation CreateErrorReq

@dynamic createType;
@dynamic terraceType;
@dynamic errorType;
@dynamic logText;
@dynamic URL;

typedef struct CreateErrorReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t createType;
  uint32_t terraceType;
  uint32_t errorType;
  NSString *logText;
  NSString *URL;
} CreateErrorReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "createType",
        .dataTypeSpecific.className = NULL,
        .number = CreateErrorReq_FieldNumber_CreateType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CreateErrorReq__storage_, createType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "terraceType",
        .dataTypeSpecific.className = NULL,
        .number = CreateErrorReq_FieldNumber_TerraceType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CreateErrorReq__storage_, terraceType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "errorType",
        .dataTypeSpecific.className = NULL,
        .number = CreateErrorReq_FieldNumber_ErrorType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CreateErrorReq__storage_, errorType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "logText",
        .dataTypeSpecific.className = NULL,
        .number = CreateErrorReq_FieldNumber_LogText,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(CreateErrorReq__storage_, logText),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "URL",
        .dataTypeSpecific.className = NULL,
        .number = CreateErrorReq_FieldNumber_URL,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(CreateErrorReq__storage_, URL),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CreateErrorReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CreateErrorReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001\n\000\002\013\000\003\t\000\004\007\000\005!!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OrderItemNightReq

@implementation OrderItemNightReq

@dynamic orderId;

typedef struct OrderItemNightReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *orderId;
} OrderItemNightReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = OrderItemNightReq_FieldNumber_OrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OrderItemNightReq__storage_, orderId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OrderItemNightReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OrderItemNightReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OrderItemNightRsp

@implementation OrderItemNightRsp

@dynamic priceVolistArray, priceVolistArray_Count;
@dynamic orderItemNightVolistArray, orderItemNightVolistArray_Count;
@dynamic nightHgStatus;
@dynamic nightNumber;
@dynamic orgId;
@dynamic branchId;
@dynamic workType;

typedef struct OrderItemNightRsp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t nightHgStatus;
  uint32_t workType;
  NSMutableArray *priceVolistArray;
  NSMutableArray *orderItemNightVolistArray;
  uint64_t nightNumber;
  uint64_t orgId;
  uint64_t branchId;
} OrderItemNightRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "priceVolistArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PriceVO),
        .number = OrderItemNightRsp_FieldNumber_PriceVolistArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(OrderItemNightRsp__storage_, priceVolistArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "orderItemNightVolistArray",
        .dataTypeSpecific.className = GPBStringifySymbol(OrderItemNightVO),
        .number = OrderItemNightRsp_FieldNumber_OrderItemNightVolistArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(OrderItemNightRsp__storage_, orderItemNightVolistArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "nightHgStatus",
        .dataTypeSpecific.className = NULL,
        .number = OrderItemNightRsp_FieldNumber_NightHgStatus,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OrderItemNightRsp__storage_, nightHgStatus),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "nightNumber",
        .dataTypeSpecific.className = NULL,
        .number = OrderItemNightRsp_FieldNumber_NightNumber,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OrderItemNightRsp__storage_, nightNumber),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "orgId",
        .dataTypeSpecific.className = NULL,
        .number = OrderItemNightRsp_FieldNumber_OrgId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OrderItemNightRsp__storage_, orgId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "branchId",
        .dataTypeSpecific.className = NULL,
        .number = OrderItemNightRsp_FieldNumber_BranchId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(OrderItemNightRsp__storage_, branchId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "workType",
        .dataTypeSpecific.className = NULL,
        .number = OrderItemNightRsp_FieldNumber_WorkType,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(OrderItemNightRsp__storage_, workType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OrderItemNightRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OrderItemNightRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\007\001\000priceVOList\000\002\000orderItemNightVOList\000\003\r"
        "\000\004\013\000\005\005\000\006\010\000\007\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetStaffListReq

@implementation GetStaffListReq

@dynamic orgId;
@dynamic branchId;
@dynamic workType;

typedef struct GetStaffListReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t workType;
  uint64_t orgId;
  uint64_t branchId;
} GetStaffListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orgId",
        .dataTypeSpecific.className = NULL,
        .number = GetStaffListReq_FieldNumber_OrgId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetStaffListReq__storage_, orgId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "branchId",
        .dataTypeSpecific.className = NULL,
        .number = GetStaffListReq_FieldNumber_BranchId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetStaffListReq__storage_, branchId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "workType",
        .dataTypeSpecific.className = NULL,
        .number = GetStaffListReq_FieldNumber_WorkType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetStaffListReq__storage_, workType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetStaffListReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetStaffListReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\005\000\002\010\000\003\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SaveOrUpdateOrderItemNighReq

@implementation SaveOrUpdateOrderItemNighReq

@dynamic orderId;
@dynamic priceId;
@dynamic itemId;
@dynamic hgId;
@dynamic type;

typedef struct SaveOrUpdateOrderItemNighReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t type;
  NSString *orderId;
  uint64_t priceId;
  uint64_t itemId;
  uint64_t hgId;
} SaveOrUpdateOrderItemNighReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = SaveOrUpdateOrderItemNighReq_FieldNumber_OrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SaveOrUpdateOrderItemNighReq__storage_, orderId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "priceId",
        .dataTypeSpecific.className = NULL,
        .number = SaveOrUpdateOrderItemNighReq_FieldNumber_PriceId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SaveOrUpdateOrderItemNighReq__storage_, priceId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "itemId",
        .dataTypeSpecific.className = NULL,
        .number = SaveOrUpdateOrderItemNighReq_FieldNumber_ItemId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SaveOrUpdateOrderItemNighReq__storage_, itemId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "hgId",
        .dataTypeSpecific.className = NULL,
        .number = SaveOrUpdateOrderItemNighReq_FieldNumber_HgId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SaveOrUpdateOrderItemNighReq__storage_, hgId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = SaveOrUpdateOrderItemNighReq_FieldNumber_Type,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SaveOrUpdateOrderItemNighReq__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SaveOrUpdateOrderItemNighReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SaveOrUpdateOrderItemNighReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001\007\000\002\007\000\003\006\000\004\004\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CreateOrUpdateOrderItemPriceRsp

@implementation CreateOrUpdateOrderItemPriceRsp

@dynamic isUpdateNight;

typedef struct CreateOrUpdateOrderItemPriceRsp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t isUpdateNight;
} CreateOrUpdateOrderItemPriceRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "isUpdateNight",
        .dataTypeSpecific.className = NULL,
        .number = CreateOrUpdateOrderItemPriceRsp_FieldNumber_IsUpdateNight,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CreateOrUpdateOrderItemPriceRsp__storage_, isUpdateNight),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CreateOrUpdateOrderItemPriceRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CreateOrUpdateOrderItemPriceRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\r\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UpdateOndutyReq

@implementation UpdateOndutyReq

@dynamic onduty;

typedef struct UpdateOndutyReq__storage_ {
  uint32_t _has_storage_[1];
} UpdateOndutyReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "onduty",
        .dataTypeSpecific.className = NULL,
        .number = UpdateOndutyReq_FieldNumber_Onduty,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateOndutyReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateOndutyReq__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetInsurePriceListReq

@implementation GetInsurePriceListReq

@dynamic insureNo;
@dynamic serviceType;

typedef struct GetInsurePriceListReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t serviceType;
  NSString *insureNo;
} GetInsurePriceListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "insureNo",
        .dataTypeSpecific.className = NULL,
        .number = GetInsurePriceListReq_FieldNumber_InsureNo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetInsurePriceListReq__storage_, insureNo),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "serviceType",
        .dataTypeSpecific.className = NULL,
        .number = GetInsurePriceListReq_FieldNumber_ServiceType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetInsurePriceListReq__storage_, serviceType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetInsurePriceListReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetInsurePriceListReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\007A\000\002\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetInsurePriceListRsp

@implementation GetInsurePriceListRsp

@dynamic priceListArray, priceListArray_Count;

typedef struct GetInsurePriceListRsp__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *priceListArray;
} GetInsurePriceListRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "priceListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(InsurePriceVO),
        .number = GetInsurePriceListRsp_FieldNumber_PriceListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetInsurePriceListRsp__storage_, priceListArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetInsurePriceListRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetInsurePriceListRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\000priceList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetInsureOrderInfoReq

@implementation GetInsureOrderInfoReq

@dynamic insureNo;
@dynamic orderId;

typedef struct GetInsureOrderInfoReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *insureNo;
  NSString *orderId;
} GetInsureOrderInfoReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "insureNo",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureOrderInfoReq_FieldNumber_InsureNo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetInsureOrderInfoReq__storage_, insureNo),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureOrderInfoReq_FieldNumber_OrderId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetInsureOrderInfoReq__storage_, orderId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetInsureOrderInfoReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetInsureOrderInfoReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\007A\000\002\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetInsureOrderInfoRsp

@implementation GetInsureOrderInfoRsp

@dynamic kinsId;
@dynamic kinsName;
@dynamic scoreAdl;
@dynamic companyName;
@dynamic addrId;
@dynamic contactName;
@dynamic contactPhone;
@dynamic address;
@dynamic phone;
@dynamic relationName;
@dynamic relation;
@dynamic relationPhone;
@dynamic relationIdcard;
@dynamic userId;
@dynamic insureNo;

typedef struct GetInsureOrderInfoRsp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t scoreAdl;
  NSString *kinsName;
  NSString *companyName;
  NSString *contactName;
  NSString *contactPhone;
  NSString *address;
  NSString *phone;
  NSString *relationName;
  NSString *relation;
  NSString *relationPhone;
  NSString *relationIdcard;
  NSString *insureNo;
  uint64_t kinsId;
  uint64_t addrId;
  uint64_t userId;
} GetInsureOrderInfoRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "kinsId",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureOrderInfoRsp_FieldNumber_KinsId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetInsureOrderInfoRsp__storage_, kinsId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "kinsName",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureOrderInfoRsp_FieldNumber_KinsName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetInsureOrderInfoRsp__storage_, kinsName),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "scoreAdl",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureOrderInfoRsp_FieldNumber_ScoreAdl,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetInsureOrderInfoRsp__storage_, scoreAdl),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "companyName",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureOrderInfoRsp_FieldNumber_CompanyName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetInsureOrderInfoRsp__storage_, companyName),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "addrId",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureOrderInfoRsp_FieldNumber_AddrId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GetInsureOrderInfoRsp__storage_, addrId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "contactName",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureOrderInfoRsp_FieldNumber_ContactName,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(GetInsureOrderInfoRsp__storage_, contactName),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "contactPhone",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureOrderInfoRsp_FieldNumber_ContactPhone,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(GetInsureOrderInfoRsp__storage_, contactPhone),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "address",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureOrderInfoRsp_FieldNumber_Address,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(GetInsureOrderInfoRsp__storage_, address),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "phone",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureOrderInfoRsp_FieldNumber_Phone,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(GetInsureOrderInfoRsp__storage_, phone),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "relationName",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureOrderInfoRsp_FieldNumber_RelationName,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(GetInsureOrderInfoRsp__storage_, relationName),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "relation",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureOrderInfoRsp_FieldNumber_Relation,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(GetInsureOrderInfoRsp__storage_, relation),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "relationPhone",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureOrderInfoRsp_FieldNumber_RelationPhone,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(GetInsureOrderInfoRsp__storage_, relationPhone),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "relationIdcard",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureOrderInfoRsp_FieldNumber_RelationIdcard,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(GetInsureOrderInfoRsp__storage_, relationIdcard),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureOrderInfoRsp_FieldNumber_UserId,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(GetInsureOrderInfoRsp__storage_, userId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "insureNo",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureOrderInfoRsp_FieldNumber_InsureNo,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(GetInsureOrderInfoRsp__storage_, insureNo),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetInsureOrderInfoRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetInsureOrderInfoRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\014\001\006\000\002\010\000\003\006b\000\004\013\000\005\006\000\006\013\000\007\014\000\n\014\000\014\r\000\r\016\000\016\006\000\017\007A\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AddInsureOrderReq

@implementation AddInsureOrderReq

@dynamic priceId;
@dynamic addrId;
@dynamic phone;
@dynamic code;
@dynamic hgName;
@dynamic idcard;
@dynamic relation;
@dynamic hgNo;
@dynamic insureNo;
@dynamic orderId;
@dynamic remark;

typedef struct AddInsureOrderReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *phone;
  NSString *code;
  NSString *hgName;
  NSString *idcard;
  NSString *relation;
  NSString *hgNo;
  NSString *insureNo;
  NSString *orderId;
  NSString *remark;
  uint64_t priceId;
  uint64_t addrId;
} AddInsureOrderReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "priceId",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureOrderReq_FieldNumber_PriceId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AddInsureOrderReq__storage_, priceId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "addrId",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureOrderReq_FieldNumber_AddrId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AddInsureOrderReq__storage_, addrId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "phone",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureOrderReq_FieldNumber_Phone,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(AddInsureOrderReq__storage_, phone),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "code",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureOrderReq_FieldNumber_Code,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(AddInsureOrderReq__storage_, code),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "hgName",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureOrderReq_FieldNumber_HgName,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(AddInsureOrderReq__storage_, hgName),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "idcard",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureOrderReq_FieldNumber_Idcard,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(AddInsureOrderReq__storage_, idcard),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "relation",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureOrderReq_FieldNumber_Relation,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(AddInsureOrderReq__storage_, relation),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "hgNo",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureOrderReq_FieldNumber_HgNo,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(AddInsureOrderReq__storage_, hgNo),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "insureNo",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureOrderReq_FieldNumber_InsureNo,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(AddInsureOrderReq__storage_, insureNo),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureOrderReq_FieldNumber_OrderId,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(AddInsureOrderReq__storage_, orderId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "remark",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureOrderReq_FieldNumber_Remark,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(AddInsureOrderReq__storage_, remark),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AddInsureOrderReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AddInsureOrderReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\006\001\007\000\002\006\000\005\006\000\010\003A\000\t\007A\000\n\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AddInsureOrderRsp

@implementation AddInsureOrderRsp

@dynamic orderId;
@dynamic serviceItem;
@dynamic contactName;
@dynamic contactPhone;
@dynamic addrDetail;
@dynamic notice;
@dynamic serviceType;

typedef struct AddInsureOrderRsp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t serviceType;
  NSString *orderId;
  NSString *serviceItem;
  NSString *contactName;
  NSString *contactPhone;
  NSString *addrDetail;
  NSString *notice;
} AddInsureOrderRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureOrderRsp_FieldNumber_OrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AddInsureOrderRsp__storage_, orderId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "serviceItem",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureOrderRsp_FieldNumber_ServiceItem,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AddInsureOrderRsp__storage_, serviceItem),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "contactName",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureOrderRsp_FieldNumber_ContactName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(AddInsureOrderRsp__storage_, contactName),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "contactPhone",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureOrderRsp_FieldNumber_ContactPhone,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(AddInsureOrderRsp__storage_, contactPhone),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "addrDetail",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureOrderRsp_FieldNumber_AddrDetail,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(AddInsureOrderRsp__storage_, addrDetail),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "notice",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureOrderRsp_FieldNumber_Notice,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(AddInsureOrderRsp__storage_, notice),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "serviceType",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureOrderRsp_FieldNumber_ServiceType,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(AddInsureOrderRsp__storage_, serviceType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AddInsureOrderRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AddInsureOrderRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\006\001\007\000\002\013\000\003\013\000\004\014\000\005\n\000\007\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetOrderListNewRsp

@implementation GetOrderListNewRsp

@dynamic orderListArray, orderListArray_Count;
@dynamic count;
@dynamic showPhone;

typedef struct GetOrderListNewRsp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t count;
  NSMutableArray *orderListArray;
} GetOrderListNewRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(OrderListVO),
        .number = GetOrderListNewRsp_FieldNumber_OrderListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetOrderListNewRsp__storage_, orderListArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderListNewRsp_FieldNumber_Count,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetOrderListNewRsp__storage_, count),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "showPhone",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderListNewRsp_FieldNumber_ShowPhone,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetOrderListNewRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetOrderListNewRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\000orderList\000\003\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetKinsInsureReq

@implementation GetKinsInsureReq

@dynamic orderId;
@dynamic hgnoName;

typedef struct GetKinsInsureReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *orderId;
  NSString *hgnoName;
} GetKinsInsureReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = GetKinsInsureReq_FieldNumber_OrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetKinsInsureReq__storage_, orderId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "hgnoName",
        .dataTypeSpecific.className = NULL,
        .number = GetKinsInsureReq_FieldNumber_HgnoName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetKinsInsureReq__storage_, hgnoName),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetKinsInsureReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetKinsInsureReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\007\000\002\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetKinsInsureRsp

@implementation GetKinsInsureRsp

@dynamic kinsId;
@dynamic kinsName;
@dynamic sex;
@dynamic age;
@dynamic staffType;
@dynamic startTime;
@dynamic startTimeStr;
@dynamic endTime;
@dynamic endTimeStr;
@dynamic scoreAdl;
@dynamic isAmentia;
@dynamic medicalHistory;
@dynamic hsCasePresentation;
@dynamic hsRemark;

typedef struct GetKinsInsureRsp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t sex;
  uint32_t staffType;
  int32_t scoreAdl;
  uint32_t isAmentia;
  NSString *kinsName;
  NSString *startTimeStr;
  NSString *endTimeStr;
  NSString *medicalHistory;
  NSString *hsCasePresentation;
  NSString *hsRemark;
  uint64_t kinsId;
  uint64_t age;
  uint64_t startTime;
  uint64_t endTime;
} GetKinsInsureRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "kinsId",
        .dataTypeSpecific.className = NULL,
        .number = GetKinsInsureRsp_FieldNumber_KinsId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetKinsInsureRsp__storage_, kinsId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "kinsName",
        .dataTypeSpecific.className = NULL,
        .number = GetKinsInsureRsp_FieldNumber_KinsName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetKinsInsureRsp__storage_, kinsName),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sex",
        .dataTypeSpecific.className = NULL,
        .number = GetKinsInsureRsp_FieldNumber_Sex,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetKinsInsureRsp__storage_, sex),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "age",
        .dataTypeSpecific.className = NULL,
        .number = GetKinsInsureRsp_FieldNumber_Age,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetKinsInsureRsp__storage_, age),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "staffType",
        .dataTypeSpecific.className = NULL,
        .number = GetKinsInsureRsp_FieldNumber_StaffType,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GetKinsInsureRsp__storage_, staffType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "startTime",
        .dataTypeSpecific.className = NULL,
        .number = GetKinsInsureRsp_FieldNumber_StartTime,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(GetKinsInsureRsp__storage_, startTime),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "startTimeStr",
        .dataTypeSpecific.className = NULL,
        .number = GetKinsInsureRsp_FieldNumber_StartTimeStr,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(GetKinsInsureRsp__storage_, startTimeStr),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "endTime",
        .dataTypeSpecific.className = NULL,
        .number = GetKinsInsureRsp_FieldNumber_EndTime,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(GetKinsInsureRsp__storage_, endTime),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "endTimeStr",
        .dataTypeSpecific.className = NULL,
        .number = GetKinsInsureRsp_FieldNumber_EndTimeStr,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(GetKinsInsureRsp__storage_, endTimeStr),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "scoreAdl",
        .dataTypeSpecific.className = NULL,
        .number = GetKinsInsureRsp_FieldNumber_ScoreAdl,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(GetKinsInsureRsp__storage_, scoreAdl),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "isAmentia",
        .dataTypeSpecific.className = NULL,
        .number = GetKinsInsureRsp_FieldNumber_IsAmentia,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(GetKinsInsureRsp__storage_, isAmentia),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "medicalHistory",
        .dataTypeSpecific.className = NULL,
        .number = GetKinsInsureRsp_FieldNumber_MedicalHistory,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(GetKinsInsureRsp__storage_, medicalHistory),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "hsCasePresentation",
        .dataTypeSpecific.className = NULL,
        .number = GetKinsInsureRsp_FieldNumber_HsCasePresentation,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(GetKinsInsureRsp__storage_, hsCasePresentation),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "hsRemark",
        .dataTypeSpecific.className = NULL,
        .number = GetKinsInsureRsp_FieldNumber_HsRemark,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(GetKinsInsureRsp__storage_, hsRemark),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetKinsInsureRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetKinsInsureRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\014\001\006\000\002\010\000\005\t\000\006\t\000\007\014\000\010\007\000\t\n\000\n\006b\000\013\t\000\014\016\000\r\022\000\016\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetHgAppRsp

@implementation GetHgAppRsp

@dynamic hasHgApply, hgApply;
@dynamic orderNumber;
@dynamic sendTimeStr;

typedef struct GetHgAppRsp__storage_ {
  uint32_t _has_storage_[1];
  HGApply *hgApply;
  NSString *sendTimeStr;
  uint64_t orderNumber;
} GetHgAppRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "hgApply",
        .dataTypeSpecific.className = GPBStringifySymbol(HGApply),
        .number = GetHgAppRsp_FieldNumber_HgApply,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetHgAppRsp__storage_, hgApply),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "orderNumber",
        .dataTypeSpecific.className = NULL,
        .number = GetHgAppRsp_FieldNumber_OrderNumber,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetHgAppRsp__storage_, orderNumber),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "sendTimeStr",
        .dataTypeSpecific.className = NULL,
        .number = GetHgAppRsp_FieldNumber_SendTimeStr,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetHgAppRsp__storage_, sendTimeStr),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetHgAppRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetHgAppRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\007\000\002\013\000\003\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetInsureHGInfoRsp

@implementation GetInsureHGInfoRsp

@dynamic id_p;
@dynamic fullName;
@dynamic picURL;
@dynamic sex;
@dynamic age;
@dynamic nativeplace;
@dynamic serviceNum;
@dynamic praise;
@dynamic serviceOrg;
@dynamic hgno;
@dynamic seniority;
@dynamic language;
@dynamic companyName;
@dynamic goodAtProject;
@dynamic healthCertificate;
@dynamic healthCertificateURL;
@dynamic nursingCertificate;
@dynamic nursingCertificateURL;

typedef struct GetInsureHGInfoRsp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t sex;
  uint32_t praise;
  uint32_t seniority;
  NSString *fullName;
  NSString *picURL;
  NSString *nativeplace;
  NSString *serviceOrg;
  NSString *hgno;
  NSString *language;
  NSString *companyName;
  NSString *goodAtProject;
  NSString *healthCertificate;
  NSString *healthCertificateURL;
  NSString *nursingCertificate;
  NSString *nursingCertificateURL;
  uint64_t id_p;
  uint64_t age;
  uint64_t serviceNum;
} GetInsureHGInfoRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureHGInfoRsp_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetInsureHGInfoRsp__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "fullName",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureHGInfoRsp_FieldNumber_FullName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetInsureHGInfoRsp__storage_, fullName),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "picURL",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureHGInfoRsp_FieldNumber_PicURL,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetInsureHGInfoRsp__storage_, picURL),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sex",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureHGInfoRsp_FieldNumber_Sex,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetInsureHGInfoRsp__storage_, sex),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "age",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureHGInfoRsp_FieldNumber_Age,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GetInsureHGInfoRsp__storage_, age),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "nativeplace",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureHGInfoRsp_FieldNumber_Nativeplace,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(GetInsureHGInfoRsp__storage_, nativeplace),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "serviceNum",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureHGInfoRsp_FieldNumber_ServiceNum,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(GetInsureHGInfoRsp__storage_, serviceNum),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "praise",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureHGInfoRsp_FieldNumber_Praise,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(GetInsureHGInfoRsp__storage_, praise),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "serviceOrg",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureHGInfoRsp_FieldNumber_ServiceOrg,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(GetInsureHGInfoRsp__storage_, serviceOrg),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "hgno",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureHGInfoRsp_FieldNumber_Hgno,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(GetInsureHGInfoRsp__storage_, hgno),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "seniority",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureHGInfoRsp_FieldNumber_Seniority,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(GetInsureHGInfoRsp__storage_, seniority),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "language",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureHGInfoRsp_FieldNumber_Language,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(GetInsureHGInfoRsp__storage_, language),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "companyName",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureHGInfoRsp_FieldNumber_CompanyName,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(GetInsureHGInfoRsp__storage_, companyName),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "goodAtProject",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureHGInfoRsp_FieldNumber_GoodAtProject,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(GetInsureHGInfoRsp__storage_, goodAtProject),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "healthCertificate",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureHGInfoRsp_FieldNumber_HealthCertificate,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(GetInsureHGInfoRsp__storage_, healthCertificate),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "healthCertificateURL",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureHGInfoRsp_FieldNumber_HealthCertificateURL,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(GetInsureHGInfoRsp__storage_, healthCertificateURL),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "nursingCertificate",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureHGInfoRsp_FieldNumber_NursingCertificate,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(GetInsureHGInfoRsp__storage_, nursingCertificate),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "nursingCertificateURL",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureHGInfoRsp_FieldNumber_NursingCertificateURL,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(GetInsureHGInfoRsp__storage_, nursingCertificateURL),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetInsureHGInfoRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetInsureHGInfoRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\n\002\010\000\003\004!!\000\007\n\000\t\n\000\r\013\000\016\r\000\017\021\000\020\022!!\000\021\022\000\022\023!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetinsureHGListRsp

@implementation GetinsureHGListRsp

@dynamic insureHglistVoArray, insureHglistVoArray_Count;

typedef struct GetinsureHGListRsp__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *insureHglistVoArray;
} GetinsureHGListRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "insureHglistVoArray",
        .dataTypeSpecific.className = GPBStringifySymbol(InsureHGListVO),
        .number = GetinsureHGListRsp_FieldNumber_InsureHglistVoArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetinsureHGListRsp__storage_, insureHglistVoArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetinsureHGListRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetinsureHGListRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\000insureHGListVO\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AssignInsureHGReq

@implementation AssignInsureHGReq

@dynamic orderId;
@dynamic hgId;

typedef struct AssignInsureHGReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *orderId;
  uint64_t hgId;
} AssignInsureHGReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = AssignInsureHGReq_FieldNumber_OrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AssignInsureHGReq__storage_, orderId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "hgId",
        .dataTypeSpecific.className = NULL,
        .number = AssignInsureHGReq_FieldNumber_HgId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AssignInsureHGReq__storage_, hgId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AssignInsureHGReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AssignInsureHGReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\007\000\002\004\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetMyWorkbenchRsp

@implementation GetMyWorkbenchRsp

@dynamic serviceDataListArray, serviceDataListArray_Count;
@dynamic backlogListArray, backlogListArray_Count;
@dynamic toolsArray, toolsArray_Count;
@dynamic hgName;
@dynamic unReadNum;
@dynamic roleId;

typedef struct GetMyWorkbenchRsp__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *serviceDataListArray;
  NSMutableArray *backlogListArray;
  NSMutableArray *toolsArray;
  NSString *hgName;
  NSString *unReadNum;
  uint64_t roleId;
} GetMyWorkbenchRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "serviceDataListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(WorkbenchVO),
        .number = GetMyWorkbenchRsp_FieldNumber_ServiceDataListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetMyWorkbenchRsp__storage_, serviceDataListArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "backlogListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(WorkbenchVO),
        .number = GetMyWorkbenchRsp_FieldNumber_BacklogListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetMyWorkbenchRsp__storage_, backlogListArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "toolsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(CommonToolsVO),
        .number = GetMyWorkbenchRsp_FieldNumber_ToolsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetMyWorkbenchRsp__storage_, toolsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "hgName",
        .dataTypeSpecific.className = NULL,
        .number = GetMyWorkbenchRsp_FieldNumber_HgName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetMyWorkbenchRsp__storage_, hgName),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "unReadNum",
        .dataTypeSpecific.className = NULL,
        .number = GetMyWorkbenchRsp_FieldNumber_UnReadNum,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetMyWorkbenchRsp__storage_, unReadNum),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "roleId",
        .dataTypeSpecific.className = NULL,
        .number = GetMyWorkbenchRsp_FieldNumber_RoleId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetMyWorkbenchRsp__storage_, roleId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetMyWorkbenchRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetMyWorkbenchRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001\000serviceDataList\000\002\000backlogList\000\004\006\000\005\t\000\006"
        "\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetInsureRecheckListReq

@implementation GetInsureRecheckListReq

@dynamic pageNo;
@dynamic pageSize;
@dynamic orderStatus;
@dynamic keyword;

typedef struct GetInsureRecheckListReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t pageNo;
  uint32_t pageSize;
  uint32_t orderStatus;
  NSString *keyword;
} GetInsureRecheckListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "pageNo",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureRecheckListReq_FieldNumber_PageNo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetInsureRecheckListReq__storage_, pageNo),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureRecheckListReq_FieldNumber_PageSize,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetInsureRecheckListReq__storage_, pageSize),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "orderStatus",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureRecheckListReq_FieldNumber_OrderStatus,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetInsureRecheckListReq__storage_, orderStatus),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "keyword",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureRecheckListReq_FieldNumber_Keyword,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetInsureRecheckListReq__storage_, keyword),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetInsureRecheckListReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetInsureRecheckListReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\005A\000\002\010\000\003\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetInsureRecheckListRsp

@implementation GetInsureRecheckListRsp

@dynamic count;
@dynamic voListArray, voListArray_Count;

typedef struct GetInsureRecheckListRsp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t count;
  NSMutableArray *voListArray;
} GetInsureRecheckListRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureRecheckListRsp_FieldNumber_Count,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetInsureRecheckListRsp__storage_, count),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "voListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(InsureListVO),
        .number = GetInsureRecheckListRsp_FieldNumber_VoListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetInsureRecheckListRsp__storage_, voListArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetInsureRecheckListRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetInsureRecheckListRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\000voList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetInsureOrderCheckListRsp

@implementation GetInsureOrderCheckListRsp

@dynamic orderId;
@dynamic voArray, voArray_Count;

typedef struct GetInsureOrderCheckListRsp__storage_ {
  uint32_t _has_storage_[1];
  NSString *orderId;
  NSMutableArray *voArray;
} GetInsureOrderCheckListRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureOrderCheckListRsp_FieldNumber_OrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetInsureOrderCheckListRsp__storage_, orderId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "voArray",
        .dataTypeSpecific.className = GPBStringifySymbol(InsureOrderCheckVO),
        .number = GetInsureOrderCheckListRsp_FieldNumber_VoArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetInsureOrderCheckListRsp__storage_, voArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetInsureOrderCheckListRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetInsureOrderCheckListRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetInsureOrderDetailReq

@implementation GetInsureOrderDetailReq

@dynamic orderId;

typedef struct GetInsureOrderDetailReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *orderId;
} GetInsureOrderDetailReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureOrderDetailReq_FieldNumber_OrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetInsureOrderDetailReq__storage_, orderId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetInsureOrderDetailReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetInsureOrderDetailReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetInsureOrderDetailRsp

@implementation GetInsureOrderDetailRsp

@dynamic hasOrder, order;
@dynamic adlScore;
@dynamic tryStartDate;
@dynamic tryEndDate;
@dynamic serviceDateNum;
@dynamic orderStartDate;
@dynamic orderEndDate;
@dynamic condition;
@dynamic conditionStr;
@dynamic addrDetail;
@dynamic buttonsArray, buttonsArray_Count;
@dynamic serviceAddr;
@dynamic createTimeStr;
@dynamic isOrderTendItem;

typedef struct GetInsureOrderDetailRsp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t adlScore;
  uint32_t serviceDateNum;
  int32_t condition;
  uint32_t serviceAddr;
  int32_t isOrderTendItem;
  Order *order;
  NSString *tryStartDate;
  NSString *tryEndDate;
  NSString *orderStartDate;
  NSString *orderEndDate;
  NSString *conditionStr;
  NSString *addrDetail;
  GPBUInt32Array *buttonsArray;
  NSString *createTimeStr;
} GetInsureOrderDetailRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "order",
        .dataTypeSpecific.className = GPBStringifySymbol(Order),
        .number = GetInsureOrderDetailRsp_FieldNumber_Order,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetInsureOrderDetailRsp__storage_, order),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "adlScore",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureOrderDetailRsp_FieldNumber_AdlScore,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetInsureOrderDetailRsp__storage_, adlScore),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "tryStartDate",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureOrderDetailRsp_FieldNumber_TryStartDate,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetInsureOrderDetailRsp__storage_, tryStartDate),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "tryEndDate",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureOrderDetailRsp_FieldNumber_TryEndDate,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetInsureOrderDetailRsp__storage_, tryEndDate),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "serviceDateNum",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureOrderDetailRsp_FieldNumber_ServiceDateNum,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GetInsureOrderDetailRsp__storage_, serviceDateNum),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "orderStartDate",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureOrderDetailRsp_FieldNumber_OrderStartDate,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(GetInsureOrderDetailRsp__storage_, orderStartDate),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "orderEndDate",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureOrderDetailRsp_FieldNumber_OrderEndDate,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(GetInsureOrderDetailRsp__storage_, orderEndDate),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "condition",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureOrderDetailRsp_FieldNumber_Condition,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(GetInsureOrderDetailRsp__storage_, condition),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "conditionStr",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureOrderDetailRsp_FieldNumber_ConditionStr,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(GetInsureOrderDetailRsp__storage_, conditionStr),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "addrDetail",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureOrderDetailRsp_FieldNumber_AddrDetail,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(GetInsureOrderDetailRsp__storage_, addrDetail),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "buttonsArray",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureOrderDetailRsp_FieldNumber_ButtonsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetInsureOrderDetailRsp__storage_, buttonsArray),
        .flags = GPBFieldRepeated | GPBFieldPacked,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "serviceAddr",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureOrderDetailRsp_FieldNumber_ServiceAddr,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(GetInsureOrderDetailRsp__storage_, serviceAddr),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "createTimeStr",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureOrderDetailRsp_FieldNumber_CreateTimeStr,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(GetInsureOrderDetailRsp__storage_, createTimeStr),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isOrderTendItem",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureOrderDetailRsp_FieldNumber_IsOrderTendItem,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(GetInsureOrderDetailRsp__storage_, isOrderTendItem),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetInsureOrderDetailRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetInsureOrderDetailRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\013\002\010\000\003\014\000\004\n\000\005\016\000\006\016\000\007\014\000\014\014\000\r\n\000\017\013\000\020\r\000\021\017\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - APPAddInsureOrderCheckReq

@implementation APPAddInsureOrderCheckReq

@dynamic orderId;
@dynamic score;
@dynamic checkType;

typedef struct APPAddInsureOrderCheckReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t checkType;
  NSString *orderId;
  uint64_t score;
} APPAddInsureOrderCheckReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = APPAddInsureOrderCheckReq_FieldNumber_OrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(APPAddInsureOrderCheckReq__storage_, orderId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "score",
        .dataTypeSpecific.className = NULL,
        .number = APPAddInsureOrderCheckReq_FieldNumber_Score,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(APPAddInsureOrderCheckReq__storage_, score),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "checkType",
        .dataTypeSpecific.className = NULL,
        .number = APPAddInsureOrderCheckReq_FieldNumber_CheckType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(APPAddInsureOrderCheckReq__storage_, checkType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[APPAddInsureOrderCheckReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(APPAddInsureOrderCheckReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\007\000\003\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetHGIdcardByPhoneReq

@implementation GetHGIdcardByPhoneReq

@dynamic phone;
@dynamic code;
@dynamic isSaasapp;

typedef struct GetHGIdcardByPhoneReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *phone;
  NSString *code;
} GetHGIdcardByPhoneReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "phone",
        .dataTypeSpecific.className = NULL,
        .number = GetHGIdcardByPhoneReq_FieldNumber_Phone,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetHGIdcardByPhoneReq__storage_, phone),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "code",
        .dataTypeSpecific.className = NULL,
        .number = GetHGIdcardByPhoneReq_FieldNumber_Code,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetHGIdcardByPhoneReq__storage_, code),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isSaasapp",
        .dataTypeSpecific.className = NULL,
        .number = GetHGIdcardByPhoneReq_FieldNumber_IsSaasapp,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetHGIdcardByPhoneReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetHGIdcardByPhoneReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\003\003f\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetHGIdcardByPhoneRsp

@implementation GetHGIdcardByPhoneRsp

@dynamic idcard;
@dynamic hgName;
@dynamic sendDate;

typedef struct GetHGIdcardByPhoneRsp__storage_ {
  uint32_t _has_storage_[1];
  NSString *idcard;
  NSString *hgName;
  NSString *sendDate;
} GetHGIdcardByPhoneRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "idcard",
        .dataTypeSpecific.className = NULL,
        .number = GetHGIdcardByPhoneRsp_FieldNumber_Idcard,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetHGIdcardByPhoneRsp__storage_, idcard),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "hgName",
        .dataTypeSpecific.className = NULL,
        .number = GetHGIdcardByPhoneRsp_FieldNumber_HgName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetHGIdcardByPhoneRsp__storage_, hgName),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sendDate",
        .dataTypeSpecific.className = NULL,
        .number = GetHGIdcardByPhoneRsp_FieldNumber_SendDate,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetHGIdcardByPhoneRsp__storage_, sendDate),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetHGIdcardByPhoneRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetHGIdcardByPhoneRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\004\006\000\005\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetOrderListNewReq

@implementation GetOrderListNewReq

@dynamic pageNo;
@dynamic pageSize;
@dynamic keyword;
@dynamic tabType;
@dynamic orgId;
@dynamic branchIdsArray, branchIdsArray_Count;
@dynamic sortType;
@dynamic onlyNotSign;

typedef struct GetOrderListNewReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t pageNo;
  uint32_t pageSize;
  int32_t tabType;
  uint32_t sortType;
  NSString *keyword;
  GPBUInt64Array *branchIdsArray;
  uint64_t orgId;
} GetOrderListNewReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "pageNo",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderListNewReq_FieldNumber_PageNo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetOrderListNewReq__storage_, pageNo),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderListNewReq_FieldNumber_PageSize,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetOrderListNewReq__storage_, pageSize),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "keyword",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderListNewReq_FieldNumber_Keyword,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetOrderListNewReq__storage_, keyword),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "tabType",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderListNewReq_FieldNumber_TabType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetOrderListNewReq__storage_, tabType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "orgId",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderListNewReq_FieldNumber_OrgId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GetOrderListNewReq__storage_, orgId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "branchIdsArray",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderListNewReq_FieldNumber_BranchIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetOrderListNewReq__storage_, branchIdsArray),
        .flags = GPBFieldRepeated | GPBFieldPacked | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "sortType",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderListNewReq_FieldNumber_SortType,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(GetOrderListNewReq__storage_, sortType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "onlyNotSign",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderListNewReq_FieldNumber_OnlyNotSign,
        .hasIndex = 6,
        .offset = 7,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetOrderListNewReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetOrderListNewReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\007\001\005A\000\002\010\000\004\007\000\005\005\000\006\000branchIds\000\007\010\000\010\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetOrderTendDetailReq

@implementation GetOrderTendDetailReq

@dynamic orderId;
@dynamic tendId;
@dynamic isAll;

typedef struct GetOrderTendDetailReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *orderId;
  uint64_t tendId;
} GetOrderTendDetailReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderTendDetailReq_FieldNumber_OrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetOrderTendDetailReq__storage_, orderId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "tendId",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderTendDetailReq_FieldNumber_TendId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetOrderTendDetailReq__storage_, tendId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "isAll",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderTendDetailReq_FieldNumber_IsAll,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetOrderTendDetailReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetOrderTendDetailReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\007\000\002\006\000\003\005\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetOrderTendDetailRsp

@implementation GetOrderTendDetailRsp

@dynamic orderId;
@dynamic orderTendId;
@dynamic title;
@dynamic timeStr;
@dynamic hgName;
@dynamic statusStr;
@dynamic status;
@dynamic tendDetial;
@dynamic rejectReason;
@dynamic detailBolistArray, detailBolistArray_Count;
@dynamic createTimeStr;
@dynamic wordNum;

typedef struct GetOrderTendDetailRsp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t status;
  uint32_t wordNum;
  NSString *orderId;
  NSString *title;
  NSString *timeStr;
  NSString *hgName;
  NSString *statusStr;
  NSString *tendDetial;
  NSString *rejectReason;
  NSMutableArray *detailBolistArray;
  NSString *createTimeStr;
  uint64_t orderTendId;
} GetOrderTendDetailRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderTendDetailRsp_FieldNumber_OrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetOrderTendDetailRsp__storage_, orderId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "orderTendId",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderTendDetailRsp_FieldNumber_OrderTendId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetOrderTendDetailRsp__storage_, orderTendId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "title",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderTendDetailRsp_FieldNumber_Title,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetOrderTendDetailRsp__storage_, title),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "timeStr",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderTendDetailRsp_FieldNumber_TimeStr,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetOrderTendDetailRsp__storage_, timeStr),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "hgName",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderTendDetailRsp_FieldNumber_HgName,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GetOrderTendDetailRsp__storage_, hgName),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "statusStr",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderTendDetailRsp_FieldNumber_StatusStr,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(GetOrderTendDetailRsp__storage_, statusStr),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderTendDetailRsp_FieldNumber_Status,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(GetOrderTendDetailRsp__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "tendDetial",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderTendDetailRsp_FieldNumber_TendDetial,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(GetOrderTendDetailRsp__storage_, tendDetial),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "rejectReason",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderTendDetailRsp_FieldNumber_RejectReason,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(GetOrderTendDetailRsp__storage_, rejectReason),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "detailBolistArray",
        .dataTypeSpecific.className = GPBStringifySymbol(InsureOrderTendDetailBO),
        .number = GetOrderTendDetailRsp_FieldNumber_DetailBolistArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetOrderTendDetailRsp__storage_, detailBolistArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "createTimeStr",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderTendDetailRsp_FieldNumber_CreateTimeStr,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(GetOrderTendDetailRsp__storage_, createTimeStr),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "wordNum",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderTendDetailRsp_FieldNumber_WordNum,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(GetOrderTendDetailRsp__storage_, wordNum),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetOrderTendDetailRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetOrderTendDetailRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\n\001\007\000\002\013\000\004\007\000\005\006\000\006\t\000\010\n\000\t\014\000\n\000detailBOList\000\013\r\000"
        "\014\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetOrderTendListReq

@implementation GetOrderTendListReq

@dynamic orderId;
@dynamic type;

typedef struct GetOrderTendListReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t type;
  NSString *orderId;
} GetOrderTendListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderTendListReq_FieldNumber_OrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetOrderTendListReq__storage_, orderId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderTendListReq_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetOrderTendListReq__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetOrderTendListReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetOrderTendListReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetOrderTendListRsp

@implementation GetOrderTendListRsp

@dynamic orderId;
@dynamic voListArray, voListArray_Count;

typedef struct GetOrderTendListRsp__storage_ {
  uint32_t _has_storage_[1];
  NSString *orderId;
  NSMutableArray *voListArray;
} GetOrderTendListRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderTendListRsp_FieldNumber_OrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetOrderTendListRsp__storage_, orderId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "voListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(OrderTendVO),
        .number = GetOrderTendListRsp_FieldNumber_VoListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetOrderTendListRsp__storage_, voListArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetOrderTendListRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetOrderTendListRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\007\000\002\000voList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetIllnessListRsp

@implementation GetIllnessListRsp

@dynamic illnessMap, illnessMap_Count;
@dynamic tendDetailTypeMap, tendDetailTypeMap_Count;
@dynamic detailTypeListArray, detailTypeListArray_Count;
@dynamic detailListArray, detailListArray_Count;
@dynamic illnessListArray, illnessListArray_Count;

typedef struct GetIllnessListRsp__storage_ {
  uint32_t _has_storage_[1];
  GPBUInt64ObjectDictionary *illnessMap;
  GPBUInt64ObjectDictionary *tendDetailTypeMap;
  NSMutableArray *detailTypeListArray;
  NSMutableArray *detailListArray;
  NSMutableArray *illnessListArray;
} GetIllnessListRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "illnessMap",
        .dataTypeSpecific.className = NULL,
        .number = GetIllnessListRsp_FieldNumber_IllnessMap,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetIllnessListRsp__storage_, illnessMap),
        .flags = GPBFieldMapKeyUInt64 | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "tendDetailTypeMap",
        .dataTypeSpecific.className = NULL,
        .number = GetIllnessListRsp_FieldNumber_TendDetailTypeMap,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetIllnessListRsp__storage_, tendDetailTypeMap),
        .flags = GPBFieldMapKeyUInt64 | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "detailTypeListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(TendDetailType),
        .number = GetIllnessListRsp_FieldNumber_DetailTypeListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetIllnessListRsp__storage_, detailTypeListArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "detailListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(TendDetail),
        .number = GetIllnessListRsp_FieldNumber_DetailListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetIllnessListRsp__storage_, detailListArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "illnessListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Illness),
        .number = GetIllnessListRsp_FieldNumber_IllnessListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetIllnessListRsp__storage_, illnessListArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetIllnessListRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetIllnessListRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001\n\000\002\021\000\003\000detailTypeList\000\004\000detailList\000\005\000i"
        "llnessList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetTendDetailListReq

@implementation GetTendDetailListReq

@dynamic illnessIdArray, illnessIdArray_Count;
@dynamic detailTypeId;

typedef struct GetTendDetailListReq__storage_ {
  uint32_t _has_storage_[1];
  GPBUInt64Array *illnessIdArray;
  uint64_t detailTypeId;
} GetTendDetailListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "illnessIdArray",
        .dataTypeSpecific.className = NULL,
        .number = GetTendDetailListReq_FieldNumber_IllnessIdArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetTendDetailListReq__storage_, illnessIdArray),
        .flags = GPBFieldRepeated | GPBFieldPacked | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "detailTypeId",
        .dataTypeSpecific.className = NULL,
        .number = GetTendDetailListReq_FieldNumber_DetailTypeId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetTendDetailListReq__storage_, detailTypeId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetTendDetailListReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetTendDetailListReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\000illnessId\000\002\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AddInsureOrderTendReq

@implementation AddInsureOrderTendReq

@dynamic orderId;
@dynamic messages, messages_Count;
@dynamic type;
@dynamic orderTendId;

typedef struct AddInsureOrderTendReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t type;
  NSString *orderId;
  GPBUInt64ObjectDictionary *messages;
  uint64_t orderTendId;
} AddInsureOrderTendReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureOrderTendReq_FieldNumber_OrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AddInsureOrderTendReq__storage_, orderId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "messages",
        .dataTypeSpecific.className = GPBStringifySymbol(AddInsureOrderTendReqVo),
        .number = AddInsureOrderTendReq_FieldNumber_Messages,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(AddInsureOrderTendReq__storage_, messages),
        .flags = GPBFieldMapKeyUInt64,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureOrderTendReq_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AddInsureOrderTendReq__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "orderTendId",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureOrderTendReq_FieldNumber_OrderTendId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(AddInsureOrderTendReq__storage_, orderTendId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AddInsureOrderTendReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AddInsureOrderTendReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\007\000\004\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AddInsureOrderTendReqVo

@implementation AddInsureOrderTendReqVo

@dynamic messageStr, messageStr_Count;

typedef struct AddInsureOrderTendReqVo__storage_ {
  uint32_t _has_storage_[1];
  GPBUInt64ObjectDictionary *messageStr;
} AddInsureOrderTendReqVo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "messageStr",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureOrderTendReqVo_FieldNumber_MessageStr,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(AddInsureOrderTendReqVo__storage_, messageStr),
        .flags = GPBFieldMapKeyUInt64 | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AddInsureOrderTendReqVo class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AddInsureOrderTendReqVo__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CheckInsureOrderTendReq

@implementation CheckInsureOrderTendReq

@dynamic type;
@dynamic orderTendId;
@dynamic rejectReason;

typedef struct CheckInsureOrderTendReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t type;
  NSString *rejectReason;
  uint64_t orderTendId;
} CheckInsureOrderTendReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = CheckInsureOrderTendReq_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CheckInsureOrderTendReq__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "orderTendId",
        .dataTypeSpecific.className = NULL,
        .number = CheckInsureOrderTendReq_FieldNumber_OrderTendId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CheckInsureOrderTendReq__storage_, orderTendId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "rejectReason",
        .dataTypeSpecific.className = NULL,
        .number = CheckInsureOrderTendReq_FieldNumber_RejectReason,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CheckInsureOrderTendReq__storage_, rejectReason),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CheckInsureOrderTendReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CheckInsureOrderTendReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\002\013\000\003\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetHomeOrderDetailRsp

@implementation GetHomeOrderDetailRsp

@dynamic hasOrder, order;
@dynamic kfPhone;
@dynamic statusStr;
@dynamic statusDesc;
@dynamic statusVolistArray, statusVolistArray_Count;
@dynamic companyName;
@dynamic createTime;
@dynamic isHg;
@dynamic serviceDateNum;
@dynamic orderStartTime;
@dynamic orderEndTime;
@dynamic addrDetail;
@dynamic isHsnew;
@dynamic isTendNew;

typedef struct GetHomeOrderDetailRsp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t serviceDateNum;
  Order *order;
  NSString *kfPhone;
  NSString *statusStr;
  NSString *statusDesc;
  NSMutableArray *statusVolistArray;
  NSString *companyName;
  NSString *createTime;
  NSString *orderStartTime;
  NSString *orderEndTime;
  NSString *addrDetail;
} GetHomeOrderDetailRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "order",
        .dataTypeSpecific.className = GPBStringifySymbol(Order),
        .number = GetHomeOrderDetailRsp_FieldNumber_Order,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetHomeOrderDetailRsp__storage_, order),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "kfPhone",
        .dataTypeSpecific.className = NULL,
        .number = GetHomeOrderDetailRsp_FieldNumber_KfPhone,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetHomeOrderDetailRsp__storage_, kfPhone),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "statusStr",
        .dataTypeSpecific.className = NULL,
        .number = GetHomeOrderDetailRsp_FieldNumber_StatusStr,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetHomeOrderDetailRsp__storage_, statusStr),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "statusDesc",
        .dataTypeSpecific.className = NULL,
        .number = GetHomeOrderDetailRsp_FieldNumber_StatusDesc,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetHomeOrderDetailRsp__storage_, statusDesc),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "statusVolistArray",
        .dataTypeSpecific.className = GPBStringifySymbol(OrderStatusVO),
        .number = GetHomeOrderDetailRsp_FieldNumber_StatusVolistArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetHomeOrderDetailRsp__storage_, statusVolistArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "companyName",
        .dataTypeSpecific.className = NULL,
        .number = GetHomeOrderDetailRsp_FieldNumber_CompanyName,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GetHomeOrderDetailRsp__storage_, companyName),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "createTime",
        .dataTypeSpecific.className = NULL,
        .number = GetHomeOrderDetailRsp_FieldNumber_CreateTime,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(GetHomeOrderDetailRsp__storage_, createTime),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isHg",
        .dataTypeSpecific.className = NULL,
        .number = GetHomeOrderDetailRsp_FieldNumber_IsHg,
        .hasIndex = 6,
        .offset = 7,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "serviceDateNum",
        .dataTypeSpecific.className = NULL,
        .number = GetHomeOrderDetailRsp_FieldNumber_ServiceDateNum,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(GetHomeOrderDetailRsp__storage_, serviceDateNum),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "orderStartTime",
        .dataTypeSpecific.className = NULL,
        .number = GetHomeOrderDetailRsp_FieldNumber_OrderStartTime,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(GetHomeOrderDetailRsp__storage_, orderStartTime),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "orderEndTime",
        .dataTypeSpecific.className = NULL,
        .number = GetHomeOrderDetailRsp_FieldNumber_OrderEndTime,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(GetHomeOrderDetailRsp__storage_, orderEndTime),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "addrDetail",
        .dataTypeSpecific.className = NULL,
        .number = GetHomeOrderDetailRsp_FieldNumber_AddrDetail,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(GetHomeOrderDetailRsp__storage_, addrDetail),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isHsnew",
        .dataTypeSpecific.className = NULL,
        .number = GetHomeOrderDetailRsp_FieldNumber_IsHsnew,
        .hasIndex = 12,
        .offset = 13,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isTendNew",
        .dataTypeSpecific.className = NULL,
        .number = GetHomeOrderDetailRsp_FieldNumber_IsTendNew,
        .hasIndex = 14,
        .offset = 15,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetHomeOrderDetailRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetHomeOrderDetailRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\r\002\007\000\003\t\000\004\n\000\005\000statusVOList\000\006\013\000\007\n\000\010\003A\000\t\016\000\n\016"
        "\000\013\014\000\014\n\000\r\003b\002\000\016\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AddInsureOrderVisitReq

@implementation AddInsureOrderVisitReq

@dynamic orderId;
@dynamic visitTime;
@dynamic visitDetial;
@dynamic visitTimeStr;

typedef struct AddInsureOrderVisitReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *orderId;
  NSString *visitDetial;
  NSString *visitTimeStr;
  uint64_t visitTime;
} AddInsureOrderVisitReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureOrderVisitReq_FieldNumber_OrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AddInsureOrderVisitReq__storage_, orderId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "visitTime",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureOrderVisitReq_FieldNumber_VisitTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AddInsureOrderVisitReq__storage_, visitTime),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "visitDetial",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureOrderVisitReq_FieldNumber_VisitDetial,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(AddInsureOrderVisitReq__storage_, visitDetial),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "visitTimeStr",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureOrderVisitReq_FieldNumber_VisitTimeStr,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(AddInsureOrderVisitReq__storage_, visitTimeStr),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AddInsureOrderVisitReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AddInsureOrderVisitReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001\007\000\002\t\000\003\013\000\004\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AddInsureOrderVisitRsp

@implementation AddInsureOrderVisitRsp

@dynamic orderId;
@dynamic visitId;

typedef struct AddInsureOrderVisitRsp__storage_ {
  uint32_t _has_storage_[1];
  NSString *orderId;
  uint64_t visitId;
} AddInsureOrderVisitRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureOrderVisitRsp_FieldNumber_OrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AddInsureOrderVisitRsp__storage_, orderId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "visitId",
        .dataTypeSpecific.className = NULL,
        .number = AddInsureOrderVisitRsp_FieldNumber_VisitId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AddInsureOrderVisitRsp__storage_, visitId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AddInsureOrderVisitRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AddInsureOrderVisitRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\007\000\002\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DeleteInsureOrderVisitReq

@implementation DeleteInsureOrderVisitReq

@dynamic orderId;
@dynamic visitId;

typedef struct DeleteInsureOrderVisitReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *orderId;
  uint64_t visitId;
} DeleteInsureOrderVisitReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = DeleteInsureOrderVisitReq_FieldNumber_OrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DeleteInsureOrderVisitReq__storage_, orderId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "visitId",
        .dataTypeSpecific.className = NULL,
        .number = DeleteInsureOrderVisitReq_FieldNumber_VisitId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DeleteInsureOrderVisitReq__storage_, visitId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DeleteInsureOrderVisitReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DeleteInsureOrderVisitReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\007\000\002\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetInsureOrderVisitDetailRsp

@implementation GetInsureOrderVisitDetailRsp

@dynamic hasVisit, visit;
@dynamic visitTimeStr;
@dynamic visitStartTimeStr;
@dynamic visitEndTimeStr;
@dynamic createTimeStr;
@dynamic finishTimeStr;
@dynamic relationImgURL;
@dynamic hgImgURL;
@dynamic relationImgId;
@dynamic hgImgId;
@dynamic nextTimeStr;

typedef struct GetInsureOrderVisitDetailRsp__storage_ {
  uint32_t _has_storage_[1];
  InsureOrderVisit *visit;
  NSString *visitTimeStr;
  NSString *visitStartTimeStr;
  NSString *visitEndTimeStr;
  NSString *createTimeStr;
  NSString *finishTimeStr;
  NSString *relationImgURL;
  NSString *hgImgURL;
  NSString *relationImgId;
  NSString *hgImgId;
  NSString *nextTimeStr;
} GetInsureOrderVisitDetailRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "visit",
        .dataTypeSpecific.className = GPBStringifySymbol(InsureOrderVisit),
        .number = GetInsureOrderVisitDetailRsp_FieldNumber_Visit,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetInsureOrderVisitDetailRsp__storage_, visit),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "visitTimeStr",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureOrderVisitDetailRsp_FieldNumber_VisitTimeStr,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetInsureOrderVisitDetailRsp__storage_, visitTimeStr),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "visitStartTimeStr",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureOrderVisitDetailRsp_FieldNumber_VisitStartTimeStr,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetInsureOrderVisitDetailRsp__storage_, visitStartTimeStr),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "visitEndTimeStr",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureOrderVisitDetailRsp_FieldNumber_VisitEndTimeStr,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetInsureOrderVisitDetailRsp__storage_, visitEndTimeStr),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "createTimeStr",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureOrderVisitDetailRsp_FieldNumber_CreateTimeStr,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GetInsureOrderVisitDetailRsp__storage_, createTimeStr),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "finishTimeStr",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureOrderVisitDetailRsp_FieldNumber_FinishTimeStr,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(GetInsureOrderVisitDetailRsp__storage_, finishTimeStr),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "relationImgURL",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureOrderVisitDetailRsp_FieldNumber_RelationImgURL,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(GetInsureOrderVisitDetailRsp__storage_, relationImgURL),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "hgImgURL",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureOrderVisitDetailRsp_FieldNumber_HgImgURL,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(GetInsureOrderVisitDetailRsp__storage_, hgImgURL),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "relationImgId",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureOrderVisitDetailRsp_FieldNumber_RelationImgId,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(GetInsureOrderVisitDetailRsp__storage_, relationImgId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "hgImgId",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureOrderVisitDetailRsp_FieldNumber_HgImgId,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(GetInsureOrderVisitDetailRsp__storage_, hgImgId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "nextTimeStr",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureOrderVisitDetailRsp_FieldNumber_NextTimeStr,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(GetInsureOrderVisitDetailRsp__storage_, nextTimeStr),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetInsureOrderVisitDetailRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetInsureOrderVisitDetailRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\n\002\014\000\003\021\000\004\017\000\005\r\000\006\r\000\007\014!!\000\010\006!!\000\t\r\000\n\007\000\013\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetInsureOrderVisitVitaDetailReq

@implementation GetInsureOrderVisitVitaDetailReq

@dynamic orderId;
@dynamic visitId;
@dynamic visitVitaId;

typedef struct GetInsureOrderVisitVitaDetailReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *orderId;
  uint64_t visitId;
  uint64_t visitVitaId;
} GetInsureOrderVisitVitaDetailReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureOrderVisitVitaDetailReq_FieldNumber_OrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetInsureOrderVisitVitaDetailReq__storage_, orderId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "visitId",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureOrderVisitVitaDetailReq_FieldNumber_VisitId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetInsureOrderVisitVitaDetailReq__storage_, visitId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "visitVitaId",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureOrderVisitVitaDetailReq_FieldNumber_VisitVitaId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetInsureOrderVisitVitaDetailReq__storage_, visitVitaId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetInsureOrderVisitVitaDetailReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetInsureOrderVisitVitaDetailReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\007\000\002\007\000\003\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetInsureOrderVisitQualityReq

@implementation GetInsureOrderVisitQualityReq

@dynamic orderId;
@dynamic visitId;
@dynamic visitQualityId;

typedef struct GetInsureOrderVisitQualityReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *orderId;
  uint64_t visitId;
  uint64_t visitQualityId;
} GetInsureOrderVisitQualityReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureOrderVisitQualityReq_FieldNumber_OrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetInsureOrderVisitQualityReq__storage_, orderId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "visitId",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureOrderVisitQualityReq_FieldNumber_VisitId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetInsureOrderVisitQualityReq__storage_, visitId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "visitQualityId",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureOrderVisitQualityReq_FieldNumber_VisitQualityId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetInsureOrderVisitQualityReq__storage_, visitQualityId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetInsureOrderVisitQualityReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetInsureOrderVisitQualityReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\007\000\002\007\000\003\016\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SaveOrUpdateInsureOrderVisitVitaReq

@implementation SaveOrUpdateInsureOrderVisitVitaReq

@dynamic orderId;
@dynamic visitId;
@dynamic visitVitaId;
@dynamic animalHeat;
@dynamic pulse;
@dynamic breathe;
@dynamic bloodPressure;

typedef struct SaveOrUpdateInsureOrderVisitVitaReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *orderId;
  uint64_t visitId;
  uint64_t visitVitaId;
  uint64_t animalHeat;
  uint64_t pulse;
  uint64_t breathe;
  uint64_t bloodPressure;
} SaveOrUpdateInsureOrderVisitVitaReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = SaveOrUpdateInsureOrderVisitVitaReq_FieldNumber_OrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SaveOrUpdateInsureOrderVisitVitaReq__storage_, orderId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "visitId",
        .dataTypeSpecific.className = NULL,
        .number = SaveOrUpdateInsureOrderVisitVitaReq_FieldNumber_VisitId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SaveOrUpdateInsureOrderVisitVitaReq__storage_, visitId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "visitVitaId",
        .dataTypeSpecific.className = NULL,
        .number = SaveOrUpdateInsureOrderVisitVitaReq_FieldNumber_VisitVitaId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SaveOrUpdateInsureOrderVisitVitaReq__storage_, visitVitaId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "animalHeat",
        .dataTypeSpecific.className = NULL,
        .number = SaveOrUpdateInsureOrderVisitVitaReq_FieldNumber_AnimalHeat,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SaveOrUpdateInsureOrderVisitVitaReq__storage_, animalHeat),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "pulse",
        .dataTypeSpecific.className = NULL,
        .number = SaveOrUpdateInsureOrderVisitVitaReq_FieldNumber_Pulse,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SaveOrUpdateInsureOrderVisitVitaReq__storage_, pulse),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "breathe",
        .dataTypeSpecific.className = NULL,
        .number = SaveOrUpdateInsureOrderVisitVitaReq_FieldNumber_Breathe,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SaveOrUpdateInsureOrderVisitVitaReq__storage_, breathe),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "bloodPressure",
        .dataTypeSpecific.className = NULL,
        .number = SaveOrUpdateInsureOrderVisitVitaReq_FieldNumber_BloodPressure,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(SaveOrUpdateInsureOrderVisitVitaReq__storage_, bloodPressure),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SaveOrUpdateInsureOrderVisitVitaReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SaveOrUpdateInsureOrderVisitVitaReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001\007\000\002\007\000\003\013\000\004\n\000\007\r\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SaveOrUpdateInsureOrderVisitQualityReq

@implementation SaveOrUpdateInsureOrderVisitQualityReq

@dynamic orderId;
@dynamic visitId;
@dynamic qualityId;
@dynamic floor;
@dynamic toilet;
@dynamic bed;
@dynamic tables;
@dynamic hair;
@dynamic oralCavity;
@dynamic skin;
@dynamic perineum;
@dynamic clothing;
@dynamic diet;
@dynamic sleep;
@dynamic feces;
@dynamic skinFull;
@dynamic mentality;
@dynamic discomfort;
@dynamic discomfortDetial;
@dynamic result;
@dynamic resultDetial;
@dynamic kitchen;

typedef struct SaveOrUpdateInsureOrderVisitQualityReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t floor;
  uint32_t toilet;
  uint32_t bed;
  uint32_t tables;
  uint32_t hair;
  uint32_t oralCavity;
  uint32_t skin;
  uint32_t perineum;
  uint32_t clothing;
  uint32_t diet;
  uint32_t sleep;
  uint32_t feces;
  uint32_t skinFull;
  uint32_t mentality;
  uint32_t discomfort;
  uint32_t result;
  uint32_t kitchen;
  NSString *orderId;
  NSString *discomfortDetial;
  NSString *resultDetial;
  uint64_t visitId;
  uint64_t qualityId;
} SaveOrUpdateInsureOrderVisitQualityReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = SaveOrUpdateInsureOrderVisitQualityReq_FieldNumber_OrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SaveOrUpdateInsureOrderVisitQualityReq__storage_, orderId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "visitId",
        .dataTypeSpecific.className = NULL,
        .number = SaveOrUpdateInsureOrderVisitQualityReq_FieldNumber_VisitId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SaveOrUpdateInsureOrderVisitQualityReq__storage_, visitId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "qualityId",
        .dataTypeSpecific.className = NULL,
        .number = SaveOrUpdateInsureOrderVisitQualityReq_FieldNumber_QualityId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SaveOrUpdateInsureOrderVisitQualityReq__storage_, qualityId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "floor",
        .dataTypeSpecific.className = NULL,
        .number = SaveOrUpdateInsureOrderVisitQualityReq_FieldNumber_Floor,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SaveOrUpdateInsureOrderVisitQualityReq__storage_, floor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "toilet",
        .dataTypeSpecific.className = NULL,
        .number = SaveOrUpdateInsureOrderVisitQualityReq_FieldNumber_Toilet,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SaveOrUpdateInsureOrderVisitQualityReq__storage_, toilet),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "bed",
        .dataTypeSpecific.className = NULL,
        .number = SaveOrUpdateInsureOrderVisitQualityReq_FieldNumber_Bed,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SaveOrUpdateInsureOrderVisitQualityReq__storage_, bed),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "tables",
        .dataTypeSpecific.className = NULL,
        .number = SaveOrUpdateInsureOrderVisitQualityReq_FieldNumber_Tables,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(SaveOrUpdateInsureOrderVisitQualityReq__storage_, tables),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "hair",
        .dataTypeSpecific.className = NULL,
        .number = SaveOrUpdateInsureOrderVisitQualityReq_FieldNumber_Hair,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(SaveOrUpdateInsureOrderVisitQualityReq__storage_, hair),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "oralCavity",
        .dataTypeSpecific.className = NULL,
        .number = SaveOrUpdateInsureOrderVisitQualityReq_FieldNumber_OralCavity,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(SaveOrUpdateInsureOrderVisitQualityReq__storage_, oralCavity),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "skin",
        .dataTypeSpecific.className = NULL,
        .number = SaveOrUpdateInsureOrderVisitQualityReq_FieldNumber_Skin,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(SaveOrUpdateInsureOrderVisitQualityReq__storage_, skin),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "perineum",
        .dataTypeSpecific.className = NULL,
        .number = SaveOrUpdateInsureOrderVisitQualityReq_FieldNumber_Perineum,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(SaveOrUpdateInsureOrderVisitQualityReq__storage_, perineum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "clothing",
        .dataTypeSpecific.className = NULL,
        .number = SaveOrUpdateInsureOrderVisitQualityReq_FieldNumber_Clothing,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(SaveOrUpdateInsureOrderVisitQualityReq__storage_, clothing),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "diet",
        .dataTypeSpecific.className = NULL,
        .number = SaveOrUpdateInsureOrderVisitQualityReq_FieldNumber_Diet,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(SaveOrUpdateInsureOrderVisitQualityReq__storage_, diet),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "sleep",
        .dataTypeSpecific.className = NULL,
        .number = SaveOrUpdateInsureOrderVisitQualityReq_FieldNumber_Sleep,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(SaveOrUpdateInsureOrderVisitQualityReq__storage_, sleep),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "feces",
        .dataTypeSpecific.className = NULL,
        .number = SaveOrUpdateInsureOrderVisitQualityReq_FieldNumber_Feces,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(SaveOrUpdateInsureOrderVisitQualityReq__storage_, feces),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "skinFull",
        .dataTypeSpecific.className = NULL,
        .number = SaveOrUpdateInsureOrderVisitQualityReq_FieldNumber_SkinFull,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(SaveOrUpdateInsureOrderVisitQualityReq__storage_, skinFull),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "mentality",
        .dataTypeSpecific.className = NULL,
        .number = SaveOrUpdateInsureOrderVisitQualityReq_FieldNumber_Mentality,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(SaveOrUpdateInsureOrderVisitQualityReq__storage_, mentality),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "discomfort",
        .dataTypeSpecific.className = NULL,
        .number = SaveOrUpdateInsureOrderVisitQualityReq_FieldNumber_Discomfort,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(SaveOrUpdateInsureOrderVisitQualityReq__storage_, discomfort),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "discomfortDetial",
        .dataTypeSpecific.className = NULL,
        .number = SaveOrUpdateInsureOrderVisitQualityReq_FieldNumber_DiscomfortDetial,
        .hasIndex = 18,
        .offset = (uint32_t)offsetof(SaveOrUpdateInsureOrderVisitQualityReq__storage_, discomfortDetial),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "result",
        .dataTypeSpecific.className = NULL,
        .number = SaveOrUpdateInsureOrderVisitQualityReq_FieldNumber_Result,
        .hasIndex = 19,
        .offset = (uint32_t)offsetof(SaveOrUpdateInsureOrderVisitQualityReq__storage_, result),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "resultDetial",
        .dataTypeSpecific.className = NULL,
        .number = SaveOrUpdateInsureOrderVisitQualityReq_FieldNumber_ResultDetial,
        .hasIndex = 20,
        .offset = (uint32_t)offsetof(SaveOrUpdateInsureOrderVisitQualityReq__storage_, resultDetial),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "kitchen",
        .dataTypeSpecific.className = NULL,
        .number = SaveOrUpdateInsureOrderVisitQualityReq_FieldNumber_Kitchen,
        .hasIndex = 21,
        .offset = (uint32_t)offsetof(SaveOrUpdateInsureOrderVisitQualityReq__storage_, kitchen),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SaveOrUpdateInsureOrderVisitQualityReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SaveOrUpdateInsureOrderVisitQualityReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\007\001\007\000\002\007\000\003\t\000\t\n\000\020\010\000\023\020\000\025\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SaveOrUpdateInsureOrderVisitQualityRsp

@implementation SaveOrUpdateInsureOrderVisitQualityRsp

@dynamic id_p;

typedef struct SaveOrUpdateInsureOrderVisitQualityRsp__storage_ {
  uint32_t _has_storage_[1];
  uint64_t id_p;
} SaveOrUpdateInsureOrderVisitQualityRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = SaveOrUpdateInsureOrderVisitQualityRsp_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SaveOrUpdateInsureOrderVisitQualityRsp__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SaveOrUpdateInsureOrderVisitQualityRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SaveOrUpdateInsureOrderVisitQualityRsp__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UpdateInsureOrderVisitReq

@implementation UpdateInsureOrderVisitReq

@dynamic visitId;
@dynamic orderId;
@dynamic visitStatus;
@dynamic visitStartTime;
@dynamic visitEndTime;
@dynamic visitProblem;
@dynamic visitMeasures;
@dynamic visitVita;
@dynamic visitQualityControl;
@dynamic visitSkillTraining;
@dynamic visitTrainingType;
@dynamic visitSkillStatus;
@dynamic relationImgId;
@dynamic hgImgId;
@dynamic nextTime;

typedef struct UpdateInsureOrderVisitReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t visitStatus;
  uint32_t visitSkillStatus;
  NSString *orderId;
  NSString *visitStartTime;
  NSString *visitEndTime;
  NSString *visitProblem;
  NSString *visitMeasures;
  NSString *visitSkillTraining;
  NSString *visitTrainingType;
  NSString *relationImgId;
  NSString *hgImgId;
  NSString *nextTime;
  uint64_t visitId;
  uint64_t visitVita;
  uint64_t visitQualityControl;
} UpdateInsureOrderVisitReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "visitId",
        .dataTypeSpecific.className = NULL,
        .number = UpdateInsureOrderVisitReq_FieldNumber_VisitId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpdateInsureOrderVisitReq__storage_, visitId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = UpdateInsureOrderVisitReq_FieldNumber_OrderId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UpdateInsureOrderVisitReq__storage_, orderId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "visitStatus",
        .dataTypeSpecific.className = NULL,
        .number = UpdateInsureOrderVisitReq_FieldNumber_VisitStatus,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(UpdateInsureOrderVisitReq__storage_, visitStatus),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "visitStartTime",
        .dataTypeSpecific.className = NULL,
        .number = UpdateInsureOrderVisitReq_FieldNumber_VisitStartTime,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(UpdateInsureOrderVisitReq__storage_, visitStartTime),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "visitEndTime",
        .dataTypeSpecific.className = NULL,
        .number = UpdateInsureOrderVisitReq_FieldNumber_VisitEndTime,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(UpdateInsureOrderVisitReq__storage_, visitEndTime),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "visitProblem",
        .dataTypeSpecific.className = NULL,
        .number = UpdateInsureOrderVisitReq_FieldNumber_VisitProblem,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(UpdateInsureOrderVisitReq__storage_, visitProblem),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "visitMeasures",
        .dataTypeSpecific.className = NULL,
        .number = UpdateInsureOrderVisitReq_FieldNumber_VisitMeasures,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(UpdateInsureOrderVisitReq__storage_, visitMeasures),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "visitVita",
        .dataTypeSpecific.className = NULL,
        .number = UpdateInsureOrderVisitReq_FieldNumber_VisitVita,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(UpdateInsureOrderVisitReq__storage_, visitVita),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "visitQualityControl",
        .dataTypeSpecific.className = NULL,
        .number = UpdateInsureOrderVisitReq_FieldNumber_VisitQualityControl,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(UpdateInsureOrderVisitReq__storage_, visitQualityControl),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "visitSkillTraining",
        .dataTypeSpecific.className = NULL,
        .number = UpdateInsureOrderVisitReq_FieldNumber_VisitSkillTraining,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(UpdateInsureOrderVisitReq__storage_, visitSkillTraining),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "visitTrainingType",
        .dataTypeSpecific.className = NULL,
        .number = UpdateInsureOrderVisitReq_FieldNumber_VisitTrainingType,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(UpdateInsureOrderVisitReq__storage_, visitTrainingType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "visitSkillStatus",
        .dataTypeSpecific.className = NULL,
        .number = UpdateInsureOrderVisitReq_FieldNumber_VisitSkillStatus,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(UpdateInsureOrderVisitReq__storage_, visitSkillStatus),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "relationImgId",
        .dataTypeSpecific.className = NULL,
        .number = UpdateInsureOrderVisitReq_FieldNumber_RelationImgId,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(UpdateInsureOrderVisitReq__storage_, relationImgId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "hgImgId",
        .dataTypeSpecific.className = NULL,
        .number = UpdateInsureOrderVisitReq_FieldNumber_HgImgId,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(UpdateInsureOrderVisitReq__storage_, hgImgId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "nextTime",
        .dataTypeSpecific.className = NULL,
        .number = UpdateInsureOrderVisitReq_FieldNumber_NextTime,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(UpdateInsureOrderVisitReq__storage_, nextTime),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateInsureOrderVisitReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateInsureOrderVisitReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\017\001\007\000\002\007\000\003\013\000\004\016\000\005\014\000\006\014\000\007\r\000\010\t\000\t\023\000\n\022\000\013\021\000\014\020\000\r\r\000"
        "\016\007\000\017\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UpdateInsureOrderAddrReq

@implementation UpdateInsureOrderAddrReq

@dynamic province;
@dynamic city;
@dynamic cityCode;
@dynamic district;
@dynamic adCode;
@dynamic street;
@dynamic building;
@dynamic addrDetail;
@dynamic phone;
@dynamic contacts;
@dynamic orderId;
@dynamic gpsType;
@dynamic lng;
@dynamic lat;

typedef struct UpdateInsureOrderAddrReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t gpsType;
  NSString *province;
  NSString *city;
  NSString *cityCode;
  NSString *district;
  NSString *adCode;
  NSString *street;
  NSString *building;
  NSString *addrDetail;
  NSString *phone;
  NSString *contacts;
  NSString *orderId;
  double lng;
  double lat;
} UpdateInsureOrderAddrReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "province",
        .dataTypeSpecific.className = NULL,
        .number = UpdateInsureOrderAddrReq_FieldNumber_Province,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpdateInsureOrderAddrReq__storage_, province),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "city",
        .dataTypeSpecific.className = NULL,
        .number = UpdateInsureOrderAddrReq_FieldNumber_City,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UpdateInsureOrderAddrReq__storage_, city),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cityCode",
        .dataTypeSpecific.className = NULL,
        .number = UpdateInsureOrderAddrReq_FieldNumber_CityCode,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(UpdateInsureOrderAddrReq__storage_, cityCode),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "district",
        .dataTypeSpecific.className = NULL,
        .number = UpdateInsureOrderAddrReq_FieldNumber_District,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(UpdateInsureOrderAddrReq__storage_, district),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "adCode",
        .dataTypeSpecific.className = NULL,
        .number = UpdateInsureOrderAddrReq_FieldNumber_AdCode,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(UpdateInsureOrderAddrReq__storage_, adCode),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "street",
        .dataTypeSpecific.className = NULL,
        .number = UpdateInsureOrderAddrReq_FieldNumber_Street,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(UpdateInsureOrderAddrReq__storage_, street),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "building",
        .dataTypeSpecific.className = NULL,
        .number = UpdateInsureOrderAddrReq_FieldNumber_Building,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(UpdateInsureOrderAddrReq__storage_, building),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "addrDetail",
        .dataTypeSpecific.className = NULL,
        .number = UpdateInsureOrderAddrReq_FieldNumber_AddrDetail,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(UpdateInsureOrderAddrReq__storage_, addrDetail),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "phone",
        .dataTypeSpecific.className = NULL,
        .number = UpdateInsureOrderAddrReq_FieldNumber_Phone,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(UpdateInsureOrderAddrReq__storage_, phone),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "contacts",
        .dataTypeSpecific.className = NULL,
        .number = UpdateInsureOrderAddrReq_FieldNumber_Contacts,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(UpdateInsureOrderAddrReq__storage_, contacts),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = UpdateInsureOrderAddrReq_FieldNumber_OrderId,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(UpdateInsureOrderAddrReq__storage_, orderId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "gpsType",
        .dataTypeSpecific.className = NULL,
        .number = UpdateInsureOrderAddrReq_FieldNumber_GpsType,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(UpdateInsureOrderAddrReq__storage_, gpsType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "lng",
        .dataTypeSpecific.className = NULL,
        .number = UpdateInsureOrderAddrReq_FieldNumber_Lng,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(UpdateInsureOrderAddrReq__storage_, lng),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "lat",
        .dataTypeSpecific.className = NULL,
        .number = UpdateInsureOrderAddrReq_FieldNumber_Lat,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(UpdateInsureOrderAddrReq__storage_, lat),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateInsureOrderAddrReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateInsureOrderAddrReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\003\010\000\005\006\000\010\n\000\013\007\000\014\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CancelOrderNewReq

@implementation CancelOrderNewReq

@dynamic orderId;
@dynamic cancelOrderId;
@dynamic cancelOrderDesc;

typedef struct CancelOrderNewReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t cancelOrderId;
  NSString *orderId;
  NSString *cancelOrderDesc;
} CancelOrderNewReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = CancelOrderNewReq_FieldNumber_OrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CancelOrderNewReq__storage_, orderId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cancelOrderId",
        .dataTypeSpecific.className = NULL,
        .number = CancelOrderNewReq_FieldNumber_CancelOrderId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CancelOrderNewReq__storage_, cancelOrderId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "cancelOrderDesc",
        .dataTypeSpecific.className = NULL,
        .number = CancelOrderNewReq_FieldNumber_CancelOrderDesc,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CancelOrderNewReq__storage_, cancelOrderDesc),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CancelOrderNewReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CancelOrderNewReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\007\000\002\r\000\003\017\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetHGInfoByOrderReq

@implementation GetHGInfoByOrderReq

@dynamic orderId;
@dynamic hgType;
@dynamic hgId;

typedef struct GetHGInfoByOrderReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t hgType;
  NSString *orderId;
  uint64_t hgId;
} GetHGInfoByOrderReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = GetHGInfoByOrderReq_FieldNumber_OrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetHGInfoByOrderReq__storage_, orderId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "hgType",
        .dataTypeSpecific.className = NULL,
        .number = GetHGInfoByOrderReq_FieldNumber_HgType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetHGInfoByOrderReq__storage_, hgType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "hgId",
        .dataTypeSpecific.className = NULL,
        .number = GetHGInfoByOrderReq_FieldNumber_HgId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetHGInfoByOrderReq__storage_, hgId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetHGInfoByOrderReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetHGInfoByOrderReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\007\000\002\006\000\003\004\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetHGInfoByOrderRsp

@implementation GetHGInfoByOrderRsp

@dynamic hasHgInfo, hgInfo;

typedef struct GetHGInfoByOrderRsp__storage_ {
  uint32_t _has_storage_[1];
  HGInfoVO *hgInfo;
} GetHGInfoByOrderRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "hgInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(HGInfoVO),
        .number = GetHGInfoByOrderRsp_FieldNumber_HgInfo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetHGInfoByOrderRsp__storage_, hgInfo),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetHGInfoByOrderRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetHGInfoByOrderRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetInsureOrderTendItemReq

@implementation GetInsureOrderTendItemReq

@dynamic orderId;
@dynamic serviceAddr;
@dynamic status;

typedef struct GetInsureOrderTendItemReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t serviceAddr;
  uint32_t status;
  NSString *orderId;
} GetInsureOrderTendItemReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureOrderTendItemReq_FieldNumber_OrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetInsureOrderTendItemReq__storage_, orderId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "serviceAddr",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureOrderTendItemReq_FieldNumber_ServiceAddr,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetInsureOrderTendItemReq__storage_, serviceAddr),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureOrderTendItemReq_FieldNumber_Status,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetInsureOrderTendItemReq__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetInsureOrderTendItemReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetInsureOrderTendItemReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\007\000\002\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetInsureOrderTendItemRsp

@implementation GetInsureOrderTendItemRsp

@dynamic orderId;
@dynamic familyNumber;
@dynamic hospitalNumber;
@dynamic serveNumber;
@dynamic restNumber;
@dynamic absenteeismNumber;
@dynamic voArray, voArray_Count;

typedef struct GetInsureOrderTendItemRsp__storage_ {
  uint32_t _has_storage_[1];
  NSString *orderId;
  NSMutableArray *voArray;
  uint64_t familyNumber;
  uint64_t hospitalNumber;
  uint64_t serveNumber;
  uint64_t restNumber;
  uint64_t absenteeismNumber;
} GetInsureOrderTendItemRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureOrderTendItemRsp_FieldNumber_OrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetInsureOrderTendItemRsp__storage_, orderId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "familyNumber",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureOrderTendItemRsp_FieldNumber_FamilyNumber,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetInsureOrderTendItemRsp__storage_, familyNumber),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "hospitalNumber",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureOrderTendItemRsp_FieldNumber_HospitalNumber,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetInsureOrderTendItemRsp__storage_, hospitalNumber),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "serveNumber",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureOrderTendItemRsp_FieldNumber_ServeNumber,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetInsureOrderTendItemRsp__storage_, serveNumber),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "restNumber",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureOrderTendItemRsp_FieldNumber_RestNumber,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GetInsureOrderTendItemRsp__storage_, restNumber),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "absenteeismNumber",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureOrderTendItemRsp_FieldNumber_AbsenteeismNumber,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(GetInsureOrderTendItemRsp__storage_, absenteeismNumber),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "voArray",
        .dataTypeSpecific.className = GPBStringifySymbol(InsureOrderTendItemVO),
        .number = GetInsureOrderTendItemRsp_FieldNumber_VoArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetInsureOrderTendItemRsp__storage_, voArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetInsureOrderTendItemRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetInsureOrderTendItemRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\006\001\007\000\002\014\000\003\016\000\004\013\000\005\n\000\006\021\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetInsureOrderTendItemDetailReq

@implementation GetInsureOrderTendItemDetailReq

@dynamic orderId;
@dynamic itemId;

typedef struct GetInsureOrderTendItemDetailReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *orderId;
  uint64_t itemId;
} GetInsureOrderTendItemDetailReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureOrderTendItemDetailReq_FieldNumber_OrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetInsureOrderTendItemDetailReq__storage_, orderId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "itemId",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureOrderTendItemDetailReq_FieldNumber_ItemId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetInsureOrderTendItemDetailReq__storage_, itemId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetInsureOrderTendItemDetailReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetInsureOrderTendItemDetailReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\007\000\002\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetInsureOrderTendItemDetailRsp

@implementation GetInsureOrderTendItemDetailRsp

@dynamic orderId;
@dynamic itemId;
@dynamic addrStr;
@dynamic itemVoArray, itemVoArray_Count;
@dynamic status;
@dynamic serviceAddr;

typedef struct GetInsureOrderTendItemDetailRsp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t status;
  uint32_t serviceAddr;
  NSString *orderId;
  NSString *addrStr;
  NSMutableArray *itemVoArray;
  uint64_t itemId;
} GetInsureOrderTendItemDetailRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureOrderTendItemDetailRsp_FieldNumber_OrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetInsureOrderTendItemDetailRsp__storage_, orderId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "itemId",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureOrderTendItemDetailRsp_FieldNumber_ItemId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetInsureOrderTendItemDetailRsp__storage_, itemId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "addrStr",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureOrderTendItemDetailRsp_FieldNumber_AddrStr,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetInsureOrderTendItemDetailRsp__storage_, addrStr),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "itemVoArray",
        .dataTypeSpecific.className = GPBStringifySymbol(InsureOrderTendItemDetailVO),
        .number = GetInsureOrderTendItemDetailRsp_FieldNumber_ItemVoArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetInsureOrderTendItemDetailRsp__storage_, itemVoArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureOrderTendItemDetailRsp_FieldNumber_Status,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetInsureOrderTendItemDetailRsp__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "serviceAddr",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureOrderTendItemDetailRsp_FieldNumber_ServiceAddr,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GetInsureOrderTendItemDetailRsp__storage_, serviceAddr),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetInsureOrderTendItemDetailRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetInsureOrderTendItemDetailRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001\007\000\002\006\000\003\007\000\004\000ItemVO\000\006\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ConfirmInsureOrderTendItemAddrReq

@implementation ConfirmInsureOrderTendItemAddrReq

@dynamic orderId;
@dynamic itemId;
@dynamic status;

typedef struct ConfirmInsureOrderTendItemAddrReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t status;
  NSString *orderId;
  uint64_t itemId;
} ConfirmInsureOrderTendItemAddrReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = ConfirmInsureOrderTendItemAddrReq_FieldNumber_OrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ConfirmInsureOrderTendItemAddrReq__storage_, orderId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "itemId",
        .dataTypeSpecific.className = NULL,
        .number = ConfirmInsureOrderTendItemAddrReq_FieldNumber_ItemId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ConfirmInsureOrderTendItemAddrReq__storage_, itemId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = ConfirmInsureOrderTendItemAddrReq_FieldNumber_Status,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ConfirmInsureOrderTendItemAddrReq__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ConfirmInsureOrderTendItemAddrReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ConfirmInsureOrderTendItemAddrReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\007\000\002\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ConfirmInsureOrderTendItemAddrRsp

@implementation ConfirmInsureOrderTendItemAddrRsp

@dynamic orderId;
@dynamic itemId;

typedef struct ConfirmInsureOrderTendItemAddrRsp__storage_ {
  uint32_t _has_storage_[1];
  NSString *orderId;
  uint64_t itemId;
} ConfirmInsureOrderTendItemAddrRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = ConfirmInsureOrderTendItemAddrRsp_FieldNumber_OrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ConfirmInsureOrderTendItemAddrRsp__storage_, orderId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "itemId",
        .dataTypeSpecific.className = NULL,
        .number = ConfirmInsureOrderTendItemAddrRsp_FieldNumber_ItemId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ConfirmInsureOrderTendItemAddrRsp__storage_, itemId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ConfirmInsureOrderTendItemAddrRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ConfirmInsureOrderTendItemAddrRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\007\000\002\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ConfirmInsureOrderTendItemDetailReq

@implementation ConfirmInsureOrderTendItemDetailReq

@dynamic orderId;
@dynamic itemId;
@dynamic status;
@dynamic itemDetailId;

typedef struct ConfirmInsureOrderTendItemDetailReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t status;
  NSString *orderId;
  uint64_t itemId;
  uint64_t itemDetailId;
} ConfirmInsureOrderTendItemDetailReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = ConfirmInsureOrderTendItemDetailReq_FieldNumber_OrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ConfirmInsureOrderTendItemDetailReq__storage_, orderId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "itemId",
        .dataTypeSpecific.className = NULL,
        .number = ConfirmInsureOrderTendItemDetailReq_FieldNumber_ItemId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ConfirmInsureOrderTendItemDetailReq__storage_, itemId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = ConfirmInsureOrderTendItemDetailReq_FieldNumber_Status,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ConfirmInsureOrderTendItemDetailReq__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "itemDetailId",
        .dataTypeSpecific.className = NULL,
        .number = ConfirmInsureOrderTendItemDetailReq_FieldNumber_ItemDetailId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ConfirmInsureOrderTendItemDetailReq__storage_, itemDetailId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ConfirmInsureOrderTendItemDetailReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ConfirmInsureOrderTendItemDetailReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\007\000\002\006\000\004\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SaveOrUpdateInsureOrderRelationReq

@implementation SaveOrUpdateInsureOrderRelationReq

@dynamic orderId;
@dynamic phone;
@dynamic name;
@dynamic idcard;
@dynamic relation;
@dynamic sendDate;

typedef struct SaveOrUpdateInsureOrderRelationReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *orderId;
  NSString *phone;
  NSString *name;
  NSString *idcard;
  NSString *relation;
  NSString *sendDate;
} SaveOrUpdateInsureOrderRelationReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = SaveOrUpdateInsureOrderRelationReq_FieldNumber_OrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SaveOrUpdateInsureOrderRelationReq__storage_, orderId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "phone",
        .dataTypeSpecific.className = NULL,
        .number = SaveOrUpdateInsureOrderRelationReq_FieldNumber_Phone,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SaveOrUpdateInsureOrderRelationReq__storage_, phone),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = SaveOrUpdateInsureOrderRelationReq_FieldNumber_Name,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SaveOrUpdateInsureOrderRelationReq__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "idcard",
        .dataTypeSpecific.className = NULL,
        .number = SaveOrUpdateInsureOrderRelationReq_FieldNumber_Idcard,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SaveOrUpdateInsureOrderRelationReq__storage_, idcard),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "relation",
        .dataTypeSpecific.className = NULL,
        .number = SaveOrUpdateInsureOrderRelationReq_FieldNumber_Relation,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SaveOrUpdateInsureOrderRelationReq__storage_, relation),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sendDate",
        .dataTypeSpecific.className = NULL,
        .number = SaveOrUpdateInsureOrderRelationReq_FieldNumber_SendDate,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SaveOrUpdateInsureOrderRelationReq__storage_, sendDate),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SaveOrUpdateInsureOrderRelationReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SaveOrUpdateInsureOrderRelationReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\007\000\006\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetReckonSubsidyRsp

@implementation GetReckonSubsidyRsp

@dynamic subsidyListArray, subsidyListArray_Count;

typedef struct GetReckonSubsidyRsp__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *subsidyListArray;
} GetReckonSubsidyRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "subsidyListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(SubsidyVO),
        .number = GetReckonSubsidyRsp_FieldNumber_SubsidyListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetReckonSubsidyRsp__storage_, subsidyListArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetReckonSubsidyRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetReckonSubsidyRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\000subsidyList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetScheduleReq

@implementation GetScheduleReq

@dynamic date;
@dynamic tabType;
@dynamic pageNo;
@dynamic pageSize;

typedef struct GetScheduleReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t tabType;
  uint32_t pageNo;
  uint32_t pageSize;
  NSString *date;
} GetScheduleReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "date",
        .dataTypeSpecific.className = NULL,
        .number = GetScheduleReq_FieldNumber_Date,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetScheduleReq__storage_, date),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "tabType",
        .dataTypeSpecific.className = NULL,
        .number = GetScheduleReq_FieldNumber_TabType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetScheduleReq__storage_, tabType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "pageNo",
        .dataTypeSpecific.className = NULL,
        .number = GetScheduleReq_FieldNumber_PageNo,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetScheduleReq__storage_, pageNo),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = GetScheduleReq_FieldNumber_PageSize,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetScheduleReq__storage_, pageSize),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetScheduleReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetScheduleReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\002\007\000\003\005A\000\004\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetScheduleRsp

@implementation GetScheduleRsp

@dynamic scheduleListArray, scheduleListArray_Count;

typedef struct GetScheduleRsp__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *scheduleListArray;
} GetScheduleRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "scheduleListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(MyScheduleVO),
        .number = GetScheduleRsp_FieldNumber_ScheduleListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetScheduleRsp__storage_, scheduleListArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetScheduleRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetScheduleRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\000scheduleList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetInsureOrderVisitListReq

@implementation GetInsureOrderVisitListReq

@dynamic orderId;
@dynamic status;

typedef struct GetInsureOrderVisitListReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t status;
  NSString *orderId;
} GetInsureOrderVisitListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureOrderVisitListReq_FieldNumber_OrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetInsureOrderVisitListReq__storage_, orderId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureOrderVisitListReq_FieldNumber_Status,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetInsureOrderVisitListReq__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetInsureOrderVisitListReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetInsureOrderVisitListReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetInsureOrderVisitListHSReq

@implementation GetInsureOrderVisitListHSReq

@dynamic status;
@dynamic name;
@dynamic pageNo;
@dynamic pageSize;

typedef struct GetInsureOrderVisitListHSReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t status;
  uint32_t pageNo;
  uint32_t pageSize;
  NSString *name;
} GetInsureOrderVisitListHSReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureOrderVisitListHSReq_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetInsureOrderVisitListHSReq__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureOrderVisitListHSReq_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetInsureOrderVisitListHSReq__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pageNo",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureOrderVisitListHSReq_FieldNumber_PageNo,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetInsureOrderVisitListHSReq__storage_, pageNo),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = GetInsureOrderVisitListHSReq_FieldNumber_PageSize,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetInsureOrderVisitListHSReq__storage_, pageSize),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetInsureOrderVisitListHSReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetInsureOrderVisitListHSReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\003\005A\000\004\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetInsureOrderVisitListRsp

@implementation GetInsureOrderVisitListRsp

@dynamic visitVoArray, visitVoArray_Count;

typedef struct GetInsureOrderVisitListRsp__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *visitVoArray;
} GetInsureOrderVisitListRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "visitVoArray",
        .dataTypeSpecific.className = GPBStringifySymbol(InsureOrderVisitVO),
        .number = GetInsureOrderVisitListRsp_FieldNumber_VisitVoArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetInsureOrderVisitListRsp__storage_, visitVoArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetInsureOrderVisitListRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetInsureOrderVisitListRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\000visitVO\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetInusreOrderTeachRecordRsp

@implementation GetInusreOrderTeachRecordRsp

@dynamic recordListArray, recordListArray_Count;

typedef struct GetInusreOrderTeachRecordRsp__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *recordListArray;
} GetInusreOrderTeachRecordRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "recordListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(TeachRecordVO),
        .number = GetInusreOrderTeachRecordRsp_FieldNumber_RecordListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetInusreOrderTeachRecordRsp__storage_, recordListArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetInusreOrderTeachRecordRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetInusreOrderTeachRecordRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\000recordList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SaveOrderTendReq

@implementation SaveOrderTendReq

@dynamic orderId;

typedef struct SaveOrderTendReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *orderId;
} SaveOrderTendReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = SaveOrderTendReq_FieldNumber_OrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SaveOrderTendReq__storage_, orderId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SaveOrderTendReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SaveOrderTendReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SaveOrderTendRsp

@implementation SaveOrderTendRsp

@dynamic orderTendId;

typedef struct SaveOrderTendRsp__storage_ {
  uint32_t _has_storage_[1];
  uint64_t orderTendId;
} SaveOrderTendRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderTendId",
        .dataTypeSpecific.className = NULL,
        .number = SaveOrderTendRsp_FieldNumber_OrderTendId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SaveOrderTendRsp__storage_, orderTendId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SaveOrderTendRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SaveOrderTendRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DelOrderTendReq

@implementation DelOrderTendReq

@dynamic orderTendId;

typedef struct DelOrderTendReq__storage_ {
  uint32_t _has_storage_[1];
  uint64_t orderTendId;
} DelOrderTendReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderTendId",
        .dataTypeSpecific.className = NULL,
        .number = DelOrderTendReq_FieldNumber_OrderTendId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DelOrderTendReq__storage_, orderTendId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DelOrderTendReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DelOrderTendReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SaveOrderTendDetailReq

@implementation SaveOrderTendDetailReq

@dynamic orderTendId;
@dynamic tendDetailTypeId;
@dynamic detailListArray, detailListArray_Count;

typedef struct SaveOrderTendDetailReq__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *detailListArray;
  uint64_t orderTendId;
  uint64_t tendDetailTypeId;
} SaveOrderTendDetailReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderTendId",
        .dataTypeSpecific.className = NULL,
        .number = SaveOrderTendDetailReq_FieldNumber_OrderTendId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SaveOrderTendDetailReq__storage_, orderTendId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "tendDetailTypeId",
        .dataTypeSpecific.className = NULL,
        .number = SaveOrderTendDetailReq_FieldNumber_TendDetailTypeId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SaveOrderTendDetailReq__storage_, tendDetailTypeId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "detailListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(OrderTendDetailBO),
        .number = SaveOrderTendDetailReq_FieldNumber_DetailListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SaveOrderTendDetailReq__storage_, detailListArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SaveOrderTendDetailReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SaveOrderTendDetailReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\013\000\002\020\000\003\000detailList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SubmitOrderTendReq

@implementation SubmitOrderTendReq

@dynamic orderTendId;

typedef struct SubmitOrderTendReq__storage_ {
  uint32_t _has_storage_[1];
  uint64_t orderTendId;
} SubmitOrderTendReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderTendId",
        .dataTypeSpecific.className = NULL,
        .number = SubmitOrderTendReq_FieldNumber_OrderTendId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SubmitOrderTendReq__storage_, orderTendId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SubmitOrderTendReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SubmitOrderTendReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TransferInsureOrderReq

@implementation TransferInsureOrderReq

@dynamic orderId;
@dynamic hgId;

typedef struct TransferInsureOrderReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *orderId;
  uint64_t hgId;
} TransferInsureOrderReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = TransferInsureOrderReq_FieldNumber_OrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TransferInsureOrderReq__storage_, orderId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "hgId",
        .dataTypeSpecific.className = NULL,
        .number = TransferInsureOrderReq_FieldNumber_HgId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TransferInsureOrderReq__storage_, hgId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TransferInsureOrderReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TransferInsureOrderReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\007\000\002\004\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetTeachRecordReq

@implementation GetTeachRecordReq

@dynamic recordId;

typedef struct GetTeachRecordReq__storage_ {
  uint32_t _has_storage_[1];
  uint64_t recordId;
} GetTeachRecordReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "recordId",
        .dataTypeSpecific.className = NULL,
        .number = GetTeachRecordReq_FieldNumber_RecordId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetTeachRecordReq__storage_, recordId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetTeachRecordReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetTeachRecordReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetTeachRecordRsp

@implementation GetTeachRecordRsp

@dynamic hasRecord, record;
@dynamic startTime;
@dynamic endTime;
@dynamic selfPraise;
@dynamic hgPraise;

typedef struct GetTeachRecordRsp__storage_ {
  uint32_t _has_storage_[1];
  InsureOrderTeachRecord *record;
  NSString *startTime;
  NSString *endTime;
  NSString *selfPraise;
  NSString *hgPraise;
} GetTeachRecordRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "record",
        .dataTypeSpecific.className = GPBStringifySymbol(InsureOrderTeachRecord),
        .number = GetTeachRecordRsp_FieldNumber_Record,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetTeachRecordRsp__storage_, record),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "startTime",
        .dataTypeSpecific.className = NULL,
        .number = GetTeachRecordRsp_FieldNumber_StartTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetTeachRecordRsp__storage_, startTime),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "endTime",
        .dataTypeSpecific.className = NULL,
        .number = GetTeachRecordRsp_FieldNumber_EndTime,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetTeachRecordRsp__storage_, endTime),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "selfPraise",
        .dataTypeSpecific.className = NULL,
        .number = GetTeachRecordRsp_FieldNumber_SelfPraise,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetTeachRecordRsp__storage_, selfPraise),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "hgPraise",
        .dataTypeSpecific.className = NULL,
        .number = GetTeachRecordRsp_FieldNumber_HgPraise,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GetTeachRecordRsp__storage_, hgPraise),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetTeachRecordRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetTeachRecordRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\002\t\000\003\007\000\004\n\000\005\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AddTeachRecordReq

@implementation AddTeachRecordReq

@dynamic orderId;
@dynamic startTime;
@dynamic endTime;
@dynamic trainTime;
@dynamic exerciseTime;
@dynamic exerciseContentArray, exerciseContentArray_Count;
@dynamic trainContentArray, trainContentArray_Count;
@dynamic selfPraise;
@dynamic hgPraise;
@dynamic remark;
@dynamic picsArray, picsArray_Count;
@dynamic selfSign;
@dynamic hgSign;

typedef struct AddTeachRecordReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t selfPraise;
  uint32_t hgPraise;
  NSString *orderId;
  NSString *startTime;
  NSString *endTime;
  NSMutableArray *exerciseContentArray;
  NSMutableArray *trainContentArray;
  NSString *remark;
  NSMutableArray *picsArray;
  NSString *selfSign;
  NSString *hgSign;
  double trainTime;
  double exerciseTime;
} AddTeachRecordReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = AddTeachRecordReq_FieldNumber_OrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AddTeachRecordReq__storage_, orderId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "startTime",
        .dataTypeSpecific.className = NULL,
        .number = AddTeachRecordReq_FieldNumber_StartTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AddTeachRecordReq__storage_, startTime),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "endTime",
        .dataTypeSpecific.className = NULL,
        .number = AddTeachRecordReq_FieldNumber_EndTime,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(AddTeachRecordReq__storage_, endTime),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "trainTime",
        .dataTypeSpecific.className = NULL,
        .number = AddTeachRecordReq_FieldNumber_TrainTime,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(AddTeachRecordReq__storage_, trainTime),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "exerciseTime",
        .dataTypeSpecific.className = NULL,
        .number = AddTeachRecordReq_FieldNumber_ExerciseTime,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(AddTeachRecordReq__storage_, exerciseTime),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "exerciseContentArray",
        .dataTypeSpecific.className = NULL,
        .number = AddTeachRecordReq_FieldNumber_ExerciseContentArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(AddTeachRecordReq__storage_, exerciseContentArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "trainContentArray",
        .dataTypeSpecific.className = NULL,
        .number = AddTeachRecordReq_FieldNumber_TrainContentArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(AddTeachRecordReq__storage_, trainContentArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "selfPraise",
        .dataTypeSpecific.className = NULL,
        .number = AddTeachRecordReq_FieldNumber_SelfPraise,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(AddTeachRecordReq__storage_, selfPraise),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "hgPraise",
        .dataTypeSpecific.className = NULL,
        .number = AddTeachRecordReq_FieldNumber_HgPraise,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(AddTeachRecordReq__storage_, hgPraise),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "remark",
        .dataTypeSpecific.className = NULL,
        .number = AddTeachRecordReq_FieldNumber_Remark,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(AddTeachRecordReq__storage_, remark),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "picsArray",
        .dataTypeSpecific.className = NULL,
        .number = AddTeachRecordReq_FieldNumber_PicsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(AddTeachRecordReq__storage_, picsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "selfSign",
        .dataTypeSpecific.className = NULL,
        .number = AddTeachRecordReq_FieldNumber_SelfSign,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(AddTeachRecordReq__storage_, selfSign),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "hgSign",
        .dataTypeSpecific.className = NULL,
        .number = AddTeachRecordReq_FieldNumber_HgSign,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(AddTeachRecordReq__storage_, hgSign),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AddTeachRecordReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AddTeachRecordReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\013\001\007\000\002\t\000\003\007\000\004\t\000\005\014\000\006\000exerciseContent\000\007\000trai"
        "nContent\000\010\n\000\t\010\000\014\010\000\r\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetHomeStaffListReq

@implementation GetHomeStaffListReq

@dynamic pageNo;
@dynamic pageSize;
@dynamic key;
@dynamic roleId;
@dynamic orderId;
@dynamic insureNo;

typedef struct GetHomeStaffListReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t pageNo;
  uint32_t pageSize;
  NSString *key;
  NSString *orderId;
  NSString *insureNo;
  uint64_t roleId;
} GetHomeStaffListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "pageNo",
        .dataTypeSpecific.className = NULL,
        .number = GetHomeStaffListReq_FieldNumber_PageNo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetHomeStaffListReq__storage_, pageNo),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = GetHomeStaffListReq_FieldNumber_PageSize,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetHomeStaffListReq__storage_, pageSize),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "key",
        .dataTypeSpecific.className = NULL,
        .number = GetHomeStaffListReq_FieldNumber_Key,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetHomeStaffListReq__storage_, key),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "roleId",
        .dataTypeSpecific.className = NULL,
        .number = GetHomeStaffListReq_FieldNumber_RoleId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetHomeStaffListReq__storage_, roleId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = GetHomeStaffListReq_FieldNumber_OrderId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GetHomeStaffListReq__storage_, orderId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "insureNo",
        .dataTypeSpecific.className = NULL,
        .number = GetHomeStaffListReq_FieldNumber_InsureNo,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(GetHomeStaffListReq__storage_, insureNo),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetHomeStaffListReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetHomeStaffListReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001\006\000\002\010\000\004\006\000\005\007\000\006\007A\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetHomeStaffListRsp

@implementation GetHomeStaffListRsp

@dynamic staffListArray, staffListArray_Count;
@dynamic count;

typedef struct GetHomeStaffListRsp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t count;
  NSMutableArray *staffListArray;
} GetHomeStaffListRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "staffListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(InsureHGListVO),
        .number = GetHomeStaffListRsp_FieldNumber_StaffListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetHomeStaffListRsp__storage_, staffListArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = GetHomeStaffListRsp_FieldNumber_Count,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetHomeStaffListRsp__storage_, count),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetHomeStaffListRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetHomeStaffListRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\000staffList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetTeachRecordTmpValueReq

@implementation GetTeachRecordTmpValueReq

@dynamic token;

typedef struct GetTeachRecordTmpValueReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *token;
} GetTeachRecordTmpValueReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "token",
        .dataTypeSpecific.className = NULL,
        .number = GetTeachRecordTmpValueReq_FieldNumber_Token,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetTeachRecordTmpValueReq__storage_, token),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetTeachRecordTmpValueReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetTeachRecordTmpValueReq__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetTeachRecordTmpValueRsp

@implementation GetTeachRecordTmpValueRsp

@dynamic contentArray, contentArray_Count;

typedef struct GetTeachRecordTmpValueRsp__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *contentArray;
} GetTeachRecordTmpValueRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "contentArray",
        .dataTypeSpecific.className = NULL,
        .number = GetTeachRecordTmpValueRsp_FieldNumber_ContentArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetTeachRecordTmpValueRsp__storage_, contentArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetTeachRecordTmpValueRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetTeachRecordTmpValueRsp__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CopyOrderTendReq

@implementation CopyOrderTendReq

@dynamic orderTendId;

typedef struct CopyOrderTendReq__storage_ {
  uint32_t _has_storage_[1];
  uint64_t orderTendId;
} CopyOrderTendReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderTendId",
        .dataTypeSpecific.className = NULL,
        .number = CopyOrderTendReq_FieldNumber_OrderTendId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CopyOrderTendReq__storage_, orderTendId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CopyOrderTendReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CopyOrderTendReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CopyOrderTendRsp

@implementation CopyOrderTendRsp

@dynamic orderTendId;

typedef struct CopyOrderTendRsp__storage_ {
  uint32_t _has_storage_[1];
  uint64_t orderTendId;
} CopyOrderTendRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderTendId",
        .dataTypeSpecific.className = NULL,
        .number = CopyOrderTendRsp_FieldNumber_OrderTendId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CopyOrderTendRsp__storage_, orderTendId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CopyOrderTendRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CopyOrderTendRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ConfirmNewOrderReq

@implementation ConfirmNewOrderReq

@dynamic orderId;
@dynamic branchId;
@dynamic priceId;

typedef struct ConfirmNewOrderReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *orderId;
  uint64_t branchId;
  uint64_t priceId;
} ConfirmNewOrderReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = ConfirmNewOrderReq_FieldNumber_OrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ConfirmNewOrderReq__storage_, orderId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "branchId",
        .dataTypeSpecific.className = NULL,
        .number = ConfirmNewOrderReq_FieldNumber_BranchId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ConfirmNewOrderReq__storage_, branchId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "priceId",
        .dataTypeSpecific.className = NULL,
        .number = ConfirmNewOrderReq_FieldNumber_PriceId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ConfirmNewOrderReq__storage_, priceId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ConfirmNewOrderReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ConfirmNewOrderReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\007\000\002\010\000\003\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ConfirmNewOrderRsp

@implementation ConfirmNewOrderRsp

@dynamic kinsName;
@dynamic orgNo;
@dynamic contactPhone;
@dynamic orgName;
@dynamic branchName;
@dynamic serviceItem;
@dynamic priceDesc;
@dynamic notice;
@dynamic kinsId;
@dynamic orgId;
@dynamic userId;
@dynamic admissionDate;

typedef struct ConfirmNewOrderRsp__storage_ {
  uint32_t _has_storage_[1];
  NSString *kinsName;
  NSString *orgNo;
  NSString *contactPhone;
  NSString *orgName;
  NSString *branchName;
  NSString *serviceItem;
  NSString *priceDesc;
  NSString *notice;
  NSString *admissionDate;
  uint64_t kinsId;
  uint64_t orgId;
  uint64_t userId;
} ConfirmNewOrderRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "kinsName",
        .dataTypeSpecific.className = NULL,
        .number = ConfirmNewOrderRsp_FieldNumber_KinsName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ConfirmNewOrderRsp__storage_, kinsName),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "orgNo",
        .dataTypeSpecific.className = NULL,
        .number = ConfirmNewOrderRsp_FieldNumber_OrgNo,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ConfirmNewOrderRsp__storage_, orgNo),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "contactPhone",
        .dataTypeSpecific.className = NULL,
        .number = ConfirmNewOrderRsp_FieldNumber_ContactPhone,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ConfirmNewOrderRsp__storage_, contactPhone),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "orgName",
        .dataTypeSpecific.className = NULL,
        .number = ConfirmNewOrderRsp_FieldNumber_OrgName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ConfirmNewOrderRsp__storage_, orgName),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "branchName",
        .dataTypeSpecific.className = NULL,
        .number = ConfirmNewOrderRsp_FieldNumber_BranchName,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ConfirmNewOrderRsp__storage_, branchName),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "serviceItem",
        .dataTypeSpecific.className = NULL,
        .number = ConfirmNewOrderRsp_FieldNumber_ServiceItem,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(ConfirmNewOrderRsp__storage_, serviceItem),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "priceDesc",
        .dataTypeSpecific.className = NULL,
        .number = ConfirmNewOrderRsp_FieldNumber_PriceDesc,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(ConfirmNewOrderRsp__storage_, priceDesc),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "notice",
        .dataTypeSpecific.className = NULL,
        .number = ConfirmNewOrderRsp_FieldNumber_Notice,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(ConfirmNewOrderRsp__storage_, notice),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "kinsId",
        .dataTypeSpecific.className = NULL,
        .number = ConfirmNewOrderRsp_FieldNumber_KinsId,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(ConfirmNewOrderRsp__storage_, kinsId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "orgId",
        .dataTypeSpecific.className = NULL,
        .number = ConfirmNewOrderRsp_FieldNumber_OrgId,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(ConfirmNewOrderRsp__storage_, orgId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = ConfirmNewOrderRsp_FieldNumber_UserId,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(ConfirmNewOrderRsp__storage_, userId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "admissionDate",
        .dataTypeSpecific.className = NULL,
        .number = ConfirmNewOrderRsp_FieldNumber_AdmissionDate,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(ConfirmNewOrderRsp__storage_, admissionDate),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ConfirmNewOrderRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ConfirmNewOrderRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\013\001\010\000\002\004A\000\003\014\000\004\007\000\005\n\000\006\013\000\007\t\000\t\006\000\n\005\000\013\006\000\014\r\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetOrgAndBranchReq

@implementation GetOrgAndBranchReq

@dynamic isAll;
@dynamic orgId;
@dynamic type;

typedef struct GetOrgAndBranchReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t type;
  uint64_t orgId;
} GetOrgAndBranchReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "isAll",
        .dataTypeSpecific.className = NULL,
        .number = GetOrgAndBranchReq_FieldNumber_IsAll,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "orgId",
        .dataTypeSpecific.className = NULL,
        .number = GetOrgAndBranchReq_FieldNumber_OrgId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetOrgAndBranchReq__storage_, orgId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = GetOrgAndBranchReq_FieldNumber_Type,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetOrgAndBranchReq__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetOrgAndBranchReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetOrgAndBranchReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\005\000\002\005\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ConfirmOrderFinishNewReq

@implementation ConfirmOrderFinishNewReq

@dynamic orderId;
@dynamic refundPayType;

typedef struct ConfirmOrderFinishNewReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t refundPayType;
  NSString *orderId;
} ConfirmOrderFinishNewReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = ConfirmOrderFinishNewReq_FieldNumber_OrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ConfirmOrderFinishNewReq__storage_, orderId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "refundPayType",
        .dataTypeSpecific.className = NULL,
        .number = ConfirmOrderFinishNewReq_FieldNumber_RefundPayType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ConfirmOrderFinishNewReq__storage_, refundPayType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ConfirmOrderFinishNewReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ConfirmOrderFinishNewReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\007\000\002\r\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetOrderAdjustStatusRsp

@implementation GetOrderAdjustStatusRsp

@dynamic status;
@dynamic settleItemStatus;
@dynamic adjustStatus;
@dynamic fee;
@dynamic feeStr;
@dynamic hgRebateFee;
@dynamic hgRebateFeeStr;
@dynamic totalFee;
@dynamic totalFeeStr;

typedef struct GetOrderAdjustStatusRsp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t status;
  uint32_t settleItemStatus;
  uint32_t adjustStatus;
  NSString *feeStr;
  NSString *hgRebateFeeStr;
  NSString *totalFeeStr;
  uint64_t fee;
  int64_t hgRebateFee;
  int64_t totalFee;
} GetOrderAdjustStatusRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderAdjustStatusRsp_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetOrderAdjustStatusRsp__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "settleItemStatus",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderAdjustStatusRsp_FieldNumber_SettleItemStatus,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetOrderAdjustStatusRsp__storage_, settleItemStatus),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "adjustStatus",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderAdjustStatusRsp_FieldNumber_AdjustStatus,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetOrderAdjustStatusRsp__storage_, adjustStatus),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "fee",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderAdjustStatusRsp_FieldNumber_Fee,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetOrderAdjustStatusRsp__storage_, fee),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "feeStr",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderAdjustStatusRsp_FieldNumber_FeeStr,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GetOrderAdjustStatusRsp__storage_, feeStr),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "hgRebateFee",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderAdjustStatusRsp_FieldNumber_HgRebateFee,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(GetOrderAdjustStatusRsp__storage_, hgRebateFee),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "hgRebateFeeStr",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderAdjustStatusRsp_FieldNumber_HgRebateFeeStr,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(GetOrderAdjustStatusRsp__storage_, hgRebateFeeStr),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "totalFee",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderAdjustStatusRsp_FieldNumber_TotalFee,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(GetOrderAdjustStatusRsp__storage_, totalFee),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "totalFeeStr",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderAdjustStatusRsp_FieldNumber_TotalFeeStr,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(GetOrderAdjustStatusRsp__storage_, totalFeeStr),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetOrderAdjustStatusRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetOrderAdjustStatusRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\007\002\020\000\003\014\000\005\006\000\006\013\000\007\016\000\010\010\000\t\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetOrderReceptionTimeRsp

@implementation GetOrderReceptionTimeRsp

@dynamic receptionType;
@dynamic today;
@dynamic receptionDay;
@dynamic receptionTime;

typedef struct GetOrderReceptionTimeRsp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t receptionType;
  NSString *today;
  NSString *receptionDay;
  NSString *receptionTime;
} GetOrderReceptionTimeRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "receptionType",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderReceptionTimeRsp_FieldNumber_ReceptionType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetOrderReceptionTimeRsp__storage_, receptionType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "today",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderReceptionTimeRsp_FieldNumber_Today,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetOrderReceptionTimeRsp__storage_, today),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "receptionDay",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderReceptionTimeRsp_FieldNumber_ReceptionDay,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetOrderReceptionTimeRsp__storage_, receptionDay),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "receptionTime",
        .dataTypeSpecific.className = NULL,
        .number = GetOrderReceptionTimeRsp_FieldNumber_ReceptionTime,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetOrderReceptionTimeRsp__storage_, receptionTime),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetOrderReceptionTimeRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetOrderReceptionTimeRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\r\000\003\014\000\004\r\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - StartOrgOrderReq

@implementation StartOrgOrderReq

@dynamic receptionType;
@dynamic dateType;
@dynamic orderId;
@dynamic receptionTime;

typedef struct StartOrgOrderReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t receptionType;
  uint32_t dateType;
  NSString *orderId;
  NSString *receptionTime;
} StartOrgOrderReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "receptionType",
        .dataTypeSpecific.className = NULL,
        .number = StartOrgOrderReq_FieldNumber_ReceptionType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(StartOrgOrderReq__storage_, receptionType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "dateType",
        .dataTypeSpecific.className = NULL,
        .number = StartOrgOrderReq_FieldNumber_DateType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(StartOrgOrderReq__storage_, dateType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = StartOrgOrderReq_FieldNumber_OrderId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(StartOrgOrderReq__storage_, orderId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "receptionTime",
        .dataTypeSpecific.className = NULL,
        .number = StartOrgOrderReq_FieldNumber_ReceptionTime,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(StartOrgOrderReq__storage_, receptionTime),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[StartOrgOrderReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(StartOrgOrderReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001\r\000\002\010\000\003\007\000\004\r\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetFeedBackListRsp

@implementation GetFeedBackListRsp

@dynamic voArray, voArray_Count;

typedef struct GetFeedBackListRsp__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *voArray;
} GetFeedBackListRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "voArray",
        .dataTypeSpecific.className = GPBStringifySymbol(FeedBackVO),
        .number = GetFeedBackListRsp_FieldNumber_VoArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetFeedBackListRsp__storage_, voArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetFeedBackListRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetFeedBackListRsp__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetFeedBackReq

@implementation GetFeedBackReq

@dynamic id_p;

typedef struct GetFeedBackReq__storage_ {
  uint32_t _has_storage_[1];
  uint64_t id_p;
} GetFeedBackReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = GetFeedBackReq_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetFeedBackReq__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetFeedBackReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetFeedBackReq__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetFeedBackRsp

@implementation GetFeedBackRsp

@dynamic hasVo, vo;

typedef struct GetFeedBackRsp__storage_ {
  uint32_t _has_storage_[1];
  FeedBackVO *vo;
} GetFeedBackRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "vo",
        .dataTypeSpecific.className = GPBStringifySymbol(FeedBackVO),
        .number = GetFeedBackRsp_FieldNumber_Vo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetFeedBackRsp__storage_, vo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetFeedBackRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetFeedBackRsp__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetUserSituationReq

@implementation GetUserSituationReq

@dynamic startDate;
@dynamic branchIdArray, branchIdArray_Count;

typedef struct GetUserSituationReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *startDate;
  GPBUInt64Array *branchIdArray;
} GetUserSituationReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "startDate",
        .dataTypeSpecific.className = NULL,
        .number = GetUserSituationReq_FieldNumber_StartDate,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetUserSituationReq__storage_, startDate),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "branchIdArray",
        .dataTypeSpecific.className = NULL,
        .number = GetUserSituationReq_FieldNumber_BranchIdArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetUserSituationReq__storage_, branchIdArray),
        .flags = GPBFieldRepeated | GPBFieldPacked | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetUserSituationReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetUserSituationReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\t\000\002\000branchId\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetUserSituationRsp

@implementation GetUserSituationRsp

@dynamic voArray, voArray_Count;

typedef struct GetUserSituationRsp__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *voArray;
} GetUserSituationRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "voArray",
        .dataTypeSpecific.className = GPBStringifySymbol(UserSituationVO),
        .number = GetUserSituationRsp_FieldNumber_VoArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetUserSituationRsp__storage_, voArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetUserSituationRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetUserSituationRsp__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetUserSituationListReq

@implementation GetUserSituationListReq

@dynamic startDate;
@dynamic branchIdArray, branchIdArray_Count;
@dynamic type;
@dynamic pageNo;
@dynamic pageSize;
@dynamic sortType;

typedef struct GetUserSituationListReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t type;
  uint32_t pageNo;
  uint32_t pageSize;
  uint32_t sortType;
  NSString *startDate;
  GPBUInt64Array *branchIdArray;
} GetUserSituationListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "startDate",
        .dataTypeSpecific.className = NULL,
        .number = GetUserSituationListReq_FieldNumber_StartDate,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetUserSituationListReq__storage_, startDate),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "branchIdArray",
        .dataTypeSpecific.className = NULL,
        .number = GetUserSituationListReq_FieldNumber_BranchIdArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetUserSituationListReq__storage_, branchIdArray),
        .flags = GPBFieldRepeated | GPBFieldPacked | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = GetUserSituationListReq_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetUserSituationListReq__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "pageNo",
        .dataTypeSpecific.className = NULL,
        .number = GetUserSituationListReq_FieldNumber_PageNo,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetUserSituationListReq__storage_, pageNo),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = GetUserSituationListReq_FieldNumber_PageSize,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetUserSituationListReq__storage_, pageSize),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "sortType",
        .dataTypeSpecific.className = NULL,
        .number = GetUserSituationListReq_FieldNumber_SortType,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GetUserSituationListReq__storage_, sortType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetUserSituationListReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetUserSituationListReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001\t\000\002\000branchId\000\004\006\000\005\010\000\006\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetUserSituationListRsp

@implementation GetUserSituationListRsp

@dynamic voListArray, voListArray_Count;
@dynamic count;

typedef struct GetUserSituationListRsp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t count;
  NSMutableArray *voListArray;
} GetUserSituationListRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "voListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(UserSituationListVO),
        .number = GetUserSituationListRsp_FieldNumber_VoListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetUserSituationListRsp__storage_, voListArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = GetUserSituationListRsp_FieldNumber_Count,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetUserSituationListRsp__storage_, count),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetUserSituationListRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetUserSituationListRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\000voList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UpdateUserSitutionReq

@implementation UpdateUserSitutionReq

@dynamic orgNo;

typedef struct UpdateUserSitutionReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *orgNo;
} UpdateUserSitutionReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orgNo",
        .dataTypeSpecific.className = NULL,
        .number = UpdateUserSitutionReq_FieldNumber_OrgNo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpdateUserSitutionReq__storage_, orgNo),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateUserSitutionReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateUserSitutionReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\004A\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UpdateOrderHGReq

@implementation UpdateOrderHGReq

@dynamic orderId;
@dynamic hgId;

typedef struct UpdateOrderHGReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *orderId;
  uint64_t hgId;
} UpdateOrderHGReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = UpdateOrderHGReq_FieldNumber_OrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpdateOrderHGReq__storage_, orderId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "hgId",
        .dataTypeSpecific.className = NULL,
        .number = UpdateOrderHGReq_FieldNumber_HgId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UpdateOrderHGReq__storage_, hgId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateOrderHGReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateOrderHGReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\007\000\002\004\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SearchAbnormalOrderReq

@implementation SearchAbnormalOrderReq

@dynamic key;

typedef struct SearchAbnormalOrderReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *key;
} SearchAbnormalOrderReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "key",
        .dataTypeSpecific.className = NULL,
        .number = SearchAbnormalOrderReq_FieldNumber_Key,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SearchAbnormalOrderReq__storage_, key),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SearchAbnormalOrderReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SearchAbnormalOrderReq__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SearchAbnormalOrderRsp

@implementation SearchAbnormalOrderRsp

@dynamic voListArray, voListArray_Count;

typedef struct SearchAbnormalOrderRsp__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *voListArray;
} SearchAbnormalOrderRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "voListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(OrderListVO),
        .number = SearchAbnormalOrderRsp_FieldNumber_VoListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SearchAbnormalOrderRsp__storage_, voListArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SearchAbnormalOrderRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SearchAbnormalOrderRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\000voList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetHgSignRsp

@implementation GetHgSignRsp

@dynamic hasSignInfo, signInfo;
@dynamic signStatus;
@dynamic signPicURL;

typedef struct GetHgSignRsp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t signStatus;
  HGSign *signInfo;
  NSString *signPicURL;
} GetHgSignRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "signInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(HGSign),
        .number = GetHgSignRsp_FieldNumber_SignInfo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetHgSignRsp__storage_, signInfo),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "signStatus",
        .dataTypeSpecific.className = NULL,
        .number = GetHgSignRsp_FieldNumber_SignStatus,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetHgSignRsp__storage_, signStatus),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "signPicURL",
        .dataTypeSpecific.className = NULL,
        .number = GetHgSignRsp_FieldNumber_SignPicURL,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetHgSignRsp__storage_, signPicURL),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetHgSignRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetHgSignRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\010\000\002\n\000\003\010!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SaveOrUpdateHgSignReq

@implementation SaveOrUpdateHgSignReq

@dynamic hgSignId;
@dynamic signPic;
@dynamic status;

typedef struct SaveOrUpdateHgSignReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t status;
  NSString *signPic;
  uint64_t hgSignId;
} SaveOrUpdateHgSignReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "hgSignId",
        .dataTypeSpecific.className = NULL,
        .number = SaveOrUpdateHgSignReq_FieldNumber_HgSignId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SaveOrUpdateHgSignReq__storage_, hgSignId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "signPic",
        .dataTypeSpecific.className = NULL,
        .number = SaveOrUpdateHgSignReq_FieldNumber_SignPic,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SaveOrUpdateHgSignReq__storage_, signPic),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = SaveOrUpdateHgSignReq_FieldNumber_Status,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SaveOrUpdateHgSignReq__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SaveOrUpdateHgSignReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SaveOrUpdateHgSignReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\010\000\002\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SaveOrUpdateHgSignRsp

@implementation SaveOrUpdateHgSignRsp

@dynamic hgSignId;

typedef struct SaveOrUpdateHgSignRsp__storage_ {
  uint32_t _has_storage_[1];
  uint64_t hgSignId;
} SaveOrUpdateHgSignRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "hgSignId",
        .dataTypeSpecific.className = NULL,
        .number = SaveOrUpdateHgSignRsp_FieldNumber_HgSignId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SaveOrUpdateHgSignRsp__storage_, hgSignId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SaveOrUpdateHgSignRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SaveOrUpdateHgSignRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OrderRepetitionReq

@implementation OrderRepetitionReq

@dynamic branchId;
@dynamic name;
@dynamic orgNo;
@dynamic orgId;

typedef struct OrderRepetitionReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  NSString *orgNo;
  uint64_t branchId;
  uint64_t orgId;
} OrderRepetitionReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "branchId",
        .dataTypeSpecific.className = NULL,
        .number = OrderRepetitionReq_FieldNumber_BranchId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OrderRepetitionReq__storage_, branchId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = OrderRepetitionReq_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OrderRepetitionReq__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "orgNo",
        .dataTypeSpecific.className = NULL,
        .number = OrderRepetitionReq_FieldNumber_OrgNo,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OrderRepetitionReq__storage_, orgNo),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "orgId",
        .dataTypeSpecific.className = NULL,
        .number = OrderRepetitionReq_FieldNumber_OrgId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(OrderRepetitionReq__storage_, orgId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OrderRepetitionReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OrderRepetitionReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\010\000\003\004A\000\004\005\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OrderRepetitionRsp

@implementation OrderRepetitionRsp

@dynamic status;
@dynamic noticeMsg;

typedef struct OrderRepetitionRsp__storage_ {
  uint32_t _has_storage_[1];
  int32_t status;
  NSString *noticeMsg;
} OrderRepetitionRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = OrderRepetitionRsp_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OrderRepetitionRsp__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "noticeMsg",
        .dataTypeSpecific.className = NULL,
        .number = OrderRepetitionRsp_FieldNumber_NoticeMsg,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OrderRepetitionRsp__storage_, noticeMsg),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OrderRepetitionRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OrderRepetitionRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CheckFinishOrderRsp

@implementation CheckFinishOrderRsp

@dynamic finishOrder;
@dynamic msg;

typedef struct CheckFinishOrderRsp__storage_ {
  uint32_t _has_storage_[1];
  NSString *msg;
} CheckFinishOrderRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "finishOrder",
        .dataTypeSpecific.className = NULL,
        .number = CheckFinishOrderRsp_FieldNumber_FinishOrder,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "msg",
        .dataTypeSpecific.className = NULL,
        .number = CheckFinishOrderRsp_FieldNumber_Msg,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CheckFinishOrderRsp__storage_, msg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CheckFinishOrderRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CheckFinishOrderRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WithdrawRsp

@implementation WithdrawRsp

@dynamic status;
@dynamic message;
@dynamic appURL;
@dynamic webURL;

typedef struct WithdrawRsp__storage_ {
  uint32_t _has_storage_[1];
  int32_t status;
  NSString *message;
  NSString *appURL;
  NSString *webURL;
} WithdrawRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = WithdrawRsp_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WithdrawRsp__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "message",
        .dataTypeSpecific.className = NULL,
        .number = WithdrawRsp_FieldNumber_Message,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(WithdrawRsp__storage_, message),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "appURL",
        .dataTypeSpecific.className = NULL,
        .number = WithdrawRsp_FieldNumber_AppURL,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(WithdrawRsp__storage_, appURL),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "webURL",
        .dataTypeSpecific.className = NULL,
        .number = WithdrawRsp_FieldNumber_WebURL,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(WithdrawRsp__storage_, webURL),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WithdrawRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WithdrawRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\003\004!!\000\004\004!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetFeedBackOrderOrgRsp

@implementation GetFeedBackOrderOrgRsp

@dynamic voListArray, voListArray_Count;

typedef struct GetFeedBackOrderOrgRsp__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *voListArray;
} GetFeedBackOrderOrgRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "voListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(OrgVO),
        .number = GetFeedBackOrderOrgRsp_FieldNumber_VoListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetFeedBackOrderOrgRsp__storage_, voListArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetFeedBackOrderOrgRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetFeedBackOrderOrgRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\000voList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PushOperationReq

@implementation PushOperationReq

@dynamic pushType;
@dynamic token;
@dynamic operType;

typedef struct PushOperationReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t pushType;
  uint32_t operType;
  NSString *token;
} PushOperationReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "pushType",
        .dataTypeSpecific.className = NULL,
        .number = PushOperationReq_FieldNumber_PushType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PushOperationReq__storage_, pushType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "token",
        .dataTypeSpecific.className = NULL,
        .number = PushOperationReq_FieldNumber_Token,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PushOperationReq__storage_, token),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "operType",
        .dataTypeSpecific.className = NULL,
        .number = PushOperationReq_FieldNumber_OperType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PushOperationReq__storage_, operType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PushOperationReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PushOperationReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\010\000\003\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetOrgNOOrderListRsp

@implementation GetOrgNOOrderListRsp

@dynamic size;
@dynamic status;

typedef struct GetOrgNOOrderListRsp__storage_ {
  uint32_t _has_storage_[1];
  int64_t size;
  int64_t status;
} GetOrgNOOrderListRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "size",
        .dataTypeSpecific.className = NULL,
        .number = GetOrgNOOrderListRsp_FieldNumber_Size,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetOrgNOOrderListRsp__storage_, size),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = GetOrgNOOrderListRsp_FieldNumber_Status,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetOrgNOOrderListRsp__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetOrgNOOrderListRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetOrgNOOrderListRsp__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CheckOrderSettleRsp

@implementation CheckOrderSettleRsp

@dynamic settleType;
@dynamic msg;

typedef struct CheckOrderSettleRsp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t settleType;
  NSString *msg;
} CheckOrderSettleRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "settleType",
        .dataTypeSpecific.className = NULL,
        .number = CheckOrderSettleRsp_FieldNumber_SettleType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CheckOrderSettleRsp__storage_, settleType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "msg",
        .dataTypeSpecific.className = NULL,
        .number = CheckOrderSettleRsp_FieldNumber_Msg,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CheckOrderSettleRsp__storage_, msg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CheckOrderSettleRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CheckOrderSettleRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - BatchSettleOrderRsp

@implementation BatchSettleOrderRsp

@dynamic orderListArray, orderListArray_Count;
@dynamic totalFee;
@dynamic paidFee;
@dynamic prePaidFee;
@dynamic rebateFee;
@dynamic fee;
@dynamic settlePayType;
@dynamic refundType;
@dynamic ddFee;

typedef struct BatchSettleOrderRsp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t settlePayType;
  NSMutableArray *orderListArray;
  NSString *totalFee;
  NSString *paidFee;
  NSString *prePaidFee;
  NSString *rebateFee;
  NSString *fee;
} BatchSettleOrderRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(OrderCurrent),
        .number = BatchSettleOrderRsp_FieldNumber_OrderListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(BatchSettleOrderRsp__storage_, orderListArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "totalFee",
        .dataTypeSpecific.className = NULL,
        .number = BatchSettleOrderRsp_FieldNumber_TotalFee,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BatchSettleOrderRsp__storage_, totalFee),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "paidFee",
        .dataTypeSpecific.className = NULL,
        .number = BatchSettleOrderRsp_FieldNumber_PaidFee,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(BatchSettleOrderRsp__storage_, paidFee),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "prePaidFee",
        .dataTypeSpecific.className = NULL,
        .number = BatchSettleOrderRsp_FieldNumber_PrePaidFee,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(BatchSettleOrderRsp__storage_, prePaidFee),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "rebateFee",
        .dataTypeSpecific.className = NULL,
        .number = BatchSettleOrderRsp_FieldNumber_RebateFee,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(BatchSettleOrderRsp__storage_, rebateFee),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fee",
        .dataTypeSpecific.className = NULL,
        .number = BatchSettleOrderRsp_FieldNumber_Fee,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(BatchSettleOrderRsp__storage_, fee),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "settlePayType",
        .dataTypeSpecific.className = NULL,
        .number = BatchSettleOrderRsp_FieldNumber_SettlePayType,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(BatchSettleOrderRsp__storage_, settlePayType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "refundType",
        .dataTypeSpecific.className = NULL,
        .number = BatchSettleOrderRsp_FieldNumber_RefundType,
        .hasIndex = 6,
        .offset = 7,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "ddFee",
        .dataTypeSpecific.className = NULL,
        .number = BatchSettleOrderRsp_FieldNumber_DdFee,
        .hasIndex = 8,
        .offset = 9,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BatchSettleOrderRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BatchSettleOrderRsp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\010\001\000orderList\000\002\010\000\003\007\000\004\n\000\005\t\000\007\r\000\010\n\000\t\005\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ConfirmOrderBatchFinishReq

@implementation ConfirmOrderBatchFinishReq

@dynamic orderIdsArray, orderIdsArray_Count;
@dynamic refundPayType;

typedef struct ConfirmOrderBatchFinishReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t refundPayType;
  NSMutableArray *orderIdsArray;
} ConfirmOrderBatchFinishReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderIdsArray",
        .dataTypeSpecific.className = NULL,
        .number = ConfirmOrderBatchFinishReq_FieldNumber_OrderIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ConfirmOrderBatchFinishReq__storage_, orderIdsArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "refundPayType",
        .dataTypeSpecific.className = NULL,
        .number = ConfirmOrderBatchFinishReq_FieldNumber_RefundPayType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ConfirmOrderBatchFinishReq__storage_, refundPayType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ConfirmOrderBatchFinishReq class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ConfirmOrderBatchFinishReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\000orderIds\000\002\r\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetOrderPRCItemRsp

@implementation GetOrderPRCItemRsp

@dynamic itemsArray, itemsArray_Count;

typedef struct GetOrderPRCItemRsp__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *itemsArray;
} GetOrderPRCItemRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "itemsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(OrderPRCItemVO),
        .number = GetOrderPRCItemRsp_FieldNumber_ItemsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetOrderPRCItemRsp__storage_, itemsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetOrderPRCItemRsp class]
                                     rootClass:[AppInterfaceRoot class]
                                          file:AppInterfaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetOrderPRCItemRsp__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
